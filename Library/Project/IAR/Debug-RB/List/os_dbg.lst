###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.1.8447/W32 for ARM        13/Feb/2017  13:48:13
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Source\Micrium\uC-OS-III\Source\os_dbg.c
#    Command line =  
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Source\Micrium\uC-OS-III\Source\os_dbg.c" -D
#        USE_STDPERIPH_DRIVER -D STM32F10X_HD -D DEBUG -D STM32F103RB -D
#        STM32_FLASH_SIZE=128 -lCN "V:\我的项目\04
#        长沙南车\2015年后项目\NC16-011-A 智能电表\04 程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\Debug-RB\List\" -o "V:\我的项目\04
#        长沙南车\2015年后项目\NC16-011-A 智能电表\04 程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\Debug-RB\Obj\" --debug --endian=little
#        --cpu=ARM7TDMI -e --fpu=None --dlib_config "D:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01 智能电表\Library\Project\IAR\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\APP\" -I "V:\我的项目\04
#        长沙南车\2015年后项目\NC16-011-A 智能电表\04 程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\APP\User\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\APP\AES\" -I "V:\我的项目\04
#        长沙南车\2015年后项目\NC16-011-A 智能电表\04 程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\APP\Config\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\APP\OS\" -I "V:\我的项目\04
#        长沙南车\2015年后项目\NC16-011-A 智能电表\04 程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\APP\User\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\APP\SIM900A\Source\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\APP\SIM900A\Port\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\APP\SIM900A\OS\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\APP\SIM900A\Config\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\APP\Protocol\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\BSP\" -I "V:\我的项目\04
#        长沙南车\2015年后项目\NC16-011-A 智能电表\04 程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\BSP\Driver\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\BSP\IAR\" -I "V:\我的项目\04
#        长沙南车\2015年后项目\NC16-011-A 智能电表\04 程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\BSP\Os\" -I "V:\我的项目\04
#        长沙南车\2015年后项目\NC16-011-A 智能电表\04 程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\BSP\Os\uCOS-III\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\BSP\St\" -I "V:\我的项目\04
#        长沙南车\2015年后项目\NC16-011-A 智能电表\04 程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\BSP\St\FWLib\CMSIS\CM3\CoreSupport\"
#        -I "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\BSP\St\FWLib\CMSIS\CM3\DeviceSupport\ST\STM32F10x\"
#        -I "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\BSP\St\FWLib\STM32F10x_StdPeriph_Driver\inc\"
#        -I "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\Micrium\uC-CPU\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\Micrium\uC-CPU\ARM-Cortex-M3\IAR\"
#        -I "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\Micrium\uC-LIB\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\BSP\Os\OSAL\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\OSAL\OS\" -I "V:\我的项目\04
#        长沙南车\2015年后项目\NC16-011-A 智能电表\04 程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\Micrium\uC-MB\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\Micrium\uC-MB\Cfg\Template\"
#        -I "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\Micrium\uC-MB\OS\uCOS-III\"
#        -I "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\Micrium\uC-MB\Source\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\Ports\ARM-Cortex-M3\Generic\IAR\"
#        -I "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\Source\"
#        -I "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\FatFs\" -I "V:\我的项目\04
#        长沙南车\2015年后项目\NC16-011-A 智能电表\04 程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\FatFs\option\" --cpu_mode
#        thumb -Oh --use_c++_inline
#    List file    =  
#        V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\Debug-RB\List\os_dbg.lst
#    Object file  =  
#        V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\Debug-RB\Obj\os_dbg.o
#
###############################################################################

V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04 程序\NC014-001-000.CX_01 智能电表\Library\Source\Micrium\uC-OS-III\Source\os_dbg.c
      1          /*
      2          ************************************************************************************************************************
      3          *                                                      uC/OS-III
      4          *                                                 The Real-Time Kernel
      5          *
      6          *                                  (c) Copyright 2009-2012; Micrium, Inc.; Weston, FL
      7          *                           All rights reserved.  Protected by international copyright laws.
      8          *
      9          *                                                  DEBUGGER CONSTANTS
     10          *
     11          * File    : OS_DBG.C
     12          * By      : JJL
     13          * Version : V3.03.01
     14          *
     15          * LICENSING TERMS:
     16          * ---------------
     17          *           uC/OS-III is provided in source form for FREE short-term evaluation, for educational use or 
     18          *           for peaceful research.  If you plan or intend to use uC/OS-III in a commercial application/
     19          *           product then, you need to contact Micrium to properly license uC/OS-III for its use in your 
     20          *           application/product.   We provide ALL the source code for your convenience and to help you 
     21          *           experience uC/OS-III.  The fact that the source is provided does NOT mean that you can use 
     22          *           it commercially without paying a licensing fee.
     23          *
     24          *           Knowledge of the source code may NOT be used to develop a similar product.
     25          *
     26          *           Please help us continue to provide the embedded community with the finest software available.
     27          *           Your honesty is greatly appreciated.
     28          *
     29          *           You can contact us at www.micrium.com, or by phone at +1 (954) 217-2036.
     30          ************************************************************************************************************************
     31          */
     32          
     33          #define  MICRIUM_SOURCE
     34          #include <os.h>
     35          
     36          #ifdef VSC_INCLUDE_SOURCE_FILE_NAMES
     37          const  CPU_CHAR  *os_dbg__c = "$Id: $";
     38          #endif
     39          

   \                                 In section .rodata, align 1, keep-with-next
     40          CPU_INT08U  const  OSDbg_DbgEn                 = OS_CFG_DBG_EN;                /* Debug constants are defined below   */
   \                     OSDbg_DbgEn:
   \   00000000   0x00               DC8 0
     41          
     42          #if OS_CFG_DBG_EN > 0u
     43          
     44          /*
     45          ************************************************************************************************************************
     46          *                                                      DEBUG DATA
     47          ************************************************************************************************************************
     48          */
     49          
     50          CPU_INT08U  const  OSDbg_ArgChkEn              = OS_CFG_ARG_CHK_EN;
     51          CPU_INT08U  const  OSDbg_AppHooksEn            = OS_CFG_APP_HOOKS_EN;
     52          
     53          CPU_INT32U  const  OSDbg_EndiannessTest        = 0x12345678LU;                 /* Variable to test CPU endianness     */
     54          
     55          CPU_INT08U  const  OSDbg_CalledFromISRChkEn    = OS_CFG_CALLED_FROM_ISR_CHK_EN;
     56          
     57          CPU_INT08U  const  OSDbg_FlagEn                = OS_CFG_FLAG_EN;
     58          OS_FLAG_GRP const  OSDbg_FlagGrp               = { 0u };
     59          #if OS_CFG_FLAG_EN > 0u
     60          CPU_INT08U  const  OSDbg_FlagDelEn             = OS_CFG_FLAG_DEL_EN;
     61          CPU_INT08U  const  OSDbg_FlagModeClrEn         = OS_CFG_FLAG_MODE_CLR_EN;
     62          CPU_INT08U  const  OSDbg_FlagPendAbortEn       = OS_CFG_FLAG_PEND_ABORT_EN;
     63          CPU_INT16U  const  OSDbg_FlagGrpSize           = sizeof(OS_FLAG_GRP);          /* Size in Bytes of OS_FLAG_GRP        */
     64          CPU_INT16U  const  OSDbg_FlagWidth             = sizeof(OS_FLAGS);             /* Width (in bytes) of OS_FLAGS        */
     65          #else
     66          CPU_INT08U  const  OSDbg_FlagDelEn             = 0u;
     67          CPU_INT08U  const  OSDbg_FlagModeClrEn         = 0u;
     68          CPU_INT08U  const  OSDbg_FlagPendAbortEn       = 0u;
     69          CPU_INT16U  const  OSDbg_FlagGrpSize           = 0u;
     70          CPU_INT16U  const  OSDbg_FlagWidth             = 0u;
     71          #endif
     72          
     73          #if OS_CFG_ISR_POST_DEFERRED_EN > 0u
     74          CPU_INT16U  const  OSDbg_IntQ                  = sizeof(OS_INT_Q);
     75          #else
     76          CPU_INT16U  const  OSDbg_IntQ                  = 0u;
     77          #endif
     78          
     79          CPU_INT08U  const  OSDbg_ISRPostDeferredEn     = OS_CFG_ISR_POST_DEFERRED_EN;
     80          
     81          OS_MEM      const  OSDbg_Mem                   = { 0u };
     82          CPU_INT08U  const  OSDbg_MemEn                 = OS_CFG_MEM_EN;
     83          #if OS_CFG_MEM_EN > 0u
     84          CPU_INT16U  const  OSDbg_MemSize               = sizeof(OS_MEM);               /* Mem. Partition header size (bytes)  */
     85          #else
     86          CPU_INT16U  const  OSDbg_MemSize               = 0u;
     87          #endif
     88          
     89          
     90          #if (OS_MSG_EN) > 0u
     91          CPU_INT08U  const  OSDbg_MsgEn                 = 1u;
     92          CPU_INT16U  const  OSDbg_MsgSize               = sizeof(OS_MSG);               /* OS_MSG size                         */
     93          CPU_INT16U  const  OSDbg_MsgPoolSize           = sizeof(OS_MSG_POOL);
     94          CPU_INT16U  const  OSDbg_MsgQSize              = sizeof(OS_MSG_Q);
     95          #else
     96          CPU_INT08U  const  OSDbg_MsgEn                 = 0u;
     97          CPU_INT16U  const  OSDbg_MsgSize               = 0u;
     98          CPU_INT16U  const  OSDbg_MsgPoolSize           = 0u;
     99          CPU_INT16U  const  OSDbg_MsgQSize              = 0u;
    100          #endif
    101          
    102          
    103          OS_MUTEX    const  OSDbg_Mutex                 = { 0u };
    104          CPU_INT08U  const  OSDbg_MutexEn               = OS_CFG_MUTEX_EN;
    105          #if OS_CFG_MUTEX_EN > 0u
    106          CPU_INT08U  const  OSDbg_MutexDelEn            = OS_CFG_MUTEX_DEL_EN;
    107          CPU_INT08U  const  OSDbg_MutexPendAbortEn      = OS_CFG_MUTEX_PEND_ABORT_EN;
    108          CPU_INT16U  const  OSDbg_MutexSize             = sizeof(OS_MUTEX);             /* Size in bytes of OS_MUTEX           */
    109          #else
    110          CPU_INT08U  const  OSDbg_MutexDelEn            = 0u;
    111          CPU_INT08U  const  OSDbg_MutexPendAbortEn      = 0u;
    112          CPU_INT16U  const  OSDbg_MutexSize             = 0u;
    113          #endif
    114          
    115          CPU_INT08U  const  OSDbg_ObjTypeChkEn          = OS_CFG_OBJ_TYPE_CHK_EN;
    116          
    117          
    118          CPU_INT08U  const  OSDbg_PendMultiEn           = OS_CFG_PEND_MULTI_EN;
    119          CPU_INT16U  const  OSDbg_PendDataSize          = sizeof(OS_PEND_DATA);
    120          CPU_INT16U  const  OSDbg_PendListSize          = sizeof(OS_PEND_LIST);
    121          CPU_INT16U  const  OSDbg_PendObjSize           = sizeof(OS_PEND_OBJ);
    122          
    123          
    124          CPU_INT16U  const  OSDbg_PrioMax               = OS_CFG_PRIO_MAX;              /* Maximum number of priorities        */
    125          CPU_INT16U  const  OSDbg_PrioTblSize           = sizeof(OSPrioTbl);
    126          
    127          CPU_INT16U  const  OSDbg_PtrSize               = sizeof(void *);               /* Size in Bytes of a pointer          */
    128          
    129          
    130          OS_Q        const  OSDbg_Q                     = { 0u };
    131          CPU_INT08U  const  OSDbg_QEn                   = OS_CFG_Q_EN;
    132          #if OS_CFG_Q_EN > 0u
    133          CPU_INT08U  const  OSDbg_QDelEn                = OS_CFG_Q_DEL_EN;
    134          CPU_INT08U  const  OSDbg_QFlushEn              = OS_CFG_Q_FLUSH_EN;
    135          CPU_INT08U  const  OSDbg_QPendAbortEn          = OS_CFG_Q_PEND_ABORT_EN;
    136          CPU_INT16U  const  OSDbg_QSize                 = sizeof(OS_Q);                 /* Size in bytes of OS_Q structure     */
    137          #else
    138          CPU_INT08U  const  OSDbg_QDelEn                = 0u;
    139          CPU_INT08U  const  OSDbg_QFlushEn              = 0u;
    140          CPU_INT08U  const  OSDbg_QPendAbortEn          = 0u;
    141          CPU_INT16U  const  OSDbg_QSize                 = 0u;
    142          #endif
    143          
    144          
    145          CPU_INT08U  const  OSDbg_SchedRoundRobinEn     = OS_CFG_SCHED_ROUND_ROBIN_EN;
    146          
    147          
    148          OS_SEM      const  OSDbg_Sem                   = { 0u };
    149          CPU_INT08U  const  OSDbg_SemEn                 = OS_CFG_SEM_EN;
    150          #if OS_CFG_SEM_EN > 0u
    151          CPU_INT08U  const  OSDbg_SemDelEn              = OS_CFG_SEM_DEL_EN;
    152          CPU_INT08U  const  OSDbg_SemPendAbortEn        = OS_CFG_SEM_PEND_ABORT_EN;
    153          CPU_INT08U  const  OSDbg_SemSetEn              = OS_CFG_SEM_SET_EN;
    154          CPU_INT16U  const  OSDbg_SemSize               = sizeof(OS_SEM);               /* Size in bytes of OS_SEM             */
    155          #else
    156          CPU_INT08U  const  OSDbg_SemDelEn              = 0u;
    157          CPU_INT08U  const  OSDbg_SemPendAbortEn        = 0u;
    158          CPU_INT08U  const  OSDbg_SemSetEn              = 0u;
    159          CPU_INT16U  const  OSDbg_SemSize               = 0u;
    160          #endif
    161          
    162          
    163          CPU_INT16U  const  OSDbg_RdyList               = sizeof(OS_RDY_LIST);
    164          CPU_INT32U  const  OSDbg_RdyListSize           = sizeof(OSRdyList);            /* Number of bytes in the ready table  */
    165          
    166          CPU_INT08U  const  OSDbg_StkWidth              = sizeof(CPU_STK);
    167          
    168          CPU_INT08U  const  OSDbg_StatTaskEn            = OS_CFG_STAT_TASK_EN;
    169          CPU_INT08U  const  OSDbg_StatTaskStkChkEn      = OS_CFG_STAT_TASK_STK_CHK_EN;
    170          
    171          CPU_INT08U  const  OSDbg_TaskChangePrioEn      = OS_CFG_TASK_CHANGE_PRIO_EN;
    172          CPU_INT08U  const  OSDbg_TaskDelEn             = OS_CFG_TASK_DEL_EN;
    173          CPU_INT08U  const  OSDbg_TaskQEn               = OS_CFG_TASK_Q_EN;
    174          CPU_INT08U  const  OSDbg_TaskQPendAbortEn      = OS_CFG_TASK_Q_PEND_ABORT_EN;
    175          CPU_INT08U  const  OSDbg_TaskProfileEn         = OS_CFG_TASK_PROFILE_EN;
    176          CPU_INT16U  const  OSDbg_TaskRegTblSize        = OS_CFG_TASK_REG_TBL_SIZE;
    177          CPU_INT08U  const  OSDbg_TaskSemPendAbortEn    = OS_CFG_TASK_SEM_PEND_ABORT_EN;
    178          CPU_INT08U  const  OSDbg_TaskSuspendEn         = OS_CFG_TASK_SUSPEND_EN;
    179          
    180          
    181          CPU_INT16U  const  OSDbg_TCBSize               = sizeof(OS_TCB);               /* Size in Bytes of OS_TCB             */
    182          
    183          CPU_INT16U  const  OSDbg_TickSpokeSize         = sizeof(OS_TICK_SPOKE);
    184          
    185          CPU_INT08U  const  OSDbg_TimeDlyHMSMEn         = OS_CFG_TIME_DLY_HMSM_EN;
    186          CPU_INT08U  const  OSDbg_TimeDlyResumeEn       = OS_CFG_TIME_DLY_RESUME_EN;
    187          
    188          #if defined(OS_CFG_TLS_TBL_SIZE) && (OS_CFG_TLS_TBL_SIZE > 0u)
    189          CPU_INT16U  const  OSDbg_TLS_TblSize           = OS_CFG_TLS_TBL_SIZE * sizeof(OS_TLS);
    190          #else
    191          CPU_INT16U  const  OSDbg_TLS_TblSize           = 0u;
    192          #endif
    193          
    194          
    195          OS_TMR      const  OSDbg_Tmr                   = { 0u };
    196          CPU_INT08U  const  OSDbg_TmrEn                 = OS_CFG_TMR_EN;
    197          #if OS_CFG_TMR_EN > 0u
    198          CPU_INT08U  const  OSDbg_TmrDelEn              = OS_CFG_TMR_DEL_EN;
    199          CPU_INT16U  const  OSDbg_TmrSize               = sizeof(OS_TMR);
    200          CPU_INT16U  const  OSDbg_TmrSpokeSize          = sizeof(OS_TMR_SPOKE);
    201          #else
    202          CPU_INT08U  const  OSDbg_TmrDelEn              = 0u;
    203          CPU_INT16U  const  OSDbg_TmrSize               = 0u;
    204          CPU_INT16U  const  OSDbg_TmrSpokeSize          = 0u;
    205          #endif
    206          
    207          CPU_INT16U  const  OSDbg_VersionNbr            = OS_VERSION;
    208          
    209          /*$PAGE*/
    210          /*
    211          ************************************************************************************************************************
    212          *                                                      DEBUG DATA
    213          *                                     TOTAL DATA SPACE (i.e. RAM) USED BY uC/OS-III
    214          ************************************************************************************************************************
    215          */
    216          
    217          CPU_INT32U  const  OSDbg_DataSize = sizeof(OSIntNestingCtr)
    218          
    219          #if OS_CFG_APP_HOOKS_EN > 0u
    220                                            + sizeof(OS_AppTaskCreateHookPtr)
    221                                            + sizeof(OS_AppTaskDelHookPtr)
    222                                            + sizeof(OS_AppTaskReturnHookPtr)
    223          
    224                                            + sizeof(OS_AppIdleTaskHookPtr)
    225                                            + sizeof(OS_AppStatTaskHookPtr)
    226                                            + sizeof(OS_AppTaskSwHookPtr)
    227                                            + sizeof(OS_AppTimeTickHookPtr)
    228          #endif
    229          
    230                                            + sizeof(OSIdleTaskCtr)
    231                                            + sizeof(OSIdleTaskTCB)
    232          
    233          #ifdef CPU_CFG_INT_DIS_MEAS_EN
    234                                            + sizeof(OSIntDisTimeMax)
    235          #endif
    236          
    237          #if OS_CFG_ISR_POST_DEFERRED_EN > 0u
    238                                            + sizeof(OSIntQInPtr)
    239                                            + sizeof(OSIntQOutPtr)
    240                                            + sizeof(OSIntQNbrEntries)
    241                                            + sizeof(OSIntQNbrEntriesMax)
    242                                            + sizeof(OSIntQOvfCtr)
    243                                            + sizeof(OSIntQTaskTCB)
    244                                            + sizeof(OSIntQTaskTimeMax)
    245          #endif
    246          
    247                                            + sizeof(OSRunning)
    248          
    249          #ifdef OS_SAFETY_CRITICAL_IEC61508
    250                                            + sizeof(OSSafetyCriticalStartFlag)
    251          #endif
    252          
    253          #if OS_CFG_FLAG_EN > 0u
    254                                            + sizeof(OSFlagDbgListPtr)
    255                                            + sizeof(OSFlagQty)
    256          #endif
    257          
    258          #if OS_CFG_MEM_EN > 0u
    259          #if OS_CFG_DBG_EN > 0u
    260                                            + sizeof(OSMemDbgListPtr)
    261          #endif
    262                                            + sizeof(OSMemQty)
    263          #endif
    264          
    265          #if OS_MSG_EN > 0u
    266                                            + sizeof(OSMsgPool)
    267          #endif
    268          
    269          #if OS_CFG_MUTEX_EN > 0u
    270          #if OS_CFG_DBG_EN > 0u
    271                                            + sizeof(OSMutexDbgListPtr)
    272          #endif
    273                                            + sizeof(OSMutexQty)
    274          #endif
    275          
    276                                            + sizeof(OSPrioCur)
    277                                            + sizeof(OSPrioHighRdy)
    278                                            + sizeof(OSPrioSaved)
    279                                            + sizeof(OSPrioTbl)
    280          
    281          #if OS_CFG_Q_EN > 0u
    282          #if OS_CFG_DBG_EN > 0u
    283                                            + sizeof(OSQDbgListPtr)
    284          #endif
    285                                            + sizeof(OSQQty)
    286          #endif
    287          
    288                                            + sizeof(OSRdyList)
    289          
    290                                            + sizeof(OSSchedLockNestingCtr)
    291          
    292          #if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
    293                                            + sizeof(OSSchedLockTimeBegin)
    294                                            + sizeof(OSSchedLockTimeMax)
    295                                            + sizeof(OSSchedLockTimeMaxCur)
    296          #endif
    297          
    298          #if OS_CFG_SCHED_ROUND_ROBIN_EN
    299                                            + sizeof(OSSchedRoundRobinDfltTimeQuanta)
    300                                            + sizeof(OSSchedRoundRobinEn)
    301          #endif
    302          
    303          #if OS_CFG_SEM_EN > 0u
    304          #if OS_CFG_DBG_EN > 0u
    305                                            + sizeof(OSSemDbgListPtr)
    306          #endif
    307                                            + sizeof(OSSemQty)
    308          #endif
    309                                            + sizeof(OSTaskCtxSwCtr)
    310          #if OS_CFG_DBG_EN > 0u
    311                                            + sizeof(OSTaskDbgListPtr)
    312          #endif
    313                                            + sizeof(OSTaskQty)
    314          
    315          #if OS_CFG_STAT_TASK_EN > 0u
    316                                            + sizeof(OSStatResetFlag)
    317                                            + sizeof(OSStatTaskCPUUsage)
    318                                            + sizeof(OSStatTaskCPUUsageMax)
    319                                            + sizeof(OSStatTaskCtr)
    320                                            + sizeof(OSStatTaskCtrMax)
    321                                            + sizeof(OSStatTaskCtrRun)
    322                                            + sizeof(OSStatTaskRdy)
    323                                            + sizeof(OSStatTaskTCB)
    324                                            + sizeof(OSStatTaskTimeMax)
    325          #endif
    326          
    327                                            + sizeof(OSTickCtr)
    328                                            + sizeof(OSTickTaskTCB)
    329                                            + sizeof(OSTickTaskTimeMax)
    330          
    331          #if OS_CFG_TMR_EN > 0u
    332          #if OS_CFG_DBG_EN > 0u
    333                                            + sizeof(OSTmrDbgListPtr)
    334          #endif
    335                                            + sizeof(OSTmrQty)
    336                                            + sizeof(OSTmrTaskTCB)
    337                                            + sizeof(OSTmrTaskTimeMax)
    338                                            + sizeof(OSTmrTickCtr)
    339                                            + sizeof(OSTmrUpdateCnt)
    340                                            + sizeof(OSTmrUpdateCtr)
    341          #endif
    342          
    343          #if OS_CFG_TASK_REG_TBL_SIZE > 0u
    344                                            + sizeof(OSTaskRegNextAvailID)
    345          #endif
    346          
    347                                            + sizeof(OSTCBCurPtr)
    348                                            + sizeof(OSTCBHighRdyPtr);
    349          
    350          /*$PAGE*/
    351          /*
    352          ************************************************************************************************************************
    353          *                                               OS DEBUG INITIALIZATION
    354          *
    355          * Description: This function is used to make sure that debug variables that are unused in the application are not
    356          *              optimized away.  This function might not be necessary for all compilers.  In this case, you should simply
    357          *              DELETE the code in this function while still leaving the declaration of the function itself.
    358          *
    359          * Arguments  : none
    360          *
    361          * Returns    : none
    362          *
    363          * Note(s)    : (1) This code doesn't do anything, it simply prevents the compiler from optimizing out the 'const'
    364          *                  variables which are declared in this file.
    365          *              (2) You may decide to 'compile out' the code (by using #if 0/#endif) INSIDE the function if your compiler
    366          *                  DOES NOT optimize out the 'const' variables above.
    367          ************************************************************************************************************************
    368          */
    369          
    370          void  OS_Dbg_Init (void)
    371          {
    372              CPU_INT08U const  *p_temp08;
    373              CPU_INT16U const  *p_temp16;
    374              CPU_INT32U const  *p_temp32;
    375          
    376          
    377              p_temp08 = (CPU_INT08U const *)&OSDbg_DbgEn;
    378          
    379              p_temp32 = (CPU_INT32U const *)&OSDbg_DataSize;
    380          
    381              p_temp08 = (CPU_INT08U const *)&OSDbg_ArgChkEn;
    382              p_temp08 = (CPU_INT08U const *)&OSDbg_AppHooksEn;
    383          
    384              p_temp32 = (CPU_INT32U const *)&OSDbg_EndiannessTest;
    385          
    386              p_temp08 = (CPU_INT08U const *)&OSDbg_CalledFromISRChkEn;
    387          
    388              p_temp16 = (CPU_INT16U const *)&OSDbg_FlagGrp;
    389              p_temp08 = (CPU_INT08U const *)&OSDbg_FlagEn;
    390          #if OS_CFG_FLAG_EN > 0u
    391              p_temp08 = (CPU_INT08U const *)&OSDbg_FlagDelEn;
    392              p_temp08 = (CPU_INT08U const *)&OSDbg_FlagModeClrEn;
    393              p_temp08 = (CPU_INT08U const *)&OSDbg_FlagPendAbortEn;
    394              p_temp16 = (CPU_INT16U const *)&OSDbg_FlagGrpSize;
    395              p_temp16 = (CPU_INT16U const *)&OSDbg_FlagWidth;
    396          #endif
    397          
    398          #if OS_CFG_ISR_POST_DEFERRED_EN > 0u
    399              p_temp16 = (CPU_INT16U const *)&OSDbg_IntQ;
    400          #endif
    401          
    402              p_temp08 = (CPU_INT08U const *)&OSDbg_ISRPostDeferredEn;
    403          
    404              p_temp16 = (CPU_INT16U const *)&OSDbg_Mem;
    405              p_temp08 = (CPU_INT08U const *)&OSDbg_MemEn;
    406          #if OS_CFG_MEM_EN > 0u
    407              p_temp16 = (CPU_INT16U const *)&OSDbg_MemSize;
    408          #endif
    409          
    410              p_temp08 = (CPU_INT08U const *)&OSDbg_MsgEn;
    411          #if (OS_MSG_EN) > 0u
    412              p_temp16 = (CPU_INT16U const *)&OSDbg_MsgSize;
    413              p_temp16 = (CPU_INT16U const *)&OSDbg_MsgPoolSize;
    414              p_temp16 = (CPU_INT16U const *)&OSDbg_MsgQSize;
    415          #endif
    416          
    417              p_temp16 = (CPU_INT16U const *)&OSDbg_Mutex;
    418              p_temp08 = (CPU_INT08U const *)&OSDbg_MutexEn;
    419          #if (OS_CFG_MUTEX_EN) > 0u
    420              p_temp08 = (CPU_INT08U const *)&OSDbg_MutexDelEn;
    421              p_temp08 = (CPU_INT08U const *)&OSDbg_MutexPendAbortEn;
    422              p_temp16 = (CPU_INT16U const *)&OSDbg_MutexSize;
    423          #endif
    424          
    425              p_temp08 = (CPU_INT08U const *)&OSDbg_ObjTypeChkEn;
    426          
    427              p_temp08 = (CPU_INT08U const *)&OSDbg_PendMultiEn;
    428              p_temp16 = (CPU_INT16U const *)&OSDbg_PendDataSize;
    429              p_temp16 = (CPU_INT16U const *)&OSDbg_PendListSize;
    430              p_temp16 = (CPU_INT16U const *)&OSDbg_PendObjSize;
    431          
    432              p_temp16 = (CPU_INT16U const *)&OSDbg_PrioMax;
    433              p_temp16 = (CPU_INT16U const *)&OSDbg_PrioTblSize;
    434          
    435              p_temp16 = (CPU_INT16U const *)&OSDbg_PtrSize;
    436          
    437              p_temp16 = (CPU_INT16U const *)&OSDbg_Q;
    438              p_temp08 = (CPU_INT08U const *)&OSDbg_QEn;
    439          #if (OS_CFG_Q_EN) > 0u
    440              p_temp08 = (CPU_INT08U const *)&OSDbg_QDelEn;
    441              p_temp08 = (CPU_INT08U const *)&OSDbg_QFlushEn;
    442              p_temp08 = (CPU_INT08U const *)&OSDbg_QPendAbortEn;
    443              p_temp16 = (CPU_INT16U const *)&OSDbg_QSize;
    444          #endif
    445          
    446              p_temp16 = (CPU_INT16U const *)&OSDbg_SchedRoundRobinEn;
    447          
    448              p_temp16 = (CPU_INT16U const *)&OSDbg_Sem;
    449              p_temp08 = (CPU_INT08U const *)&OSDbg_SemEn;
    450          #if (OS_CFG_SEM_EN) > 0u
    451              p_temp08 = (CPU_INT08U const *)&OSDbg_SemDelEn;
    452              p_temp08 = (CPU_INT08U const *)&OSDbg_SemPendAbortEn;
    453              p_temp16 = (CPU_INT16U const *)&OSDbg_SemSetEn;
    454              p_temp16 = (CPU_INT16U const *)&OSDbg_SemSize;
    455          #endif
    456          
    457              p_temp16 = (CPU_INT16U const *)&OSDbg_RdyList;
    458              p_temp32 = (CPU_INT32U const *)&OSDbg_RdyListSize;
    459          
    460              p_temp16 = (CPU_INT16U const *)&OSDbg_StkWidth;
    461          
    462              p_temp08 = (CPU_INT08U const *)&OSDbg_StatTaskEn;
    463              p_temp08 = (CPU_INT08U const *)&OSDbg_StatTaskStkChkEn;
    464          
    465              p_temp08 = (CPU_INT08U const *)&OSDbg_TaskChangePrioEn;
    466              p_temp08 = (CPU_INT08U const *)&OSDbg_TaskDelEn;
    467              p_temp08 = (CPU_INT08U const *)&OSDbg_TaskQEn;
    468              p_temp08 = (CPU_INT08U const *)&OSDbg_TaskQPendAbortEn;
    469              p_temp08 = (CPU_INT08U const *)&OSDbg_TaskProfileEn;
    470              p_temp16 = (CPU_INT16U const *)&OSDbg_TaskRegTblSize;
    471              p_temp08 = (CPU_INT08U const *)&OSDbg_TaskSemPendAbortEn;
    472              p_temp08 = (CPU_INT08U const *)&OSDbg_TaskSuspendEn;
    473          
    474              p_temp16 = (CPU_INT16U const *)&OSDbg_TCBSize;
    475          
    476              p_temp16 = (CPU_INT16U const *)&OSDbg_TickSpokeSize;
    477          
    478              p_temp08 = (CPU_INT08U const *)&OSDbg_TimeDlyHMSMEn;
    479              p_temp08 = (CPU_INT08U const *)&OSDbg_TimeDlyResumeEn;
    480          
    481          
    482              p_temp16 = (CPU_INT16U const *)&OSDbg_Tmr;
    483              p_temp08 = (CPU_INT08U const *)&OSDbg_TmrEn;
    484          #if (OS_CFG_TMR_EN) > 0u
    485              p_temp08 = (CPU_INT08U const *)&OSDbg_TmrDelEn;
    486              p_temp16 = (CPU_INT16U const *)&OSDbg_TmrSize;
    487              p_temp16 = (CPU_INT16U const *)&OSDbg_TmrSpokeSize;
    488          #endif
    489          
    490              p_temp16 = (CPU_INT16U const *)&OSDbg_VersionNbr;
    491          
    492              p_temp08 = p_temp08;                                     /* Prevent compiler warning for not using 'p_temp'        */
    493              p_temp16 = p_temp16;
    494              p_temp32 = p_temp32;
    495          }
    496          #endif


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       1  OSDbg_DbgEn

 
 1 byte in section .rodata
 
 1 byte of CONST memory

Errors: none
Warnings: none

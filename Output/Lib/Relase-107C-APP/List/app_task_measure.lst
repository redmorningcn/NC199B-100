###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       27/Dec/2017  10:03:37
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\iar\NC199B-100\Library\Source\APP\Tasks\app_task_measure.c
#    Command line =  
#        F:\iar\NC199B-100\Library\Source\APP\Tasks\app_task_measure.c -D
#        USE_STDPERIPH_DRIVER -D STM32F10X_CL -D RELEASE -D IMAGE_A -D
#        STM32F103RC -D STM32_FLASH_SIZE=256 -D HSE_VALUE=25000000 -lCN
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Relase-107C-APP\List\
#        -o
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Relase-107C-APP\Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        F:\iar\NC199B-100\Library\Project\IAR\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\User\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\AES\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Config\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\OS\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\User\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Source\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Port\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\OS\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Config\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Protocol\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Iap\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Driver\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\IAR\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\uCOS-III\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\CMSIS\CM3\CoreSupport\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\CMSIS\CM3\DeviceSupport\ST\STM32F10x\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\STM32F10x_StdPeriph_Driver\inc\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-CPU\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-CPU\ARM-Cortex-M3\IAR\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-LIB\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\OSAL\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\OSAL\OS\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\OS\uCOS-III\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\Source\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\Source\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\FatFs\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\FatFs\option\ -Om
#        --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Relase-107C-APP\List\app_task_measure.lst
#    Object file  =  
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Relase-107C-APP\Obj\app_task_measure.o
#
###############################################################################

F:\iar\NC199B-100\Library\Source\APP\Tasks\app_task_measure.c
      1          /*******************************************************************************
      2           *   Revised:        All copyrights reserved to redmorningcn.
      3           *   Revision:       v1.0
      4           *   Writer:	     redmorningcn.
      5           *
      6           *   Description:    双击选中 store 按 Ctrl + H, 钩选 Match the case, Replace with
      7           *                   输入您要的名字，点击 Replace All
      8           *                   双击选中 Store 按 Ctrl + H, 钩选 Match the case, Replace with
      9           *                   输入您要的名字，点击 Replace All
     10           *                   双击选中 STORE 按 Ctrl + H, 钩选 Match the case, Replace with
     11           *                   输入您要的名字，点击 Replace All
     12           *                   在 app_cfg.h 中指定本任务的 优先级  （ APP_TASK_STORE_PRIO ）
     13           *                                            和 任务堆栈（ APP_TASK_STORE_STK_SIZE ）大小
     14           *                   在 app.h 中声明本任务的     创建函数（ void  App_TaskStoreCreate(void) ）
     15           *                                            和 看门狗标志位 （ WDTFLAG_Store ）
     16           *
     17           *   Notes:
     18           *     				E-mail: redmorningcn@qq.com
     19           *
     20           *******************************************************************************/
     21          
     22          /*******************************************************************************
     23           * INCLUDES
     24           */
     25          #define  SNL_APP_SOURCE
     26          #include <includes.h>
     27          
     28          
     29          
     30          //#ifdef VSC_INCLUDE_SOURCE_FILE_NAMES
     31          //const  CPU_CHAR  *app_task_key__c = "$Id: $";
     32          //#endif
     33          
     34          #define APP_TASK_KEY_EN     DEF_ENABLED
     35          #if APP_TASK_KEY_EN == DEF_ENABLED
     36          /*******************************************************************************
     37           * CONSTANTS
     38           */
     39          
     40          /*******************************************************************************
     41           * MACROS
     42           */
     43          //该任务的控制周期   (OS_CFG_TICK_RATE_HZ)为1S
     44          //#define  KEY_CYCLE_TIME_TICKS     (OS_CFG_TICK_RATE_HZ * 1u)
     45          #define CYCLE_TIME_TICKS_MIN            (OS_TICKS_PER_SEC * 30)
     46          
     47          //进气口电磁阀  pd.3
     48          #define     DCF_GPIO_AIR_IN      303  
     49          //出气口电磁阀 pd.2
     50          #define     DCF_GPIO_AIR_OUT     302   
     51               
     52               
     53          /*******************************************************************************
     54           * TYPEDEFS
     55           */
     56          /***********************************************
     57          * 描述： 任务控制块（TCB）
     58          */

   \                                 In section .bss, align 4
     59          static  OS_TCB   AppTaskMeasureTCB;
   \                     AppTaskMeasureTCB:
   \   00000000                      DS8 184
   \   000000B8                      DS8 512
     60          
     61          /***********************************************
     62          * 描述： 任务堆栈（STACKS）
     63          */
     64          static  CPU_STK  AppTaskMeasureStk[ APP_TASK_MEASURE_STK_SIZE ];
     65          
     66          /*******************************************************************************
     67           * LOCAL VARIABLES
     68           */
     69          
     70          /*******************************************************************************
     71           * GLOBAL VARIABLES
     72           */
     73          /*******************************************************************************
     74           * LOCAL FUNCTIONS
     75           */
     76          static  void    AppTaskMeasure          (void *p_arg);
     77          static  void    APP_MeasureInit         (void);
     78          void            StartAirMeasure         (void);
     79          
     80          //static  void    MeasureValueHandle      (StrCtrlDCB *dcb);
     81          
     82          
     83          /*******************************************************************************
     84           * GLOBAL FUNCTIONS
     85           */
     86          
     87          /*******************************************************************************
     88           * EXTERN VARIABLES
     89           */
     90          extern OS_SEM   App_BeepSem;
     91          
     92          /*******************************************************************************
     93           * EXTERN FUNCTIONS
     94           */
     95          
     96          /*******************************************************************************/
     97          
     98          /*******************************************************************************
     99           * 名    称： App_TaskMeasureCreate
    100           * 功    能： **任务创建
    101           * 入口参数： 无
    102           * 出口参数： 无
    103           * 作　　者： Roger-WY.
    104           * 创建日期： 2015-02-05
    105           * 修    改：
    106           * 修改日期：
    107           * 备    注： 任务创建函数需要在app.h文件中声明
    108           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    109          void  App_TaskMeasureCreate(void)
    110          {
   \                     App_TaskMeasureCreate: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB08B             SUB      SP,SP,#+44
    111              OS_ERR  err;
    112          
    113              /***********************************************
    114              * 描述： 任务创建
    115              */
    116              OSTaskCreate((OS_TCB     *)&AppTaskMeasureTCB,                  // 任务控制块  （当前文件中定义）
    117                           (CPU_CHAR   *)"App Task Measure",                  // 任务名称
    118                           (OS_TASK_PTR ) AppTaskMeasure,                     // 任务函数指针（当前文件中定义）
    119                           (void       *) 0,                              // 任务函数参数
    120                           (OS_PRIO     ) APP_TASK_KEY_PRIO,              // 任务优先级，不同任务优先级可以相同，0 < 优先级 < OS_CFG_PRIO_MAX - 2（app_cfg.h中定义）
    121                           (CPU_STK    *)&AppTaskMeasureStk[0],               // 任务栈顶
    122                           (CPU_STK_SIZE) APP_TASK_KEY_STK_SIZE / 10,     // 任务栈溢出报警值
    123                           (CPU_STK_SIZE) APP_TASK_KEY_STK_SIZE,          // 任务栈大小（CPU数据宽度 * 8 * size = 4 * 8 * size(字节)）（app_cfg.h中定义）
    124                           (OS_MSG_QTY  ) 5u,                             // 可以发送给任务的最大消息队列数量
    125                           (OS_TICK     ) 0u,                             // 相同优先级任务的轮循时间（ms），0为默认
    126                           (void       *) 0,                              // 是一个指向它被用作一个TCB扩展用户提供的存储器位置
    127                           (OS_OPT      )(OS_OPT_TASK_STK_CHK |           // 允许堆栈检查该任务
    128                                          OS_OPT_TASK_STK_CLR),           // 创建任务时堆栈清零
    129                           (OS_ERR     *)&err);                           // 指向错误代码的指针，用于创建结果处理
   \   00000004   0x....             LDR.N    R0,??DataTable5
   \   00000006   0xA909             ADD      R1,SP,#+36
   \   00000008   0x9108             STR      R1,[SP, #+32]
   \   0000000A   0x2103             MOVS     R1,#+3
   \   0000000C   0x9107             STR      R1,[SP, #+28]
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0x9106             STR      R1,[SP, #+24]
   \   00000012   0x9105             STR      R1,[SP, #+20]
   \   00000014   0x2105             MOVS     R1,#+5
   \   00000016   0x9104             STR      R1,[SP, #+16]
   \   00000018   0x2140             MOVS     R1,#+64
   \   0000001A   0x9103             STR      R1,[SP, #+12]
   \   0000001C   0x2106             MOVS     R1,#+6
   \   0000001E   0x9102             STR      R1,[SP, #+8]
   \   00000020   0xF100 0x01B8      ADD      R1,R0,#+184
   \   00000024   0x9101             STR      R1,[SP, #+4]
   \   00000026   0x2117             MOVS     R1,#+23
   \   00000028   0x9100             STR      R1,[SP, #+0]
   \   0000002A   0x2300             MOVS     R3,#+0
   \   0000002C   0x.... 0x....      ADR.W    R2,AppTaskMeasure
   \   00000030   0x.... 0x....      ADR.W    R1,?_0
   \   00000034   0x.... 0x....      BL       OSTaskCreate
    130          
    131          }
   \   00000038   0xB00B             ADD      SP,SP,#+44
   \   0000003A   0xBD00             POP      {PC}             ;; return
    132          

   \                                 In section .bss, align 4
    133          OS_SEM			Bsp_MeasureSem;    	//信号量
   \                     Bsp_MeasureSem:
   \   00000000                      DS8 28
    134          
    135          /*******************************************************************************
    136           * 名    称： AppTaskMeasure
    137           * 功    能： 控制任务
    138           * 入口参数： p_arg - 由任务创建函数传入
    139           * 出口参数： 无
    140           * 作　　者： Roger-WY.
    141           * 创建日期： 2015-02-05
    142           * 修    改：
    143           * 修改日期：
    144           *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    145          static  void  AppTaskMeasure (void *p_arg)
    146          {
   \                     AppTaskMeasure: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB082             SUB      SP,SP,#+8
    147              OS_ERR      err;
    148              /***********************************************
    149              * 描述： 任务初始化
    150              */
    151              INT32U      ticks;
    152              INT32S      dly = CYCLE_TIME_TICKS_MIN;
   \   00000006   0xF247 0x5430      MOVW     R4,#+30000
   \   0000000A   0x4626             MOV      R6,R4
    153          
    154              uint16  timeadd  = 0;
   \   0000000C   0xF04F 0x0800      MOV      R8,#+0
    155              APP_MeasureInit();
   \   00000010   0x.... 0x....      BL       APP_MeasureInit
    156          
    157              BSP_OS_SemCreate(&Bsp_MeasureSem,0, "Bsp MeasureSem");      // 创建信号量
   \   00000014   0x....             LDR.N    R5,??DataTable5_1
   \   00000016   0x.... 0x....      ADR.W    R2,?_1
   \   0000001A   0x4641             MOV      R1,R8
   \   0000001C   0x4628             MOV      R0,R5
   \   0000001E   0x.... 0x....      BL       BSP_OS_SemCreate
    158              BSP_OS_SemWait(&Bsp_MeasureSem,1);
   \   00000022   0x2101             MOVS     R1,#+1
   \   00000024   0x4628             MOV      R0,R5
   \   00000026   0x.... 0x....      BL       BSP_OS_SemWait
    159              BSP_OS_TimeDly(5000);
   \   0000002A   0xF241 0x3088      MOVW     R0,#+5000
   \   0000002E   0x.... 0x....      BL       BSP_OS_TimeDly
    160              /***********************************************
    161              * 描述：Task body, always written as an infinite loop.
    162              */
    163              OSRegWdtFlag( WDT_FLAG_MEASURE );
   \   00000032   0x2004             MOVS     R0,#+4
   \   00000034   0x.... 0x....      BL       OSRegWdtFlag
   \   00000038   0xE000             B.N      ??AppTaskMeasure_0
    164                  
    165              while (DEF_TRUE) {
    166                  /***********************************************
    167                  * 描述： 本任务看门狗标志置位
    168                  */
    169                  OSSetWdtFlag( WDT_FLAG_MEASURE );
    170                      
    171                  /***********************************************
    172                  * 描述： 得到系统当前时间
    173                  */
    174                  ticks = OSTimeGet(&err);
    175                  /***********************************************
    176                  * 描述： 等待10min后，测试
    177                  */
    178                      // 等待信号量 10min
    179                  if(Ctrl.Para.dat.sRunPara.MeasureMin >60 || Ctrl.Para.dat.sRunPara.MeasureMin < 1)
    180                      Ctrl.Para.dat.sRunPara.MeasureMin = 15;
    181                  
    182           
    183                  timeadd++;
    184                  if (     (timeadd > Ctrl.Para.dat.sRunPara.MeasureMin*2 )
    185                     ||   (1 == BSP_OS_SemWait(&Bsp_MeasureSem,dly)) 
    186                      )
    187                  {
    188                      StartAirMeasure();
    189                      timeadd= 0;
    190                  }
    191                  
    192                  
    193                  /***********************************************
    194                  * 描述： 去除任务运行的时间，等到一个控制周期里剩余需要延时的时间
    195                  */
    196                  dly   = CYCLE_TIME_TICKS_MIN - ( OSTimeGet(&err) - ticks );
    197                  if ( dly  <= 0 ) {
    198                      dly   = 1;
   \                     ??AppTaskMeasure_1: (+1)
   \   0000003A   0x2601             MOVS     R6,#+1
    199                  }else if(dly > CYCLE_TIME_TICKS_MIN)
   \                     ??AppTaskMeasure_0: (+1)
   \   0000003C   0x2004             MOVS     R0,#+4
   \   0000003E   0x.... 0x....      BL       OSSetWdtFlag
   \   00000042   0x4668             MOV      R0,SP
   \   00000044   0x.... 0x....      BL       OSTimeGet
   \   00000048   0x4607             MOV      R7,R0
   \   0000004A   0x....             LDR.N    R0,??DataTable5_2
   \   0000004C   0xF890 0x1051      LDRB     R1,[R0, #+81]
   \   00000050   0x293D             CMP      R1,#+61
   \   00000052   0xDA01             BGE.N    ??AppTaskMeasure_2
   \   00000054   0x2900             CMP      R1,#+0
   \   00000056   0xD102             BNE.N    ??AppTaskMeasure_3
   \                     ??AppTaskMeasure_2: (+1)
   \   00000058   0x210F             MOVS     R1,#+15
   \   0000005A   0xF880 0x1051      STRB     R1,[R0, #+81]
   \                     ??AppTaskMeasure_3: (+1)
   \   0000005E   0xF108 0x0801      ADD      R8,R8,#+1
   \   00000062   0xF890 0x0051      LDRB     R0,[R0, #+81]
   \   00000066   0x0040             LSLS     R0,R0,#+1
   \   00000068   0xFA1F 0xF888      UXTH     R8,R8
   \   0000006C   0x4540             CMP      R0,R8
   \   0000006E   0xDB05             BLT.N    ??AppTaskMeasure_4
   \   00000070   0x4631             MOV      R1,R6
   \   00000072   0x4628             MOV      R0,R5
   \   00000074   0x.... 0x....      BL       BSP_OS_SemWait
   \   00000078   0x2801             CMP      R0,#+1
   \   0000007A   0xD103             BNE.N    ??AppTaskMeasure_5
   \                     ??AppTaskMeasure_4: (+1)
   \   0000007C   0x.... 0x....      BL       StartAirMeasure
   \   00000080   0xF04F 0x0800      MOV      R8,#+0
   \                     ??AppTaskMeasure_5: (+1)
   \   00000084   0x4668             MOV      R0,SP
   \   00000086   0x.... 0x....      BL       OSTimeGet
   \   0000008A   0x1A20             SUBS     R0,R4,R0
   \   0000008C   0x183E             ADDS     R6,R7,R0
   \   0000008E   0x2E01             CMP      R6,#+1
   \   00000090   0xDBD3             BLT.N    ??AppTaskMeasure_1
   \   00000092   0xF247 0x5031      MOVW     R0,#+30001
   \   00000096   0x4286             CMP      R6,R0
   \   00000098   0xD3D0             BCC.N    ??AppTaskMeasure_0
    200                  {
    201                      dly   =  CYCLE_TIME_TICKS_MIN;
   \   0000009A   0x4626             MOV      R6,R4
   \   0000009C   0xE7CE             B.N      ??AppTaskMeasure_0
    202                  }
    203              }
    204          }
    205          
    206          #define DCF_OPEN    0
    207          #define DCF_CLOSE   1
    208          
    209          /*******************************************************************************
    210           * 作　　者： redmorningcn.
    211           * 创建日期： 2017-11-22
    212           * 修    改：
    213           * 修改日期：
    214           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    215          void        Measure_GPIO_Init(void)
    216          {
   \                     Measure_GPIO_Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    217              //端口初始化为I/O口
    218              GPIO_PinselConfig(DCF_GPIO_AIR_IN,0);
   \   00000002   0xF240 0x142F      MOVW     R4,#+303
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x4620             MOV      R0,R4
   \   0000000A   0x.... 0x....      BL       GPIO_PinselConfig
    219              GPIO_PinselConfig(DCF_GPIO_AIR_OUT,0);
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0xF44F 0x7097      MOV      R0,#+302
   \   00000014   0x.... 0x....      BL       GPIO_PinselConfig
    220              
    221              GPIO_SetOrClearValue(DCF_GPIO_AIR_IN, DCF_CLOSE);   //关闭电磁阀
   \   00000018   0x2101             MOVS     R1,#+1
   \   0000001A   0x4620             MOV      R0,R4
   \   0000001C   0x.... 0x....      BL       GPIO_SetOrClearValue
    222              GPIO_SetOrClearValue(DCF_GPIO_AIR_OUT,DCF_CLOSE);   //关闭电磁阀
   \   00000020   0x2101             MOVS     R1,#+1
   \   00000022   0xF44F 0x7097      MOV      R0,#+302
   \   00000026   0x.... 0x....      BL       GPIO_SetOrClearValue
    223              
    224              Ctrl.Para.dat.sRunPara.SysSta.OpenAir = 0;  //气路打开标识置1
    225              Ctrl.Para.dat.sRunPara.SysSta.CloseAir= 1;         
   \   0000002A   0x....             LDR.N    R0,??DataTable5_2
   \   0000002C   0xF890 0x104C      LDRB     R1,[R0, #+76]
   \   00000030   0xF001 0x01FE      AND      R1,R1,#0xFE
   \   00000034   0xF041 0x0102      ORR      R1,R1,#0x2
   \   00000038   0xF880 0x104C      STRB     R1,[R0, #+76]
    226          }
   \   0000003C   0xBD10             POP      {R4,PC}          ;; return
    227          
    228          /*******************************************************************************
    229           * 作　　者： redmorningcn.
    230           * 创建日期： 2017-11-23
    231           * 修    改： 打开 电磁阀，先打开输出，再打开输入。然后置测量标识
    232                        关闭 电磁阀，先关输入，在关输出。然后置测试标识
    233           * 修改日期：
    234           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    235          void    CloseAir(void)
    236          {
   \                     CloseAir: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    237              OS_ERR  err;
    238          
    239              ////////关闭测试
    240              GPIO_SetOrClearValue(DCF_GPIO_AIR_IN,DCF_CLOSE);    //先关输入
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0xF240 0x102F      MOVW     R0,#+303
   \   00000008   0x.... 0x....      BL       GPIO_SetOrClearValue
    241              //OSTimeDly(1000, OS_OPT_TIME_DLY, &err);           //延时0.1s
    242              BSP_OS_TimeDly(500);
   \   0000000C   0xF44F 0x70FA      MOV      R0,#+500
   \   00000010   0x.... 0x....      BL       BSP_OS_TimeDly
    243          
    244              
    245              GPIO_SetOrClearValue(DCF_GPIO_AIR_OUT,DCF_CLOSE);   //再关输出
   \   00000014   0x2101             MOVS     R1,#+1
   \   00000016   0xF44F 0x7097      MOV      R0,#+302
   \   0000001A   0xE8BD 0x4004      POP      {R2,LR}
   \   0000001E   0x.... 0x....      B.W      GPIO_SetOrClearValue
    246          
    247          }
    248          
    249          /*******************************************************************************
    250           * 作　　者： redmorningcn.
    251           * 创建日期： 2017-11-22
    252           * 修    改： 打开 电磁阀，先打开输出，再打开输入。然后置测量标识
    253                        关闭 电磁阀，先关输入，在关输出。然后置测试标识
    254           * 修改日期：
    255           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    256          void    StartAirMeasure(void)
    257          {
   \                     StartAirMeasure: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    258              OS_ERR  err;
    259          
    260              ////////启动测试
    261              GPIO_SetOrClearValue(DCF_GPIO_AIR_OUT,DCF_OPEN);   //打开输出
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0xF44F 0x7097      MOV      R0,#+302
   \   00000008   0x.... 0x....      BL       GPIO_SetOrClearValue
    262              //OSTimeDly(1000, OS_OPT_TIME_DLY, &err);          //延时0.5s
    263              BSP_OS_TimeDly(500);
   \   0000000C   0xF44F 0x70FA      MOV      R0,#+500
   \   00000010   0x.... 0x....      BL       BSP_OS_TimeDly
    264              
    265              GPIO_SetOrClearValue(DCF_GPIO_AIR_IN,DCF_OPEN);    //打开输出
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0xF240 0x102F      MOVW     R0,#+303
   \   0000001A   0x.... 0x....      BL       GPIO_SetOrClearValue
    266              //OSTimeDly(1000, OS_OPT_TIME_DLY, &err);      //延时0.1s
    267          
    268              Ctrl.Para.dat.sRunPara.SysSta.OpenAir = 1;  //气路打开标识置1
    269              Ctrl.Para.dat.sRunPara.SysSta.CloseAir= 0; 
   \   0000001E   0x....             LDR.N    R4,??DataTable5_3
   \   00000020   0x7820             LDRB     R0,[R4, #+0]
   \   00000022   0xF000 0x00FD      AND      R0,R0,#0xFD
   \   00000026   0xF040 0x0001      ORR      R0,R0,#0x1
   \   0000002A   0x7020             STRB     R0,[R4, #+0]
    270              
    271              //OSTimeDly(12000, OS_OPT_TIME_DLY, &err);    //延时12s
    272              //BSP_OS_TimeDly(12000);
    273              if(     Ctrl.Para.dat.sRunPara.MeasureSecond >30 
    274                 ||   Ctrl.Para.dat.sRunPara.MeasureSecond < 1)
   \   0000002C   0x7920             LDRB     R0,[R4, #+4]
   \   0000002E   0x281F             CMP      R0,#+31
   \   00000030   0xDA01             BGE.N    ??StartAirMeasure_0
   \   00000032   0x2800             CMP      R0,#+0
   \   00000034   0xD101             BNE.N    ??StartAirMeasure_1
    275              {
    276                  Ctrl.Para.dat.sRunPara.MeasureSecond = 3;
   \                     ??StartAirMeasure_0: (+1)
   \   00000036   0x2003             MOVS     R0,#+3
   \   00000038   0x7120             STRB     R0,[R4, #+4]
    277              }
    278              
    279              BSP_OS_TimeDly(Ctrl.Para.dat.sRunPara.MeasureSecond*1000);
   \                     ??StartAirMeasure_1: (+1)
   \   0000003A   0x7920             LDRB     R0,[R4, #+4]
   \   0000003C   0xF44F 0x717A      MOV      R1,#+1000
   \   00000040   0x4348             MULS     R0,R1,R0
   \   00000042   0x.... 0x....      BL       BSP_OS_TimeDly
    280          
    281              Ctrl.Para.dat.sRunPara.SysSta.StartMeasure = 1;
   \   00000046   0x7820             LDRB     R0,[R4, #+0]
   \   00000048   0xF040 0x0004      ORR      R0,R0,#0x4
   \   0000004C   0x7020             STRB     R0,[R4, #+0]
    282              
    283          
    284              //初始化定时器
    285              osal_start_timerEx( OS_TASK_ID_STORE,
    286                                OS_EVT_STORE_TICKS,
    287                                1);                       //置存储定时器1，马上启动存储
   \   0000004E   0x2201             MOVS     R2,#+1
   \   00000050   0x4611             MOV      R1,R2
   \   00000052   0x2004             MOVS     R0,#+4
   \   00000054   0x.... 0x....      BL       osal_start_timerEx
    288              Ctrl.Para.dat.sRunPara.SysSta.Store   = 1;  //可以进行数据储存（测量过程的数据）
   \   00000058   0x7820             LDRB     R0,[R4, #+0]
   \   0000005A   0xF040 0x0010      ORR      R0,R0,#0x10
   \   0000005E   0x7020             STRB     R0,[R4, #+0]
    289              
    290          
    291              CloseAir();                                 //关闭气路
   \   00000060   0x.... 0x....      BL       CloseAir
    292                
    293              Ctrl.Para.dat.sRunPara.SysSta.OpenAir = 0;  //气路打开标识置1
    294              Ctrl.Para.dat.sRunPara.SysSta.CloseAir= 1;     
    295              
    296              Ctrl.Para.dat.sRunPara.SysSta.StartMeasure = 0;
   \   00000064   0x7820             LDRB     R0,[R4, #+0]
   \   00000066   0xF000 0x00FA      AND      R0,R0,#0xFA
   \   0000006A   0xF040 0x0002      ORR      R0,R0,#0x2
   \   0000006E   0x7020             STRB     R0,[R4, #+0]
    297          }
   \   00000070   0xBD10             POP      {R4,PC}          ;; return
    298          
    299          
    300          /*******************************************************************************
    301           * 名    称： APP_MeasureInit
    302           * 功    能： 任务初始化
    303           * 入口参数： 无
    304           * 出口参数： 无
    305           * 作　　者： Roger-WY.
    306           * 创建日期： 2015-03-28
    307           * 修    改：
    308           * 修改日期：
    309           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    310          static void APP_MeasureInit(void)
    311          {
    312              /***********************************************
    313              * 描述： 初始化本任务用到的相关硬件
    314              */
    315              Measure_GPIO_Init();            //初始化端口
   \                     APP_MeasureInit: (+1)
   \   00000000   0x....             B.N      Measure_GPIO_Init
    316          
    317              /***********************************************
    318              * 描述： 在看门狗标志组注册本任务的看门狗标志
    319              */
    320              //WdtFlags |= WDT_FLAG_KEY;
    321          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x........         DC32     AppTaskMeasureTCB

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x........         DC32     Bsp_MeasureSem

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x........         DC32     Ctrl

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x........         DC32     Ctrl+0x4C

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x41 0x70          DC8 "App Task Measure"
   \              0x70 0x20    
   \              0x54 0x61    
   \              0x73 0x6B    
   \              0x20 0x4D    
   \              0x65 0x61    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x42 0x73          DC8 "Bsp MeasureSem"
   \              0x70 0x20    
   \              0x4D 0x65    
   \              0x61 0x73    
   \              0x75 0x72    
   \              0x65 0x53    
   \              0x65 0x6D    
   \              0x00         
   \   0000000F   0x00               DC8 0
    322          
    323          /*******************************************************************************
    324           * 				end of file
    325           *******************************************************************************/
    326          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   APP_MeasureInit
         0   -> Measure_GPIO_Init
      32   AppTaskMeasure
        32   -> APP_MeasureInit
        32   -> BSP_OS_SemCreate
        32   -> BSP_OS_SemWait
        32   -> BSP_OS_TimeDly
        32   -> OSRegWdtFlag
        32   -> OSSetWdtFlag
        32   -> OSTimeGet
        32   -> StartAirMeasure
      48   App_TaskMeasureCreate
        48   -> OSTaskCreate
       8   CloseAir
         8   -> BSP_OS_TimeDly
         0   -> GPIO_SetOrClearValue
         8   -> GPIO_SetOrClearValue
       8   Measure_GPIO_Init
         8   -> GPIO_PinselConfig
         8   -> GPIO_SetOrClearValue
       8   StartAirMeasure
         8   -> BSP_OS_TimeDly
         8   -> CloseAir
         8   -> GPIO_SetOrClearValue
         8   -> osal_start_timerEx


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
      20  ?_0
      16  ?_1
       2  APP_MeasureInit
     158  AppTaskMeasure
     696  AppTaskMeasureTCB
          AppTaskMeasureStk
      60  App_TaskMeasureCreate
      28  Bsp_MeasureSem
      34  CloseAir
      62  Measure_GPIO_Init
     114  StartAirMeasure

 
 724 bytes in section .bss
 482 bytes in section .text
 
 482 bytes of CODE memory
 724 bytes of DATA memory

Errors: none
Warnings: 2

###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       26/Dec/2017  15:21:31
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  F:\iar\NC199B-100\Library\Source\BSP\Driver\bsp_pwm.c
#    Command line =  
#        F:\iar\NC199B-100\Library\Source\BSP\Driver\bsp_pwm.c -D
#        USE_STDPERIPH_DRIVER -D _STM32F10X_HD -D STM32F10X_CL -D DEBUG -D
#        STM32F103RC -D STM32_FLASH_SIZE=256 -D HSE_VALUE=25000000 -lCN
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\List\
#        -o
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        F:\iar\NC199B-100\Library\Project\IAR\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\User\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\AES\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Config\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\OS\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\User\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Source\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Port\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\OS\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Config\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Protocol\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Iap\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Driver\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\IAR\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\uCOS-III\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\CMSIS\CM3\CoreSupport\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\CMSIS\CM3\DeviceSupport\ST\STM32F10x\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\STM32F10x_StdPeriph_Driver\inc\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-CPU\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-CPU\ARM-Cortex-M3\IAR\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-LIB\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\OSAL\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\OSAL\OS\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\OS\uCOS-III\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\Source\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\Source\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\FatFs\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\FatFs\option\ -Om
#        --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\List\bsp_pwm.lst
#    Object file  =  
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\Obj\bsp_pwm.o
#
###############################################################################

F:\iar\NC199B-100\Library\Source\BSP\Driver\bsp_pwm.c
      1          /*******************************************************************************
      2           *   Filename:       bsp_pwm.c
      3           *   Revised:        All copyrights reserved to Wuming Shen.
      4           *   Date:           2014-07-05
      5           *   Revision:       v1.0
      6           *   Writer:	     Wuming Shen.
      7           *
      8           *   Description:
      9           *
     10           *   Notes:
     11           *					QQ:276193028
     12           *     				E-mail:shenchangwei945@163.com
     13           *
     14           *******************************************************************************/
     15          
     16          /*******************************************************************************
     17           * INCLUDES
     18           */
     19          #include <includes.h>
     20          #include <bsp_pwm.h>
     21          
     22          #define BSP_PWM_MODULE_EN 1
     23          #if BSP_PWM_MODULE_EN > 0
     24          
     25          /*******************************************************************************
     26           * 描述： 频率单位为HZ
     27           */
     28          #define FANPWM_FREQ            10000
     29          #define LEDPWM_FREQ            10000
     30          #define BEEPPWM_FREQ           2000
     31          
     32          #define FANPWM_DUTY_MAX        100
     33          #define LEDPWM_DUTY_MAX        100
     34          #define BEEPPWM_DUTY_MAX       100
     35          /*******************************************************************************
     36           * MACROS
     37           */
     38          
     39          /*******************************************************************************
     40           * TYPEDEFS
     41           */
     42          
     43          /*******************************************************************************
     44           * LOCAL VARIABLES
     45           */
     46          
     47          /*******************************************************************************
     48           * GLOBAL VARIABLES
     49           */
     50          //StrPwm   FanPwm   = {
     51          //    TIM5,
     52          //    FANPWM_FREQ,        FANPWM_FREQ,        FANPWM_FREQ,
     53          //    FANPWM_DUTY_MAX,    FANPWM_DUTY_MAX,    FANPWM_DUTY_MAX,
     54          //    FANPWM_DUTY_MAX,    FANPWM_DUTY_MAX,    FANPWM_DUTY_MAX,
     55          //    FANPWM_DUTY_MAX,    FANPWM_DUTY_MAX,    FANPWM_DUTY_MAX,
     56          //    FANPWM_DUTY_MAX,    FANPWM_DUTY_MAX,    FANPWM_DUTY_MAX,
     57          //    0,                  0,                  0,
     58          //    0,                  2,                  0
     59          //};
     60          

   \                                 In section .data, align 4
     61          StrPwm   LedPwm   = {
   \                     LedPwm:
   \   00000000   0x40012C00         DC32 40012C00H, 461C4000H, 461C4000H, 461C4000H, 42C80000H, 100, 100
   \              0x461C4000   
   \              0x461C4000   
   \              0x461C4000   
   \              0x42C80000   
   \              0x00000064   
   \              0x00000064   
   \   0000001C   0x00000064         DC32 100, 100, 42C80000H, 42C80000H, 42C80000H, 42C80000H
   \              0x00000064   
   \              0x42C80000   
   \              0x42C80000   
   \              0x42C80000   
   \              0x42C80000   
   \   00000034   0x64 0x64          DC8 100, 100, 100, 0
   \              0x64 0x00    
   \   00000038   0x00000000         DC32 0, 0, 1, 2
   \              0x00000000   
   \              0x00000001   
   \              0x00000002   
   \   00000048   0x03 0x00          DC8 3, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
     62              TIM1,
     63              LEDPWM_FREQ,        LEDPWM_FREQ,        LEDPWM_FREQ,
     64              LEDPWM_DUTY_MAX,    LEDPWM_DUTY_MAX,    LEDPWM_DUTY_MAX,
     65              LEDPWM_DUTY_MAX,    LEDPWM_DUTY_MAX,    LEDPWM_DUTY_MAX,
     66              LEDPWM_DUTY_MAX,    LEDPWM_DUTY_MAX,    LEDPWM_DUTY_MAX,
     67              LEDPWM_DUTY_MAX,    LEDPWM_DUTY_MAX,    LEDPWM_DUTY_MAX,
     68              0,                  0,                  0,
     69              1,                  2,                  3
     70          };
     71          

   \                                 In section .data, align 4
     72          StrPwm   BeepPwm   = {
   \                     BeepPwm:
   \   00000000   0x40000000         DC32 40000000H, 44FA0000H, 44FA0000H, 44FA0000H, 42C80000H, 100, 100
   \              0x44FA0000   
   \              0x44FA0000   
   \              0x44FA0000   
   \              0x42C80000   
   \              0x00000064   
   \              0x00000064   
   \   0000001C   0x00000064         DC32 100, 100, 42C80000H, 42C80000H, 42C80000H, 42C80000H
   \              0x00000064   
   \              0x42C80000   
   \              0x42C80000   
   \              0x42C80000   
   \              0x42C80000   
   \   00000034   0x64 0x64          DC8 100, 100, 100, 0
   \              0x64 0x00    
   \   00000038   0x00000000         DC32 0, 0, 1, 0
   \              0x00000000   
   \              0x00000001   
   \              0x00000000   
   \   00000048   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
     73              TIM2,
     74              BEEPPWM_FREQ,       BEEPPWM_FREQ,       BEEPPWM_FREQ,
     75              BEEPPWM_DUTY_MAX,   BEEPPWM_DUTY_MAX,   BEEPPWM_DUTY_MAX,
     76              BEEPPWM_DUTY_MAX,   BEEPPWM_DUTY_MAX,   BEEPPWM_DUTY_MAX,
     77              BEEPPWM_DUTY_MAX,   BEEPPWM_DUTY_MAX,   BEEPPWM_DUTY_MAX,
     78              BEEPPWM_DUTY_MAX,   BEEPPWM_DUTY_MAX,   BEEPPWM_DUTY_MAX,
     79              0,                  0,                  0,
     80              1,                  0,                  0
     81          };
     82          /*******************************************************************************
     83           * LOCAL FUNCTIONS
     84           */
     85          void    FanPWM_GPIO_Configuration      (void);
     86          void    FanPWM_TIM_Configuration       (void);
     87          void    BeepPWM_TIM_Configuration      (void);
     88          void    LedPWM_GPIO_Configuration      (void);
     89          void    LedPWM_TIM_Configuration       (void);
     90          void    BeepPWM_GPIO_Configuration     (void);
     91          void    BeepPWM_TIM_Configuration      (void);
     92          
     93          /*******************************************************************************
     94           * 名    称： FanPWM_Init
     95           * 功    能： 风机PWM初始化
     96           * 入口参数：
     97           * 出口参数： 无
     98           * 作　 　者： 无名沈
     99           * 创建日期： 2014-07-05
    100           * 修    改：
    101           * 修改日期：
    102           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    103          StrPwm *FanPWM_Init(void)
    104          {
   \                     FanPWM_Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    105              //memcpy(&LedPwm,&FanPwm,sizeof(StrPwm));
    106              FanPWM_GPIO_Configuration();
   \   00000002   0x.... 0x....      BL       FanPWM_GPIO_Configuration
    107              FanPWM_TIM_Configuration();
   \   00000006   0x.... 0x....      BL       FanPWM_TIM_Configuration
    108          
    109              //PWM_Start(&FanPwm);
    110          #if ( PWM_OUT_NEGTIVE == DEF_ENABLED )
    111              PWM_SetProperty(&FanPwm, PWM_CH_FAN, FANPWM_FREQ, 100.0);
    112          #else
    113              PWM_SetProperty(&FanPwm, PWM_CH_FAN, FANPWM_FREQ, 0.0);
   \   0000000A   0x.... 0x....      LDR.W    R4,??DataTable11
   \   0000000E   0x2300             MOVS     R3,#+0
   \   00000010   0x.... 0x....      LDR.W    R2,??DataTable11_1  ;; 0x461c4000
   \   00000014   0x4619             MOV      R1,R3
   \   00000016   0x4620             MOV      R0,R4
   \   00000018   0x.... 0x....      BL       PWM_SetProperty
    114          #endif
    115              return &FanPwm;
   \   0000001C   0x4620             MOV      R0,R4
   \   0000001E   0xBD10             POP      {R4,PC}          ;; return
    116          }
    117          /*******************************************************************************
    118           * 名    称： LedPWM_Init
    119           * 功    能： RGB三色LEDPWM
    120           * 入口参数：
    121           * 出口参数： 无
    122           * 作　 　者： 无名沈
    123           * 创建日期： 2014-07-05
    124           * 修    改：
    125           * 修改日期：
    126           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    127          StrPwm *LedPWM_Init(void)
    128          {
   \                     LedPWM_Init: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    129              LedPWM_GPIO_Configuration();
   \   00000002   0x.... 0x....      BL       LedPWM_GPIO_Configuration
    130              LedPWM_TIM_Configuration();
   \   00000006   0x.... 0x....      BL       LedPWM_TIM_Configuration
    131          
    132              PWM_Start(&LedPwm);
   \   0000000A   0x.... 0x....      LDR.W    R4,??DataTable11
   \   0000000E   0x4620             MOV      R0,R4
   \   00000010   0x.... 0x....      BL       PWM_Start
    133              PWM_SetProperty(&LedPwm, 0, LEDPWM_FREQ, 0);
   \   00000014   0x.... 0x....      LDR.W    R5,??DataTable11_1  ;; 0x461c4000
   \   00000018   0x2300             MOVS     R3,#+0
   \   0000001A   0x462A             MOV      R2,R5
   \   0000001C   0x4619             MOV      R1,R3
   \   0000001E   0x4620             MOV      R0,R4
   \   00000020   0x.... 0x....      BL       PWM_SetProperty
    134              PWM_SetProperty(&LedPwm, 1, LEDPWM_FREQ, 0);
   \   00000024   0x2300             MOVS     R3,#+0
   \   00000026   0x462A             MOV      R2,R5
   \   00000028   0x2101             MOVS     R1,#+1
   \   0000002A   0x4620             MOV      R0,R4
   \   0000002C   0x.... 0x....      BL       PWM_SetProperty
    135              PWM_SetProperty(&LedPwm, 2, LEDPWM_FREQ, 0);
   \   00000030   0x2300             MOVS     R3,#+0
   \   00000032   0x462A             MOV      R2,R5
   \   00000034   0x2102             MOVS     R1,#+2
   \   00000036   0x4620             MOV      R0,R4
   \   00000038   0x.... 0x....      BL       PWM_SetProperty
    136              PWM_SetProperty(&LedPwm, 3, LEDPWM_FREQ, 0);
   \   0000003C   0x2300             MOVS     R3,#+0
   \   0000003E   0x462A             MOV      R2,R5
   \   00000040   0x2103             MOVS     R1,#+3
   \   00000042   0x4620             MOV      R0,R4
   \   00000044   0x.... 0x....      BL       PWM_SetProperty
    137          
    138              return &LedPwm;
   \   00000048   0x4620             MOV      R0,R4
   \   0000004A   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    139          }
    140          
    141          /*******************************************************************************
    142           * 名    称： BeepPWM_Init
    143           * 功    能： 蜂鸣器PWM初始化
    144           * 入口参数：
    145           * 出口参数： 无
    146           * 作　 　者： 无名沈
    147           * 创建日期： 2014-07-05
    148           * 修    改：
    149           * 修改日期：
    150           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    151          StrPwm *BeepPWM_Init(void)
    152          {
   \                     BeepPWM_Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    153              BeepPWM_GPIO_Configuration();
   \   00000002   0x.... 0x....      BL       BeepPWM_GPIO_Configuration
    154              BeepPWM_TIM_Configuration();
   \   00000006   0x.... 0x....      BL       BeepPWM_TIM_Configuration
    155              PWM_Start(&BeepPwm);
   \   0000000A   0x.... 0x....      LDR.W    R4,??DataTable11_2
   \   0000000E   0x4620             MOV      R0,R4
   \   00000010   0x.... 0x....      BL       PWM_Start
    156          
    157              PWM_SetProperty(&BeepPwm, 1, BEEPPWM_FREQ, 0);
   \   00000014   0x2300             MOVS     R3,#+0
   \   00000016   0x.... 0x....      LDR.W    R2,??DataTable11_3  ;; 0x44fa0000
   \   0000001A   0x2101             MOVS     R1,#+1
   \   0000001C   0x4620             MOV      R0,R4
   \   0000001E   0x.... 0x....      BL       PWM_SetProperty
    158          
    159              return &BeepPwm;
   \   00000022   0x4620             MOV      R0,R4
   \   00000024   0xBD10             POP      {R4,PC}          ;; return
    160          }
    161          
    162          /*******************************************************************************
    163           * 名    称： FanPWM_GPIO_Configuration
    164           * 功    能： 风机引脚配置
    165           * 入口参数：
    166           * 出口参数： 无
    167           * 作　 　者： 无名沈
    168           * 创建日期： 2014-07-05
    169           * 修    改：
    170           * 修改日期：
    171           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    172          void FanPWM_GPIO_Configuration(void)
    173          {
   \                     FanPWM_GPIO_Configuration: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    174          	GPIO_InitTypeDef  GPIO_InitStructure;
    175          	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0x2004             MOVS     R0,#+4
   \   00000006   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
    176              GPIO_InitStructure.GPIO_Pin     = GPIO_Pin_8;
   \   0000000A   0xF44F 0x7080      MOV      R0,#+256
   \   0000000E   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    177              GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_50MHz;
   \   00000012   0x2003             MOVS     R0,#+3
   \   00000014   0xF88D 0x0002      STRB     R0,[SP, #+2]
    178          #if ( PWM_OUT_NEGTIVE == DEF_ENABLED )
    179              GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_AF_PP;     // 开漏输出
    180          #else
    181              GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_AF_OD;     // 开漏输出
   \   00000018   0x201C             MOVS     R0,#+28
   \   0000001A   0xF88D 0x0003      STRB     R0,[SP, #+3]
    182          #endif
    183              GPIO_Init(GPIOA, &GPIO_InitStructure);
   \   0000001E   0x4669             MOV      R1,SP
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable11_4  ;; 0x40010800
   \   00000024   0x.... 0x....      BL       GPIO_Init
    184          }
   \   00000028   0xBD01             POP      {R0,PC}          ;; return
    185          
    186          /*******************************************************************************
    187           * 名    称： LedPWM_GPIO_Configuration
    188           * 功    能： RGB三色LED引脚配置
    189           * 入口参数：
    190           * 出口参数： 无
    191           * 作　 　者： 无名沈
    192           * 创建日期： 2014-07-05
    193           * 修    改：
    194           * 修改日期：
    195           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    196          void LedPWM_GPIO_Configuration(void)
    197          {
   \                     LedPWM_GPIO_Configuration: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    198          	GPIO_InitTypeDef  GPIO_InitStructure;
    199          	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0x2004             MOVS     R0,#+4
   \   00000006   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
    200              GPIO_InitStructure.GPIO_Pin     = GPIO_Pin_9
    201                                              | GPIO_Pin_10
    202                                              | GPIO_Pin_11;
   \   0000000A   0xF44F 0x6060      MOV      R0,#+3584
   \   0000000E   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    203              GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_50MHz;
   \   00000012   0x2003             MOVS     R0,#+3
   \   00000014   0xF88D 0x0002      STRB     R0,[SP, #+2]
    204              GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_AF_PP;     // 复用推挽输出
   \   00000018   0x2018             MOVS     R0,#+24
   \   0000001A   0xF88D 0x0003      STRB     R0,[SP, #+3]
    205              GPIO_Init(GPIOA, &GPIO_InitStructure);
   \   0000001E   0x4669             MOV      R1,SP
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable11_4  ;; 0x40010800
   \   00000024   0x.... 0x....      BL       GPIO_Init
    206          }
   \   00000028   0xBD01             POP      {R0,PC}          ;; return
    207          
    208          /*******************************************************************************
    209           * 名    称： BeepPWM_GPIO_Configuration
    210           * 功    能： 蜂鸣器引脚配置
    211           * 入口参数：
    212           * 出口参数： 无
    213           * 作　 　者： 无名沈
    214           * 创建日期： 2014-07-05
    215           * 修    改：
    216           * 修改日期：
    217           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    218          void BeepPWM_GPIO_Configuration(void)
    219          {
   \                     BeepPWM_GPIO_Configuration: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    220          	GPIO_InitTypeDef  GPIO_InitStructure;
    221          	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0x2004             MOVS     R0,#+4
   \   00000006   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
    222              GPIO_InitStructure.GPIO_Pin     = GPIO_Pin_1;
   \   0000000A   0x2002             MOVS     R0,#+2
   \   0000000C   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    223              GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_50MHz;
   \   00000010   0x2003             MOVS     R0,#+3
   \   00000012   0xF88D 0x0002      STRB     R0,[SP, #+2]
    224              GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_AF_PP;     // 开漏输出
   \   00000016   0x2018             MOVS     R0,#+24
   \   00000018   0xF88D 0x0003      STRB     R0,[SP, #+3]
    225              GPIO_Init(GPIOA, &GPIO_InitStructure);
   \   0000001C   0x4669             MOV      R1,SP
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable11_4  ;; 0x40010800
   \   00000022   0x.... 0x....      BL       GPIO_Init
    226          }
   \   00000026   0xBD01             POP      {R0,PC}          ;; return
    227          
    228          /*******************************************************************************
    229           * 名    称： FanPWM_TIM_Configuration
    230           * 功    能： 风机PWM定时器配置
    231           * 入口参数：
    232           * 出口参数： 无
    233           * 作　 　者： 无名沈
    234           * 创建日期： 2014-07-05
    235           * 修    改：
    236           * 修改日期：
    237           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    238          void FanPWM_TIM_Configuration (void)
    239          {
   \                     FanPWM_TIM_Configuration: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    240              /***********************************************
    241              * 描述： 
    242              */
    243              //TIM_TimeBaseInitTypeDef   TIM_TimeBaseStructure;
    244              //TIM_OCInitTypeDef         TIM_OCInitStructure;
    245              //TIM_BDTRInitTypeDef       TIM_BDTRInitStructure;
    246          
    247              /***********************************************
    248              * 描述： 
    249              */
    250              RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0xF44F 0x6000      MOV      R0,#+2048
   \   00000008   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
    251              /***********************************************
    252              * 描述： 
    253              */
    254              FanPwm.freq[0]   = FanPwm.freq[1]   = FanPwm.freq[2]    = FanPwm.freq[3]    = FANPWM_FREQ;
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable11
   \   00000010   0x.... 0x....      LDR.W    R1,??DataTable11_1  ;; 0x461c4000
   \   00000014   0x6101             STR      R1,[R0, #+16]
   \   00000016   0x60C1             STR      R1,[R0, #+12]
   \   00000018   0x6081             STR      R1,[R0, #+8]
   \   0000001A   0x6041             STR      R1,[R0, #+4]
    255              FanPwm.period[0] = FanPwm.period[1] = FanPwm.period[2]  = FanPwm.period[3]  = 1000000 / (uint32_t)FanPwm.freq[0]-1;
   \   0000001C   0x2163             MOVS     R1,#+99
   \   0000001E   0x6201             STR      R1,[R0, #+32]
   \   00000020   0x61C1             STR      R1,[R0, #+28]
   \   00000022   0x6181             STR      R1,[R0, #+24]
   \   00000024   0x6141             STR      R1,[R0, #+20]
    256              FanPwm.TIMx      = TIM1;
   \   00000026   0x.... 0x....      LDR.W    R1,??DataTable11_5  ;; 0x40012c00
   \   0000002A   0x6001             STR      R1,[R0, #+0]
    257          
    258              /***********************************************
    259              * 描述： 第三步，定时器基本配置
    260              */
    261              //TIM_TimeBaseStructure.TIM_Prescaler         = SYS_CLK-1;                     //对定时器时钟TIMxCLK设置预分频：不预分频，即为72MHz
    262              //TIM_TimeBaseStructure.TIM_Period            = FanPwm.period[0];         //当定时器从0计数到999，即为1000次，为一个定时周期  FanPwm.period[0]
    263              //TIM_TimeBaseStructure.TIM_ClockDivision     = TIM_CKD_DIV1;             //采样分频(不分频)
    264              //TIM_TimeBaseStructure.TIM_CounterMode       = TIM_CounterMode_Up;       //向上计数
    265              //TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;                        //重复寄存器，用于自动更新FanPwm占空比
    266              //TIM_TimeBaseInit(LedPwm.TIMx, &TIM_TimeBaseStructure);
    267          
    268              /***********************************************
    269              * 描述： 第四步LedPwm输出配置
    270              */
    271              //TIM_OCInitStructure.TIM_OCMode              = TIM_OCMode_PWM2;          //设置为Pwm1输出模式(100%输出高电平)
    272              //TIM_OCInitStructure.TIM_Pulse               = LedPwm.compare[0] ;       //设置占空比时间
    273              //TIM_OCInitStructure.TIM_OCPolarity          = TIM_OCPolarity_High;      //设置跳变值，当计数器计数到这个值时，电平发生跳变 FanPwm.compare[0]
    274              //TIM_OCInitStructure.TIM_OutputState         = TIM_OutputState_Enable;   //有效电平的极性，当定时器计数值小于CCR1_Val时为高电平
    275              /***********************************************
    276              * 描述： 下面几个参数是高级定时器才会用到，通用定时器不用配置
    277              */
    278              //TIM_OCInitStructure.TIM_OCNPolarity         = TIM_OCNPolarity_High;     //设置互补端输出极性
    279              //TIM_OCInitStructure.TIM_OutputNState        = TIM_OutputNState_Disable; //使能互补端输出
    280              //TIM_OCInitStructure.TIM_OCIdleState         = TIM_OCIdleState_Reset;    //死区后输出状态
    281              //TIM_OCInitStructure.TIM_OCNIdleState        = TIM_OCNIdleState_Reset;   //死区后互补端输出状态
    282              
    283              /***********************************************
    284              * 描述： 
    285              */
    286              //TIM_OC1Init(FanPwm.TIMx,&TIM_OCInitStructure);                          //按照指定参数初始化
    287          }
   \   0000002C   0xBD01             POP      {R0,PC}          ;; return
    288          
    289          /*******************************************************************************
    290           * 名    称： LedPWM_TIM_Configuration
    291           * 功    能： RGB三色LED-PWM定时器配置
    292           * 入口参数：
    293           * 出口参数： 无
    294           * 作　 　者： 无名沈
    295           * 创建日期： 2014-07-05
    296           * 修    改：
    297           * 修改日期：
    298           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    299          void LedPWM_TIM_Configuration (void)
    300          {
   \                     LedPWM_TIM_Configuration: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB08C             SUB      SP,SP,#+48
    301              /***********************************************
    302              * 描述： 临时变量定义
    303              */
    304              //TIM_TimeBaseInitTypeDef TIM_BaseInitStructure;
    305              TIM_TimeBaseInitTypeDef   TIM_TimeBaseStructure;
    306              TIM_OCInitTypeDef         TIM_OCInitStructure;
    307              TIM_BDTRInitTypeDef       TIM_BDTRInitStructure;
    308          
    309              /***********************************************
    310              * 描述： 使能时钟
    311              */
    312              RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
   \   00000004   0x2101             MOVS     R1,#+1
   \   00000006   0xF44F 0x6000      MOV      R0,#+2048
   \   0000000A   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
    313              //TIM1 使用内部时钟
    314              //TIM_InternalClockConfig(TIM1);
    315              //TIM1基本设置
    316              //设置预分频器分频系数71，即APB2=72M, TIM1_CLK=72/72=1MHz
    317              //TIM_Period（TIM1_ARR）=1000，计数器向上计数到1000后产生更新事件，计数值归零
    318              //向上计数模式
    319              //    TIM_RepetitionCounter(TIM1_RCR)   =0，每次向上溢出都产生更新事件
    320              //    TIM_BaseInitStructure.TIM_Period  = 50000;
    321              //    TIM_BaseInitStructure.TIM_Prescaler = 71;
    322              //    TIM_BaseInitStructure.TIM_ClockDivision = 0;
    323              //    TIM_BaseInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
    324              //    TIM_BaseInitStructure.TIM_RepetitionCounter = 0;
    325              //    TIM_TimeBaseInit(TIM1, &TIM_BaseInitStructure);
    326              //    //清中断，以免一启用中断后立即产生中断
    327              //    TIM_ClearFlag(TIM1, TIM_FLAG_Update);
    328              //    //使能TIM1中断源
    329              //    TIM_ITConfig(TIM1, TIM_IT_Update, ENABLE);
    330              //    //TIM1总开关：开启
    331              //    TIM_Cmd(TIM1, ENABLE);TIMx->ARR
    332              /***********************************************
    333              * 描述： 初始化结构体
    334              */
    335              LedPwm.freq[0]   = LedPwm.freq[1]   = LedPwm.freq[2]    = LedPwm.freq[3]    = LEDPWM_FREQ;
   \   0000000E   0x.... 0x....      LDR.W    R4,??DataTable11
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable11_1  ;; 0x461c4000
   \   00000016   0x6120             STR      R0,[R4, #+16]
   \   00000018   0x60E0             STR      R0,[R4, #+12]
   \   0000001A   0x60A0             STR      R0,[R4, #+8]
   \   0000001C   0x6060             STR      R0,[R4, #+4]
    336              LedPwm.period[0] = LedPwm.period[1] = LedPwm.period[2]  = LedPwm.period[3]  = 1000000 / (uint32_t)LedPwm.freq[0]-1;
   \   0000001E   0x2063             MOVS     R0,#+99
   \   00000020   0x6220             STR      R0,[R4, #+32]
   \   00000022   0x61E0             STR      R0,[R4, #+28]
   \   00000024   0x61A0             STR      R0,[R4, #+24]
   \   00000026   0x6160             STR      R0,[R4, #+20]
    337              LedPwm.TIMx      = TIM1;
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable11_5  ;; 0x40012c00
   \   0000002C   0x6020             STR      R0,[R4, #+0]
    338          
    339              /***********************************************
    340              * 描述： 第三步，定时器基本配置
    341              */
    342              TIM_TimeBaseStructure.TIM_Prescaler         = BSP_CPU_ClkFreq_MHz-1;    //时钟预分频数
   \   0000002E   0x.... 0x....      LDR.W    R1,??DataTable11_6
   \   00000032   0x7809             LDRB     R1,[R1, #+0]
   \   00000034   0x1E49             SUBS     R1,R1,#+1
   \   00000036   0xF8AD 0x1020      STRH     R1,[SP, #+32]
    343              TIM_TimeBaseStructure.TIM_Period            = LedPwm.period[0];         //自动重装载寄存器的值
   \   0000003A   0x2163             MOVS     R1,#+99
   \   0000003C   0xF8AD 0x1024      STRH     R1,[SP, #+36]
    344              TIM_TimeBaseStructure.TIM_ClockDivision     = TIM_CKD_DIV1;             //采样分频(不分频)
   \   00000040   0x2100             MOVS     R1,#+0
   \   00000042   0xF8AD 0x1026      STRH     R1,[SP, #+38]
    345              TIM_TimeBaseStructure.TIM_CounterMode       = TIM_CounterMode_Up;       //向上计数
   \   00000046   0xF8AD 0x1022      STRH     R1,[SP, #+34]
    346              TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;                        //重复寄存器，用于自动更新FanPwm占空比
   \   0000004A   0xF88D 0x1028      STRB     R1,[SP, #+40]
    347              TIM_TimeBaseInit(LedPwm.TIMx, &TIM_TimeBaseStructure);
   \   0000004E   0xA908             ADD      R1,SP,#+32
   \   00000050   0x.... 0x....      BL       TIM_TimeBaseInit
    348          
    349              /***********************************************
    350              * 描述： 第四步FanPwm输出配置
    351              */
    352          #if ( PWM_OUT_NEGTIVE == DEF_ENABLED )
    353              TIM_OCInitStructure.TIM_OCMode              = TIM_OCMode_PWM1;          //设置为Pwm2输出模式(0%输出高电平)
    354              TIM_OCInitStructure.TIM_Pulse               = LedPwm.compare[0] ;       //设置占空比时间
    355              TIM_OCInitStructure.TIM_OCPolarity          = TIM_OCPolarity_High;      //设置输出极性
    356          #else
    357              TIM_OCInitStructure.TIM_OCMode              = TIM_OCMode_PWM2;          //设置为Pwm2输出模式(0%输出高电平)
   \   00000054   0x2070             MOVS     R0,#+112
   \   00000056   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    358              TIM_OCInitStructure.TIM_Pulse               = LedPwm.compare[0] ;       //设置占空比时间
   \   0000005A   0x6BA0             LDR      R0,[R4, #+56]
   \   0000005C   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    359              TIM_OCInitStructure.TIM_OCPolarity          = TIM_OCPolarity_High;      //设置输出极性
   \   00000060   0x2000             MOVS     R0,#+0
   \   00000062   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    360          #endif
    361              TIM_OCInitStructure.TIM_OutputState         = TIM_OutputState_Enable;   //使能该通道输出
   \   00000066   0x2001             MOVS     R0,#+1
   \   00000068   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    362          
    363              /***********************************************
    364              * 描述： 下面几个参数是高级定时器才会用到，通用定时器不用配置
    365              */
    366              TIM_OCInitStructure.TIM_OCNPolarity         = TIM_OCNPolarity_High;     //设置互补端输出极性
   \   0000006C   0x2000             MOVS     R0,#+0
   \   0000006E   0xF8AD 0x000A      STRH     R0,[SP, #+10]
    367              TIM_OCInitStructure.TIM_OutputNState        = TIM_OutputNState_Disable; //使能互补端输出
   \   00000072   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    368              TIM_OCInitStructure.TIM_OCIdleState         = TIM_OCIdleState_Reset;    //死区后输出状态
   \   00000076   0x9003             STR      R0,[SP, #+12]
    369              TIM_OCInitStructure.TIM_OCNIdleState        = TIM_OCNIdleState_Reset;   //死区后互补端输出状态
    370          
    371              /***********************************************
    372              * 描述： 初始化比通道1输出
    373              */
    374              TIM_OC1Init(LedPwm.TIMx,&TIM_OCInitStructure);                          //按照指定参数初始化
   \   00000078   0x4669             MOV      R1,SP
   \   0000007A   0x6820             LDR      R0,[R4, #+0]
   \   0000007C   0x.... 0x....      BL       TIM_OC1Init
    375             
    376              /***********************************************
    377              * 描述： 第四步LedPwm输出配置
    378              */
    379              TIM_OCInitStructure.TIM_OCMode              = TIM_OCMode_PWM1;          //设置为Pwm1输出模式(100%输出高电平)
   \   00000080   0x2060             MOVS     R0,#+96
   \   00000082   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    380              TIM_OCInitStructure.TIM_Pulse               = LedPwm.compare[0] ;       //设置占空比时间
   \   00000086   0x6BA0             LDR      R0,[R4, #+56]
   \   00000088   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    381              TIM_OCInitStructure.TIM_OCPolarity          = TIM_OCPolarity_High;      //设置输出极性
   \   0000008C   0x2000             MOVS     R0,#+0
   \   0000008E   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    382              TIM_OCInitStructure.TIM_OutputState         = TIM_OutputState_Enable;   //使能该通道输出
   \   00000092   0x2001             MOVS     R0,#+1
   \   00000094   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    383          
    384              /***********************************************
    385              * 描述： 下面几个参数是高级定时器才会用到，通用定时器不用配置
    386              */
    387              TIM_OCInitStructure.TIM_OCNPolarity         = TIM_OCNPolarity_High;     //设置互补端输出极性
   \   00000098   0x2000             MOVS     R0,#+0
   \   0000009A   0xF8AD 0x000A      STRH     R0,[SP, #+10]
    388              TIM_OCInitStructure.TIM_OutputNState        = TIM_OutputNState_Disable; //使能互补端输出
   \   0000009E   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    389              TIM_OCInitStructure.TIM_OCIdleState         = TIM_OCIdleState_Reset;    //死区后输出状态
   \   000000A2   0x9003             STR      R0,[SP, #+12]
    390              TIM_OCInitStructure.TIM_OCNIdleState        = TIM_OCNIdleState_Reset;   //死区后互补端输出状态
    391          
    392              /***********************************************
    393              * 描述： 初始化通道2，3，4比较输出
    394              */
    395              TIM_OC2Init(LedPwm.TIMx,&TIM_OCInitStructure);
   \   000000A4   0x4669             MOV      R1,SP
   \   000000A6   0x6820             LDR      R0,[R4, #+0]
   \   000000A8   0x.... 0x....      BL       TIM_OC2Init
    396              TIM_OC3Init(LedPwm.TIMx,&TIM_OCInitStructure);
   \   000000AC   0x4669             MOV      R1,SP
   \   000000AE   0x6820             LDR      R0,[R4, #+0]
   \   000000B0   0x.... 0x....      BL       TIM_OC3Init
    397              TIM_OC4Init(LedPwm.TIMx,&TIM_OCInitStructure);
   \   000000B4   0x4669             MOV      R1,SP
   \   000000B6   0x6820             LDR      R0,[R4, #+0]
   \   000000B8   0x.... 0x....      BL       TIM_OC4Init
    398          
    399              /***********************************************
    400              * 描述： 第五步，死区和刹车功能配置，高级定时器才有的，通用定时器不用配置
    401              */
    402              TIM_BDTRInitStructure.TIM_OSSRState         = TIM_OSSRState_Disable;    //运行模式下输出选择
   \   000000BC   0x2000             MOVS     R0,#+0
   \   000000BE   0x9004             STR      R0,[SP, #+16]
    403              TIM_BDTRInitStructure.TIM_OSSIState         = TIM_OSSIState_Disable;    //空闲模式下输出选择
    404              TIM_BDTRInitStructure.TIM_LOCKLevel         = TIM_LOCKLevel_OFF;        //锁定设置
   \   000000C0   0xF8AD 0x0014      STRH     R0,[SP, #+20]
    405              TIM_BDTRInitStructure.TIM_DeadTime          = 0x90;                     //死区时间设置
   \   000000C4   0x2090             MOVS     R0,#+144
   \   000000C6   0xF8AD 0x0016      STRH     R0,[SP, #+22]
    406              TIM_BDTRInitStructure.TIM_Break             = TIM_Break_Disable;        //刹车功能使能
   \   000000CA   0x2000             MOVS     R0,#+0
   \   000000CC   0xF8AD 0x0018      STRH     R0,[SP, #+24]
    407              TIM_BDTRInitStructure.TIM_BreakPolarity     = TIM_BreakPolarity_High;   //刹车输入极性
   \   000000D0   0xF44F 0x5000      MOV      R0,#+8192
   \   000000D4   0xF8AD 0x001A      STRH     R0,[SP, #+26]
    408              TIM_BDTRInitStructure.TIM_AutomaticOutput   = TIM_AutomaticOutput_Enable;//自动输出使能
   \   000000D8   0xF44F 0x4080      MOV      R0,#+16384
   \   000000DC   0xF8AD 0x001C      STRH     R0,[SP, #+28]
    409              TIM_BDTRConfig(LedPwm.TIMx,&TIM_BDTRInitStructure);
   \   000000E0   0xA904             ADD      R1,SP,#+16
   \   000000E2   0x6820             LDR      R0,[R4, #+0]
   \   000000E4   0x.... 0x....      BL       TIM_BDTRConfig
    410          
    411              /***********************************************
    412              * 描述： 第六步，使能端的打开
    413              */
    414              TIM_OC1PreloadConfig(LedPwm.TIMx, TIM_OCPreload_Enable);                //使能TIMx在CCR1上的预装载寄存器
   \   000000E8   0x2108             MOVS     R1,#+8
   \   000000EA   0x6820             LDR      R0,[R4, #+0]
   \   000000EC   0x.... 0x....      BL       TIM_OC1PreloadConfig
    415              TIM_OC2PreloadConfig(LedPwm.TIMx, TIM_OCPreload_Enable);
   \   000000F0   0x2108             MOVS     R1,#+8
   \   000000F2   0x6820             LDR      R0,[R4, #+0]
   \   000000F4   0x.... 0x....      BL       TIM_OC2PreloadConfig
    416              TIM_OC3PreloadConfig(LedPwm.TIMx, TIM_OCPreload_Enable);
   \   000000F8   0x2108             MOVS     R1,#+8
   \   000000FA   0x6820             LDR      R0,[R4, #+0]
   \   000000FC   0x.... 0x....      BL       TIM_OC3PreloadConfig
    417              TIM_OC4PreloadConfig(LedPwm.TIMx, TIM_OCPreload_Enable);
   \   00000100   0x2108             MOVS     R1,#+8
   \   00000102   0x6820             LDR      R0,[R4, #+0]
   \   00000104   0x.... 0x....      BL       TIM_OC4PreloadConfig
    418              TIM_ARRPreloadConfig(LedPwm.TIMx, ENABLE);                              //使能TIMx在ARR上的预装载寄存器
   \   00000108   0x2101             MOVS     R1,#+1
   \   0000010A   0x6820             LDR      R0,[R4, #+0]
   \   0000010C   0x.... 0x....      BL       TIM_ARRPreloadConfig
    419              TIM_Cmd(LedPwm.TIMx,ENABLE);                                            //打开TIM1
   \   00000110   0x2101             MOVS     R1,#+1
   \   00000112   0x6820             LDR      R0,[R4, #+0]
   \   00000114   0x.... 0x....      BL       TIM_Cmd
    420              
    421              /***********************************************
    422              * 描述： 下面这句是高级定时器才有的，输出FanPwm必须打开
    423              */
    424              TIM_CtrlPWMOutputs(LedPwm.TIMx, ENABLE);                                //LedPwm输出使能，一定要记得打开
   \   00000118   0x2101             MOVS     R1,#+1
   \   0000011A   0x6820             LDR      R0,[R4, #+0]
   \   0000011C   0x.... 0x....      BL       TIM_CtrlPWMOutputs
    425          }
   \   00000120   0xB00C             ADD      SP,SP,#+48
   \   00000122   0xBD10             POP      {R4,PC}          ;; return
    426          
    427          /*******************************************************************************
    428           * 名    称： FanPWM_TIM_Configuration
    429           * 功    能： 风机PWM定时器配置
    430           * 入口参数：
    431           * 出口参数： 无
    432           * 作　 　者： 无名沈
    433           * 创建日期： 2014-07-05
    434           * 修    改：
    435           * 修改日期：
    436           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    437          void BeepPWM_TIM_Configuration (void)
    438          {
   \                     BeepPWM_TIM_Configuration: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB088             SUB      SP,SP,#+32
    439              /***********************************************
    440              * 描述： 
    441              */
    442              //TIM_TimeBaseInitTypeDef TIM_BaseInitStructure;
    443              TIM_TimeBaseInitTypeDef   TIM_TimeBaseStructure;
    444              TIM_OCInitTypeDef         TIM_OCInitStructure;
    445              //TIM_BDTRInitTypeDef       TIM_BDTRInitStructure;
    446          
    447              /***********************************************
    448              * 描述： 
    449              */
    450              RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
   \   00000004   0x2101             MOVS     R1,#+1
   \   00000006   0x4608             MOV      R0,R1
   \   00000008   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
    451          
    452              /***********************************************
    453              * 描述： 
    454              */
    455              BeepPwm.freq[0]   = BeepPwm.freq[1]   = BeepPwm.freq[2]   = BeepPwm.freq[3]   = BEEPPWM_FREQ;
   \   0000000C   0x....             LDR.N    R4,??DataTable11_2
   \   0000000E   0x....             LDR.N    R0,??DataTable11_3  ;; 0x44fa0000
   \   00000010   0x6120             STR      R0,[R4, #+16]
   \   00000012   0x60E0             STR      R0,[R4, #+12]
   \   00000014   0x60A0             STR      R0,[R4, #+8]
   \   00000016   0x6060             STR      R0,[R4, #+4]
    456              BeepPwm.period[0] = BeepPwm.period[1] = BeepPwm.period[2] = BeepPwm.period[3] = 1000000 / (uint32_t)BeepPwm.freq[0] - 1;
   \   00000018   0xF240 0x10F3      MOVW     R0,#+499
   \   0000001C   0x6220             STR      R0,[R4, #+32]
   \   0000001E   0x61E0             STR      R0,[R4, #+28]
   \   00000020   0x61A0             STR      R0,[R4, #+24]
   \   00000022   0x6160             STR      R0,[R4, #+20]
    457              BeepPwm.TIMx      = TIM2;
   \   00000024   0xF04F 0x4180      MOV      R1,#+1073741824
   \   00000028   0x6021             STR      R1,[R4, #+0]
    458          
    459              /***********************************************
    460              * 描述： 
    461              */
    462              TIM_TimeBaseStructure.TIM_Prescaler = BSP_CPU_ClkFreq_MHz-1;    //对定时器时钟TIMxCLK设置预分频：不预分频，即为72MHz
   \   0000002A   0x....             LDR.N    R1,??DataTable11_6
   \   0000002C   0x7809             LDRB     R1,[R1, #+0]
   \   0000002E   0x1E49             SUBS     R1,R1,#+1
   \   00000030   0xF8AD 0x1000      STRH     R1,[SP, #+0]
    463              TIM_TimeBaseStructure.TIM_Period = BeepPwm.period[0];           //当定时器从0计数到999，即为1000次，为一个定时周期  FanPwm.period[0]
   \   00000034   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    464              TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1 ;        //设置时钟分频系数：不分频
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    465              TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;     //向上计数模式
   \   0000003E   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    466              TIM_TimeBaseInit(BeepPwm.TIMx, &TIM_TimeBaseStructure);         //时基初始化
   \   00000042   0x4669             MOV      R1,SP
   \   00000044   0xF04F 0x4080      MOV      R0,#+1073741824
   \   00000048   0x.... 0x....      BL       TIM_TimeBaseInit
    467          
    468              /***********************************************
    469              * 描述： 
    470              */
    471              TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;	            //配置为PWM模式1
   \   0000004C   0x2060             MOVS     R0,#+96
   \   0000004E   0xF8AD 0x000C      STRH     R0,[SP, #+12]
    472              TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;	//配置输出状态为使能输出
   \   00000052   0x2001             MOVS     R0,#+1
   \   00000054   0xF8AD 0x000E      STRH     R0,[SP, #+14]
    473              TIM_OCInitStructure.TIM_Pulse = BeepPwm.compare[0];	            //设置跳变值，当计数器计数到这个值时，电平发生跳变 FanPwm.compare[0]
   \   00000058   0x6BA0             LDR      R0,[R4, #+56]
   \   0000005A   0xF8AD 0x0012      STRH     R0,[SP, #+18]
    474              TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;       //有效电平的极性，当定时器计数值小于CCR1_Val时为高电平
   \   0000005E   0x2000             MOVS     R0,#+0
   \   00000060   0xF8AD 0x0014      STRH     R0,[SP, #+20]
    475          
    476              /***********************************************
    477              * 描述： 
    478              */
    479              TIM_OC2Init(BeepPwm.TIMx, &TIM_OCInitStructure);	            //使能定时器的通道2
   \   00000064   0xA903             ADD      R1,SP,#+12
   \   00000066   0x6820             LDR      R0,[R4, #+0]
   \   00000068   0x.... 0x....      BL       TIM_OC2Init
    480              TIM_OC2PreloadConfig(BeepPwm.TIMx, TIM_OCPreload_Enable);       //配置各通道的比较寄存器TIM_CCR预装载使能
   \   0000006C   0x2108             MOVS     R1,#+8
   \   0000006E   0x6820             LDR      R0,[R4, #+0]
   \   00000070   0x.... 0x....      BL       TIM_OC2PreloadConfig
    481          
    482              TIM_ARRPreloadConfig(BeepPwm.TIMx, ENABLE);			            // 使能TIM5重载寄存器ARR
   \   00000074   0x2101             MOVS     R1,#+1
   \   00000076   0x6820             LDR      R0,[R4, #+0]
   \   00000078   0x.... 0x....      BL       TIM_ARRPreloadConfig
    483          
    484              /***********************************************
    485              * 描述： 
    486              */
    487              TIM_Cmd(BeepPwm.TIMx, ENABLE);                                  //使能定时器5
   \   0000007C   0x2101             MOVS     R1,#+1
   \   0000007E   0x6820             LDR      R0,[R4, #+0]
   \   00000080   0x.... 0x....      BL       TIM_Cmd
    488          }
   \   00000084   0xB008             ADD      SP,SP,#+32
   \   00000086   0xBD10             POP      {R4,PC}          ;; return
    489          
    490          /*******************************************************************************
    491           * 名    称： FanPWM_SetFreq
    492           * 功    能： 设置风机PWM输出频率
    493           * 入口参数： 频率
    494           * 出口参数： 无
    495           * 作　 　者： 无名沈
    496           * 创建日期： 2014-07-05
    497           * 修    改：
    498           * 修改日期：
    499           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    500          void PWM_SetFreq(StrPwm *pwm, uint8_t ch, float freq)
    501          {
   \                     PWM_SetFreq: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0x4610             MOV      R0,R2
    502              if ( ch > 3 )
   \   00000008   0x462A             MOV      R2,R5
   \   0000000A   0x2A04             CMP      R2,#+4
   \   0000000C   0xDA21             BGE.N    ??PWM_SetFreq_0
    503                  return;
    504          
    505              if ( freq > 10000.0 )
   \   0000000E   0x....             LDR.N    R1,??DataTable11_7  ;; 0x461c4001
   \   00000010   0x.... 0x....      BL       __aeabi_cfrcmple
   \   00000014   0xD801             BHI.N    ??PWM_SetFreq_1
    506                freq = 10000.0;
   \   00000016   0x....             LDR.N    R0,??DataTable11_1  ;; 0x461c4000
   \   00000018   0xE005             B.N      ??PWM_SetFreq_2
    507              else if ( freq < 1.0 )
   \                     ??PWM_SetFreq_1: (+1)
   \   0000001A   0xF04F 0x517E      MOV      R1,#+1065353216
   \   0000001E   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000022   0xD200             BCS.N    ??PWM_SetFreq_2
    508                freq  = 1.0;
   \   00000024   0x4608             MOV      R0,R1
    509          
    510              pwm->freq[ch]    = freq;
   \                     ??PWM_SetFreq_2: (+1)
   \   00000026   0xEB04 0x0682      ADD      R6,R4,R2, LSL #+2
   \   0000002A   0x6070             STR      R0,[R6, #+4]
    511              pwm->period[ch]  = 1000000 / (uint32_t)pwm->freq[ch] - 1;
   \   0000002C   0x.... 0x....      BL       __aeabi_f2uiz
   \   00000030   0x....             LDR.N    R1,??DataTable11_8  ;; 0xf4240
   \   00000032   0xFBB1 0xF0F0      UDIV     R0,R1,R0
   \   00000036   0x1E40             SUBS     R0,R0,#+1
   \   00000038   0x6170             STR      R0,[R6, #+20]
    512          
    513              PWM_SetDuty(pwm, ch,pwm->duty[ch]);
   \   0000003A   0x6A72             LDR      R2,[R6, #+36]
   \   0000003C   0x4629             MOV      R1,R5
   \   0000003E   0x4620             MOV      R0,R4
   \   00000040   0x.... 0x....      BL       PWM_SetDuty
    514              TIM_SetAutoreload(pwm->TIMx, pwm->period[ch]);
   \   00000044   0x6971             LDR      R1,[R6, #+20]
   \   00000046   0xB289             UXTH     R1,R1
   \   00000048   0x6820             LDR      R0,[R4, #+0]
   \   0000004A   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   0000004E   0x.... 0x....      B.W      TIM_SetAutoreload
   \                     ??PWM_SetFreq_0: (+1)
   \   00000052   0xBD70             POP      {R4-R6,PC}       ;; return
    515          }
    516          
    517          /*******************************************************************************
    518           * 名    称： FanPWM_SetDuty
    519           * 功    能： 设置风机PWM输出占空比
    520           * 入口参数：
    521           * 出口参数： 无
    522           * 作　 　者： 无名沈
    523           * 创建日期： 2014-07-05
    524           * 修    改：
    525           * 修改日期：
    526           *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    527          void PWM_SetDuty(StrPwm *pwm, uint8_t ch, float duty)
    528          {
   \                     PWM_SetDuty: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0x4610             MOV      R0,R2
    529              if ( ch > 3 )
   \   00000008   0x462A             MOV      R2,R5
   \   0000000A   0x2A04             CMP      R2,#+4
   \   0000000C   0xDA3E             BGE.N    ??PWM_SetDuty_1
    530                  return;
    531          
    532              if ( duty > 100.0 )
   \   0000000E   0x....             LDR.N    R1,??DataTable11_9  ;; 0x42c80001
   \   00000010   0x.... 0x....      BL       __aeabi_cfrcmple
   \   00000014   0xD801             BHI.N    ??PWM_SetDuty_2
    533                duty  = 100.0;
   \   00000016   0x....             LDR.N    R0,??DataTable11_10  ;; 0x42c80000
   \   00000018   0xE004             B.N      ??PWM_SetDuty_3
    534              else if ( duty < 0.0 )
   \                     ??PWM_SetDuty_2: (+1)
   \   0000001A   0x2100             MOVS     R1,#+0
   \   0000001C   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000020   0xD200             BCS.N    ??PWM_SetDuty_3
    535                duty  = 0.0;
   \   00000022   0x4608             MOV      R0,R1
    536          
    537              pwm->duty[ch]    = duty;
   \                     ??PWM_SetDuty_3: (+1)
   \   00000024   0xEB04 0x0682      ADD      R6,R4,R2, LSL #+2
   \   00000028   0x6270             STR      R0,[R6, #+36]
    538              pwm->compare[ch] = (uint32_t)( pwm->duty[ch] * pwm->period[ch] / 100.0 );
   \   0000002A   0x6970             LDR      R0,[R6, #+20]
   \   0000002C   0x.... 0x....      BL       __aeabi_ui2f
   \   00000030   0x6A71             LDR      R1,[R6, #+36]
   \   00000032   0x.... 0x....      BL       __aeabi_fmul
   \   00000036   0x.... 0x....      BL       __aeabi_f2d
   \   0000003A   0x2200             MOVS     R2,#+0
   \   0000003C   0x....             LDR.N    R3,??DataTable11_11  ;; 0x40590000
   \   0000003E   0x.... 0x....      BL       __aeabi_ddiv
   \   00000042   0x.... 0x....      BL       __aeabi_d2uiz
   \   00000046   0x63B0             STR      R0,[R6, #+56]
    539          
    540              switch(ch) {
   \   00000048   0x2D03             CMP      R5,#+3
   \   0000004A   0xD81F             BHI.N    ??PWM_SetDuty_1
   \   0000004C   0xE8DF 0xF005      TBB      [PC, R5]
   \                     ??PWM_SetDuty_0:
   \   00000050   0x02 0x09          DC8      0x2,0x9,0x10,0x17
   \              0x10 0x17    
    541              case 0:
    542                  TIM_SetCompare1(pwm->TIMx, pwm->compare[ch]);
   \                     ??PWM_SetDuty_4: (+1)
   \   00000054   0x6BA1             LDR      R1,[R4, #+56]
   \   00000056   0xB289             UXTH     R1,R1
   \   00000058   0x6820             LDR      R0,[R4, #+0]
   \   0000005A   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   0000005E   0x.... 0x....      B.W      TIM_SetCompare1
    543                  break;
    544              case 1:
    545                  TIM_SetCompare2(pwm->TIMx, pwm->compare[ch]);
   \                     ??PWM_SetDuty_5: (+1)
   \   00000062   0x6BE1             LDR      R1,[R4, #+60]
   \   00000064   0xB289             UXTH     R1,R1
   \   00000066   0x6820             LDR      R0,[R4, #+0]
   \   00000068   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   0000006C   0x.... 0x....      B.W      TIM_SetCompare2
    546                  break;
    547              case 2:
    548                  TIM_SetCompare3(pwm->TIMx, pwm->compare[ch]);
   \                     ??PWM_SetDuty_6: (+1)
   \   00000070   0x6C21             LDR      R1,[R4, #+64]
   \   00000072   0xB289             UXTH     R1,R1
   \   00000074   0x6820             LDR      R0,[R4, #+0]
   \   00000076   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   0000007A   0x.... 0x....      B.W      TIM_SetCompare3
    549                  break;
    550              case 3:
    551                  TIM_SetCompare4(pwm->TIMx, pwm->compare[ch]);
   \                     ??PWM_SetDuty_7: (+1)
   \   0000007E   0x6C61             LDR      R1,[R4, #+68]
   \   00000080   0xB289             UXTH     R1,R1
   \   00000082   0x6820             LDR      R0,[R4, #+0]
   \   00000084   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   00000088   0x.... 0x....      B.W      TIM_SetCompare4
    552                  break;
    553              default:break;
    554              }
    555          }
   \                     ??PWM_SetDuty_1: (+1)
   \   0000008C   0xBD70             POP      {R4-R6,PC}       ;; return
    556          
    557          /*******************************************************************************
    558           * 名    称： FanPWM_SetProperty
    559           * 功    能： 启动风机PWM输出
    560           * 入口参数：
    561           * 出口参数： 无
    562           * 作　 　者： 无名沈
    563           * 创建日期： 2014-07-05
    564           * 修    改：
    565           * 修改日期：
    566           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    567          void PWM_SetProperty(StrPwm *pwm, uint8_t ch, float freq, float duty)
    568          {
   \                     PWM_SetProperty: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0x461E             MOV      R6,R3
    569            PWM_SetFreq(pwm, ch, freq);
   \   00000008   0x.... 0x....      BL       PWM_SetFreq
    570            PWM_SetDuty(pwm, ch, duty);
   \   0000000C   0x4632             MOV      R2,R6
   \   0000000E   0x4629             MOV      R1,R5
   \   00000010   0x4620             MOV      R0,R4
   \   00000012   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   00000016   0x....             B.N      PWM_SetDuty
    571          }
    572          
    573          /*******************************************************************************
    574           * 名    称： FanPWM_Start
    575           * 功    能： 启动风机PWM输出
    576           * 入口参数：
    577           * 出口参数： 无
    578           * 作　 　者： 无名沈
    579           * 创建日期： 2014-07-05
    580           * 修    改：
    581           * 修改日期：
    582           *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    583          void PWM_Start(StrPwm *pwm)
    584          {
   \                     PWM_Start: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    585              //第六步，使能端的打开
    586              for ( int i = 0; i < PWM_CH_NBR; i++ ) {
   \   00000004   0x2500             MOVS     R5,#+0
   \   00000006   0xE004             B.N      ??PWM_Start_1
    587                  switch (pwm->chEn[i]) {
    588                  case 1:
    589                      TIM_OC1PreloadConfig(pwm->TIMx, TIM_OCPreload_Enable);   //使能TIMx在CCR1上的预装载寄存器
    590                      break;
    591                  case 2:
    592                      TIM_OC2PreloadConfig(pwm->TIMx, TIM_OCPreload_Enable);   //使能TIMx在CCR2上的预装载寄存器
    593                      break;
    594                  case 3:
    595                      TIM_OC3PreloadConfig(pwm->TIMx, TIM_OCPreload_Enable);   //使能TIMx在CCR3上的预装载寄存器
    596                      break;
    597                  case 4:
    598                      TIM_OC4PreloadConfig(pwm->TIMx, TIM_OCPreload_Enable);   //使能TIMx在CCR4上的预装载寄存器
   \                     ??PWM_Start_2: (+1)
   \   00000008   0x2108             MOVS     R1,#+8
   \   0000000A   0x6820             LDR      R0,[R4, #+0]
   \   0000000C   0x.... 0x....      BL       TIM_OC4PreloadConfig
    599                      break;
   \                     ??PWM_Start_3: (+1)
   \   00000010   0x1C6D             ADDS     R5,R5,#+1
   \                     ??PWM_Start_1: (+1)
   \   00000012   0x2D04             CMP      R5,#+4
   \   00000014   0xDA1A             BGE.N    ??PWM_Start_4
   \   00000016   0x1928             ADDS     R0,R5,R4
   \   00000018   0xF890 0x004C      LDRB     R0,[R0, #+76]
   \   0000001C   0x1E40             SUBS     R0,R0,#+1
   \   0000001E   0x2803             CMP      R0,#+3
   \   00000020   0xD8F6             BHI.N    ??PWM_Start_3
   \   00000022   0xE8DF 0xF000      TBB      [PC, R0]
   \                     ??PWM_Start_0:
   \   00000026   0x04 0x09          DC8      0x4,0x9,0xE,0x3
   \              0x0E 0x03    
   \                     ??PWM_Start_5: (+1)
   \   0000002A   0xE7F1             B.N      ??PWM_Start_3
   \                     ??PWM_Start_6: (+1)
   \   0000002C   0xE7EC             B.N      ??PWM_Start_2
   \                     ??PWM_Start_7: (+1)
   \   0000002E   0x2108             MOVS     R1,#+8
   \   00000030   0x6820             LDR      R0,[R4, #+0]
   \   00000032   0x.... 0x....      BL       TIM_OC1PreloadConfig
   \   00000036   0xE7EB             B.N      ??PWM_Start_3
   \                     ??PWM_Start_8: (+1)
   \   00000038   0x2108             MOVS     R1,#+8
   \   0000003A   0x6820             LDR      R0,[R4, #+0]
   \   0000003C   0x.... 0x....      BL       TIM_OC2PreloadConfig
   \   00000040   0xE7E6             B.N      ??PWM_Start_3
   \                     ??PWM_Start_9: (+1)
   \   00000042   0x2108             MOVS     R1,#+8
   \   00000044   0x6820             LDR      R0,[R4, #+0]
   \   00000046   0x.... 0x....      BL       TIM_OC3PreloadConfig
   \   0000004A   0xE7E1             B.N      ??PWM_Start_3
    600                  default:
    601                      break;
    602                  }
    603              }
    604              TIM_ARRPreloadConfig(pwm->TIMx, ENABLE);                 //使能TIMx在ARR上的预装载寄存器
   \                     ??PWM_Start_4: (+1)
   \   0000004C   0x2101             MOVS     R1,#+1
   \   0000004E   0x6820             LDR      R0,[R4, #+0]
   \   00000050   0x.... 0x....      BL       TIM_ARRPreloadConfig
    605              TIM_Cmd(pwm->TIMx,ENABLE);                               //打开TIM2
   \   00000054   0x2101             MOVS     R1,#+1
   \   00000056   0x6820             LDR      R0,[R4, #+0]
   \   00000058   0xE8BD 0x4034      POP      {R2,R4,R5,LR}
   \   0000005C   0x.... 0x....      B.W      TIM_Cmd
    606          }
    607          
    608          /*******************************************************************************
    609           * 名    称： FanPWM_Stop
    610           * 功    能： 停止风机PWM输出
    611           * 入口参数：
    612           * 出口参数： 无
    613           * 作　 　者： 无名沈
    614           * 创建日期： 2014-07-05
    615           * 修    改：
    616           * 修改日期：
    617           *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    618          void PWM_Stop(StrPwm *pwm)
    619          {
   \                     PWM_Stop: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    620              //第六步，使能端的关闭
    621              for ( int i = 0; i < PWM_CH_NBR; i++ ) {
   \   00000004   0x2500             MOVS     R5,#+0
   \   00000006   0xE004             B.N      ??PWM_Stop_1
    622                  switch (pwm->chEn[i]) {
    623                  case 0:
    624                      TIM_OC1PreloadConfig(pwm->TIMx, TIM_OCPreload_Disable);   //使能TIMx在CCR1上的预装载寄存器
    625                      break;
    626                  case 1:
    627                      TIM_OC2PreloadConfig(pwm->TIMx, TIM_OCPreload_Disable);   //使能TIMx在CCR2上的预装载寄存器
    628                      break;
    629                  case 2:
    630                      TIM_OC3PreloadConfig(pwm->TIMx, TIM_OCPreload_Enable);   //使能TIMx在CCR3上的预装载寄存器
    631                      break;
    632                  case 3:
    633                      TIM_OC4PreloadConfig(pwm->TIMx, TIM_OCPreload_Disable);   //使能TIMx在CCR4上的预装载寄存器
   \                     ??PWM_Stop_2: (+1)
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x6820             LDR      R0,[R4, #+0]
   \   0000000C   0x.... 0x....      BL       TIM_OC4PreloadConfig
    634                      break;
   \                     ??PWM_Stop_3: (+1)
   \   00000010   0x1C6D             ADDS     R5,R5,#+1
   \                     ??PWM_Stop_1: (+1)
   \   00000012   0x2D04             CMP      R5,#+4
   \   00000014   0xDA19             BGE.N    ??PWM_Stop_4
   \   00000016   0x1928             ADDS     R0,R5,R4
   \   00000018   0xF890 0x004C      LDRB     R0,[R0, #+76]
   \   0000001C   0x2803             CMP      R0,#+3
   \   0000001E   0xD8F7             BHI.N    ??PWM_Stop_3
   \   00000020   0xE8DF 0xF000      TBB      [PC, R0]
   \                     ??PWM_Stop_0:
   \   00000024   0x04 0x09          DC8      0x4,0x9,0xE,0x3
   \              0x0E 0x03    
   \                     ??PWM_Stop_5: (+1)
   \   00000028   0xE7F2             B.N      ??PWM_Stop_3
   \                     ??PWM_Stop_6: (+1)
   \   0000002A   0xE7ED             B.N      ??PWM_Stop_2
   \                     ??PWM_Stop_7: (+1)
   \   0000002C   0x2100             MOVS     R1,#+0
   \   0000002E   0x6820             LDR      R0,[R4, #+0]
   \   00000030   0x.... 0x....      BL       TIM_OC1PreloadConfig
   \   00000034   0xE7EC             B.N      ??PWM_Stop_3
   \                     ??PWM_Stop_8: (+1)
   \   00000036   0x2100             MOVS     R1,#+0
   \   00000038   0x6820             LDR      R0,[R4, #+0]
   \   0000003A   0x.... 0x....      BL       TIM_OC2PreloadConfig
   \   0000003E   0xE7E7             B.N      ??PWM_Stop_3
   \                     ??PWM_Stop_9: (+1)
   \   00000040   0x2108             MOVS     R1,#+8
   \   00000042   0x6820             LDR      R0,[R4, #+0]
   \   00000044   0x.... 0x....      BL       TIM_OC3PreloadConfig
   \   00000048   0xE7E2             B.N      ??PWM_Stop_3
    635                  default:
    636                      break;
    637                  }
    638              }
    639              TIM_ARRPreloadConfig(pwm->TIMx, DISABLE);                     //使能TIMx在ARR上的预装载寄存器
   \                     ??PWM_Stop_4: (+1)
   \   0000004A   0x2100             MOVS     R1,#+0
   \   0000004C   0x6820             LDR      R0,[R4, #+0]
   \   0000004E   0x.... 0x....      BL       TIM_ARRPreloadConfig
    640              TIM_CtrlPWMOutputs(pwm->TIMx, DISABLE);                         //高级定时器Pwm输出使能，一定要记得打开
   \   00000052   0x2100             MOVS     R1,#+0
   \   00000054   0x6820             LDR      R0,[R4, #+0]
   \   00000056   0xE8BD 0x4034      POP      {R2,R4,R5,LR}
   \   0000005A   0x.... 0x....      B.W      TIM_CtrlPWMOutputs
    641          
    642          }
    643          
    644          /*******************************************************************************
    645           * 名    称： LED_SetColor
    646           * 功    能： 设置LED颜色
    647           * 入口参数：
    648           * 出口参数： 无
    649           * 作　 　者： 无名沈
    650           * 创建日期： 2014-07-05
    651           * 修    改：
    652           * 修改日期：
    653           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    654          void LED_SetColor(INT32U color ) 
    655          {
   \                     LED_SetColor: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    656              INT08U red  = B2_INT32U(color);
    657              INT08U gre  = B1_INT32U(color);
    658              INT08U ble  = B0_INT32U(color);
    659              
    660              PWM_SetDuty(&LedPwm, LED_CH_R, red / 2.55);
   \   00000004   0x....             LDR.N    R5,??DataTable11
   \   00000006   0x0C20             LSRS     R0,R4,#+16
   \   00000008   0xB2C0             UXTB     R0,R0
   \   0000000A   0x.... 0x....      BL       __aeabi_ui2d
   \   0000000E   0xF04F 0x3266      MOV      R2,#+1717986918
   \   00000012   0x....             LDR.N    R3,??DataTable11_12  ;; 0x40046666
   \   00000014   0x.... 0x....      BL       __aeabi_ddiv
   \   00000018   0x.... 0x....      BL       __aeabi_d2f
   \   0000001C   0x4602             MOV      R2,R0
   \   0000001E   0x2102             MOVS     R1,#+2
   \   00000020   0x4628             MOV      R0,R5
   \   00000022   0x.... 0x....      BL       PWM_SetDuty
    661              PWM_SetDuty(&LedPwm, LED_CH_G, gre / 2.55);
   \   00000026   0x0A20             LSRS     R0,R4,#+8
   \   00000028   0xB2C0             UXTB     R0,R0
   \   0000002A   0x.... 0x....      BL       __aeabi_ui2d
   \   0000002E   0xF04F 0x3266      MOV      R2,#+1717986918
   \   00000032   0x....             LDR.N    R3,??DataTable11_12  ;; 0x40046666
   \   00000034   0x.... 0x....      BL       __aeabi_ddiv
   \   00000038   0x.... 0x....      BL       __aeabi_d2f
   \   0000003C   0x4602             MOV      R2,R0
   \   0000003E   0x2103             MOVS     R1,#+3
   \   00000040   0x4628             MOV      R0,R5
   \   00000042   0x.... 0x....      BL       PWM_SetDuty
    662              PWM_SetDuty(&LedPwm, LED_CH_B, ble / 2.55);
   \   00000046   0xB2E4             UXTB     R4,R4
   \   00000048   0x4620             MOV      R0,R4
   \   0000004A   0x.... 0x....      BL       __aeabi_ui2d
   \   0000004E   0xF04F 0x3266      MOV      R2,#+1717986918
   \   00000052   0x....             LDR.N    R3,??DataTable11_12  ;; 0x40046666
   \   00000054   0x.... 0x....      BL       __aeabi_ddiv
   \   00000058   0x.... 0x....      BL       __aeabi_d2f
   \   0000005C   0x4602             MOV      R2,R0
   \   0000005E   0x2101             MOVS     R1,#+1
   \   00000060   0x4628             MOV      R0,R5
   \   00000062   0xE8BD 0x4038      POP      {R3-R5,LR}
   \   00000066   0x....             B.N      PWM_SetDuty
    663          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   0x........         DC32     LedPwm

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_1:
   \   00000000   0x461C4000         DC32     0x461c4000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_2:
   \   00000000   0x........         DC32     BeepPwm

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_3:
   \   00000000   0x44FA0000         DC32     0x44fa0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_4:
   \   00000000   0x40010800         DC32     0x40010800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_5:
   \   00000000   0x40012C00         DC32     0x40012c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_6:
   \   00000000   0x........         DC32     BSP_CPU_ClkFreq_MHz

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_7:
   \   00000000   0x461C4001         DC32     0x461c4001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_8:
   \   00000000   0x000F4240         DC32     0xf4240

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_9:
   \   00000000   0x42C80001         DC32     0x42c80001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_10:
   \   00000000   0x42C80000         DC32     0x42c80000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_11:
   \   00000000   0x40590000         DC32     0x40590000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_12:
   \   00000000   0x40046666         DC32     0x40046666
    664          /*******************************************************************************
    665           * 				end of file
    666           *******************************************************************************/
    667          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   BeepPWM_GPIO_Configuration
         8   -> GPIO_Init
         8   -> RCC_APB2PeriphClockCmd
       8   BeepPWM_Init
         8   -> BeepPWM_GPIO_Configuration
         8   -> BeepPWM_TIM_Configuration
         8   -> PWM_SetProperty
         8   -> PWM_Start
      40   BeepPWM_TIM_Configuration
        40   -> RCC_APB1PeriphClockCmd
        40   -> TIM_ARRPreloadConfig
        40   -> TIM_Cmd
        40   -> TIM_OC2Init
        40   -> TIM_OC2PreloadConfig
        40   -> TIM_TimeBaseInit
       8   FanPWM_GPIO_Configuration
         8   -> GPIO_Init
         8   -> RCC_APB2PeriphClockCmd
       8   FanPWM_Init
         8   -> FanPWM_GPIO_Configuration
         8   -> FanPWM_TIM_Configuration
         8   -> PWM_SetProperty
       8   FanPWM_TIM_Configuration
         8   -> RCC_APB2PeriphClockCmd
      16   LED_SetColor
         0   -> PWM_SetDuty
        16   -> PWM_SetDuty
        16   -> __aeabi_d2f
        16   -> __aeabi_ddiv
        16   -> __aeabi_ui2d
       8   LedPWM_GPIO_Configuration
         8   -> GPIO_Init
         8   -> RCC_APB2PeriphClockCmd
      16   LedPWM_Init
        16   -> LedPWM_GPIO_Configuration
        16   -> LedPWM_TIM_Configuration
        16   -> PWM_SetProperty
        16   -> PWM_Start
      56   LedPWM_TIM_Configuration
        56   -> RCC_APB2PeriphClockCmd
        56   -> TIM_ARRPreloadConfig
        56   -> TIM_BDTRConfig
        56   -> TIM_Cmd
        56   -> TIM_CtrlPWMOutputs
        56   -> TIM_OC1Init
        56   -> TIM_OC1PreloadConfig
        56   -> TIM_OC2Init
        56   -> TIM_OC2PreloadConfig
        56   -> TIM_OC3Init
        56   -> TIM_OC3PreloadConfig
        56   -> TIM_OC4Init
        56   -> TIM_OC4PreloadConfig
        56   -> TIM_TimeBaseInit
      16   PWM_SetDuty
         0   -> TIM_SetCompare1
         0   -> TIM_SetCompare2
         0   -> TIM_SetCompare3
         0   -> TIM_SetCompare4
        16   -> __aeabi_d2uiz
        16   -> __aeabi_ddiv
        16   -> __aeabi_f2d
        16   -> __aeabi_fmul
        16   -> __aeabi_ui2f
        16 __aeabi_cfcmple
        16 __aeabi_cfrcmple
      16   PWM_SetFreq
        16   -> PWM_SetDuty
         0   -> TIM_SetAutoreload
        16   -> __aeabi_f2uiz
        16 __aeabi_cfcmple
        16 __aeabi_cfrcmple
      16   PWM_SetProperty
         0   -> PWM_SetDuty
        16   -> PWM_SetFreq
      16   PWM_Start
        16   -> TIM_ARRPreloadConfig
         0   -> TIM_Cmd
        16   -> TIM_OC1PreloadConfig
        16   -> TIM_OC2PreloadConfig
        16   -> TIM_OC3PreloadConfig
        16   -> TIM_OC4PreloadConfig
      16   PWM_Stop
        16   -> TIM_ARRPreloadConfig
         0   -> TIM_CtrlPWMOutputs
        16   -> TIM_OC1PreloadConfig
        16   -> TIM_OC2PreloadConfig
        16   -> TIM_OC3PreloadConfig
        16   -> TIM_OC4PreloadConfig


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable11
       4  ??DataTable11_1
       4  ??DataTable11_10
       4  ??DataTable11_11
       4  ??DataTable11_12
       4  ??DataTable11_2
       4  ??DataTable11_3
       4  ??DataTable11_4
       4  ??DataTable11_5
       4  ??DataTable11_6
       4  ??DataTable11_7
       4  ??DataTable11_8
       4  ??DataTable11_9
      40  BeepPWM_GPIO_Configuration
      38  BeepPWM_Init
     136  BeepPWM_TIM_Configuration
      80  BeepPwm
      42  FanPWM_GPIO_Configuration
      32  FanPWM_Init
      46  FanPWM_TIM_Configuration
     104  LED_SetColor
      42  LedPWM_GPIO_Configuration
      76  LedPWM_Init
     292  LedPWM_TIM_Configuration
      80  LedPwm
     142  PWM_SetDuty
      84  PWM_SetFreq
      24  PWM_SetProperty
      96  PWM_Start
      94  PWM_Stop

 
   160 bytes in section .data
 1 340 bytes in section .text
 
 1 340 bytes of CODE memory
   160 bytes of DATA memory

Errors: none
Warnings: none

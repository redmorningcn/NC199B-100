###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       26/Dec/2017  15:40:17
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\iar\NC199B-100\Library\Source\APP\Tasks\app_task_osal_tmr.c
#    Command line =  
#        F:\iar\NC199B-100\Library\Source\APP\Tasks\app_task_osal_tmr.c -D
#        USE_STDPERIPH_DRIVER -D _STM32F10X_HD -D STM32F10X_CL -D DEBUG -D
#        STM32F103RC -D STM32_FLASH_SIZE=256 -D HSE_VALUE=25000000 -lCN
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\List\
#        -o
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        F:\iar\NC199B-100\Library\Project\IAR\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\User\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\AES\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Config\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\OS\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\User\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Source\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Port\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\OS\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Config\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Protocol\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Iap\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Driver\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\IAR\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\uCOS-III\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\CMSIS\CM3\CoreSupport\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\CMSIS\CM3\DeviceSupport\ST\STM32F10x\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\STM32F10x_StdPeriph_Driver\inc\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-CPU\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-CPU\ARM-Cortex-M3\IAR\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-LIB\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\OSAL\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\OSAL\OS\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\OS\uCOS-III\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\Source\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\Source\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\FatFs\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\FatFs\option\ -Om
#        --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\List\app_task_osal_tmr.lst
#    Object file  =  
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\Obj\app_task_osal_tmr.o
#
###############################################################################

F:\iar\NC199B-100\Library\Source\APP\Tasks\app_task_osal_tmr.c
      1          /*******************************************************************************
      2           *   Filename:       app_task_tmr.c
      3           *   Revised:        All copyrights reserved to wumingshen.
      4           *   Revision:       v1.0
      5           *   Writer:	     wumingshen.
      6           *
      7           *   Description:    双击选中 tmr 按 Ctrl + H, 钩选 Match the case, Replace with
      8           *                   输入您要的名字，点击 Replace All
      9           *                   双击选中 Tmr 按 Ctrl + H, 钩选 Match the case, Replace with
     10           *                   输入您要的名字，点击 Replace All
     11           *                   双击选中 TMR 按 Ctrl + H, 钩选 Match the case, Replace with
     12           *                   输入您要的名字，点击 Replace All
     13           *                   在 app_cfg.h 中指定本任务的 优先级  （ APP_TASK_TMR_PRIO ）
     14           *                                            和 任务堆栈（ APP_TASK_TMR_STK_SIZE ）大小
     15           *                   在 app.h 中声明本任务的     创建函数（ void  App_TaskTmrCreate(void) ）
     16           *                                            和 看门狗标志位 （ WDTFLAG_Tmr ）
     17           *
     18           *   Notes:
     19           *     				E-mail: shenchangwei945@163.com
     20           *
     21           *******************************************************************************/
     22          
     23          /*******************************************************************************
     24           * INCLUDES
     25           */
     26          #define  SNL_APP_SOURCE
     27          #include <includes.h>
     28          //#include "DS3231.h"
     29          #include "app.h"
     30          #include "bsp_timer.h"
     31          #include "os_cfg_app.h"
     32          #include <osal_timer.h>
     33          
     34          
     35          #ifdef VSC_INCLUDE_SOURCE_FILE_NAMES
     36          const  CPU_CHAR  *app_task_tmr__c = "$Id: $";
     37          #endif
     38          
     39          #define APP_TASK_TMR_EN     DEF_ENABLED
     40          #if APP_TASK_TMR_EN == DEF_ENABLED
     41          /*******************************************************************************
     42           * CONSTANTS
     43           */
     44          //#define CYCLE_TIME_TICKS            (OS_CFG_TICK_RATE_HZ * 1u)
     45          #define CYCLE_SAMPLE_MSEC_TICKS     (OS_CFG_TICK_RATE_HZ / 5)
     46          #define CYCLE_SAMPLE_SEC_TICKS      (OS_CFG_TICK_RATE_HZ * 5u)
     47          #define CYCLE_SAMPLE_MIN_TICKS      (OS_CFG_TICK_RATE_HZ * 60u)
     48          #define CYCLE_SAMPLE_TICKS          (OS_CFG_TICK_RATE_HZ * 2u)
     49               
     50          /*******************************************************************************
     51           * MACROS
     52           */
     53          
     54          /*******************************************************************************
     55           * TYPEDEFS
     56           */
     57          
     58          /*******************************************************************************
     59           * LOCAL VARIABLES
     60           */
     61          
     62          #if ( OSAL_EN == DEF_ENABLED )
     63          #else
     64          /***********************************************
     65          * 描述： 任务控制块（TCB）
     66          */
     67          static  OS_TCB   AppTaskTmrTCB;
     68          
     69          /***********************************************
     70          * 描述： 任务堆栈（STACKS）
     71          */
     72          static  CPU_STK  AppTaskTmrStk[ APP_TASK_TMR_STK_SIZE ];
     73          
     74          #endif
     75          /*******************************************************************************
     76           * GLOBAL VARIABLES
     77           */
     78          
     79          /*******************************************************************************
     80           * LOCAL FUNCTIONS
     81           */
     82          
     83          /*******************************************************************************
     84           * GLOBAL FUNCTIONS
     85           */
     86          
     87          /*******************************************************************************
     88           * EXTERN VARIABLES
     89           */
     90          
     91          /*******************************************************************************/
     92          
     93          /*******************************************************************************
     94           * 名    称： AppTaskTmr
     95           * 功    能： 控制任务
     96           * 入口参数： p_arg - 由任务创建函数传入
     97           * 出口参数： 无
     98           * 作　 　者： wumingshen.
     99           * 创建日期： 2015-02-05
    100           * 修    改：
    101           * 修改日期：
    102           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    103          osalEvt  TaskTmrEvtProcess(osalTid task_id, osalEvt task_event)
    104          {
   \                     TaskTmrEvtProcess: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x460C             MOV      R4,R1
    105              OS_ERR      err;
    106          //    static BOOL     chang_flag = FALSE;
    107              
    108              /***********************************************
    109              * 描述： 本任务看门狗标志置位
    110              */
    111              OS_FlagPost ((OS_FLAG_GRP *)&WdtFlagGRP,
    112                           (OS_FLAGS     ) WDT_FLAG_TMR,
    113                           (OS_OPT       ) OS_OPT_POST_FLAG_SET,
    114                           (CPU_TS       ) 0,
    115                           (OS_ERR      *) &err);    
   \   00000004   0xA801             ADD      R0,SP,#+4
   \   00000006   0x9000             STR      R0,[SP, #+0]
   \   00000008   0x2300             MOVS     R3,#+0
   \   0000000A   0x461A             MOV      R2,R3
   \   0000000C   0x2104             MOVS     R1,#+4
   \   0000000E   0x....             LDR.N    R0,??DataTable1
   \   00000010   0x.... 0x....      BL       OS_FlagPost
    116              
    117          //    Ctrl.Para.dat.sRunPara.SysSta.Rsv = 1;
    118              
    119              /***************************************************************************
    120              * 描述： 统计模块和测量某块通讯定时器，统计装置定时发送数据查询指令，超时发送
    121              COMM_EVT_FLAG_MTR_TIMEOUT 标示。定时500ms通讯一次。
    122              */
    123          //    if( task_event & OS_EVT_TMR_MTR ) {     
    124          //        OS_FlagPost(( OS_FLAG_GRP *)&Ctrl.Os.CommEvtFlagGrp,
    125          //                    ( OS_FLAGS     ) COMM_EVT_FLAG_MTR_TIMEOUT,
    126          //                    ( OS_OPT       ) OS_OPT_POST_FLAG_SET,
    127          //                    ( CPU_TS       ) 0,
    128          //                    ( OS_ERR      *) &err);        
    129          //
    130          //        
    131          //        Ctrl.Para.dat.sRunPara.SysSta.mtrsim =  1;
    132          //
    133          //        osal_start_timerEx(  OS_TASK_ID_TMR,     //计数器重新开始
    134          //                    OS_EVT_TMR_MTR,
    135          //                    OS_TICKS_PER_SEC);        
    136          //            
    137          //        return ( task_event ^ OS_EVT_TMR_MTR );
    138          //    }
    139              
    140              /***************************************************************************
    141              * 描述： 统计模块和无线发送模块通讯定时器，
    142              COMM_EVT_FLAG_DTU_TIMEOUT 标示。
    143              */
    144              if( task_event & OS_EVT_TMR_DTU ) { 
   \   00000014   0x07A0             LSLS     R0,R4,#+30
   \   00000016   0xD510             BPL.N    ??TaskTmrEvtProcess_0
    145                  OS_FlagPost(( OS_FLAG_GRP *)&Ctrl.Os.CommEvtFlagGrp,
    146                              ( OS_FLAGS     ) COMM_EVT_FLAG_DTU_TIMEOUT,
    147                              ( OS_OPT       ) OS_OPT_POST_FLAG_SET,
    148                              ( CPU_TS       ) 0,
    149                              ( OS_ERR      *) &err);  
   \   00000018   0xA801             ADD      R0,SP,#+4
   \   0000001A   0x9000             STR      R0,[SP, #+0]
   \   0000001C   0x2300             MOVS     R3,#+0
   \   0000001E   0x461A             MOV      R2,R3
   \   00000020   0x2110             MOVS     R1,#+16
   \   00000022   0x....             LDR.N    R0,??DataTable1_1
   \   00000024   0x.... 0x....      BL       OS_FlagPost
    150              
    151                   osal_start_timerEx(  OS_TASK_ID_TMR,     //计数器重新开始
    152                                        OS_EVT_TMR_DTU,
    153                                        OS_TICKS_PER_SEC*10); 
   \   00000028   0xF242 0x7210      MOVW     R2,#+10000
   \   0000002C   0x2102             MOVS     R1,#+2
   \   0000002E   0x2001             MOVS     R0,#+1
   \   00000030   0x.... 0x....      BL       osal_start_timerEx
    154                  
    155                 return ( task_event ^ OS_EVT_TMR_DTU );
   \   00000034   0xF084 0x0002      EOR      R0,R4,#0x2
   \   00000038   0xBD16             POP      {R1,R2,R4,PC}
    156              }
    157              
    158              /***************************************************************************
    159              * 描述： 统计模块和无线发送模块通讯定时器，
    160              COMM_EVT_FLAG_DTU_TIMEOUT 标示。
    161              */
    162          //    if( task_event & OS_EVT_TMR_OTR ) {        
    163          //        OS_FlagPost(( OS_FLAG_GRP *)&Ctrl.Os.CommEvtFlagGrp,
    164          //                    ( OS_FLAGS     ) COMM_EVT_FLAG_OTR_TIMEOUT,
    165          //                    ( OS_OPT       ) OS_OPT_POST_FLAG_SET,
    166          //                    ( CPU_TS       ) 0,
    167          //                    ( OS_ERR      *) &err);        
    168          //
    169          //         osal_start_timerEx(  OS_TASK_ID_TMR,     //计数器重新开始
    170          //                      OS_EVT_TMR_OTR,
    171          //                      OS_TICKS_PER_SEC*3);                             
    172          //
    173          //        return ( task_event ^ OS_EVT_TMR_OTR );
    174          //    }
    175              
    176          //    /***************************************************************************
    177          //    * 描述： 超时操作 TAX 
    178          //    COMM_EVT_FLAG_DTU_TIMEOUT 标示。
    179          //    */
    180          //    if( task_event & OS_EVT_TMR_TAX ) {            
    181          //
    182          //        OS_FlagPost(( OS_FLAG_GRP *)&Ctrl.Os.CommEvtFlagGrp,
    183          //                    ( OS_FLAGS     ) COMM_EVT_FLAG_TAX_TIMEOUT,
    184          //                    ( OS_OPT       ) OS_OPT_POST_FLAG_SET,
    185          //                    ( CPU_TS       ) 0,
    186          //                    ( OS_ERR      *) &err);        
    187          //        
    188          //        osal_start_timerEx(  OS_TASK_ID_TMR,     //计数器重新开始
    189          //                  OS_EVT_TMR_TAX,
    190          //                  OS_TICKS_PER_SEC*10);                             
    191          //
    192          //        return ( task_event ^ OS_EVT_TMR_TAX );
    193          //    }
    194          
    195              /***************************************************************************
    196              * 描述： 统计模块和无线发送模块通讯定时器，
    197              COMM_EVT_FLAG_DTU_TIMEOUT 标示。
    198              */
    199          //    if( task_event & OS_EVT_TMR_SEC ) {        
    200          //            Ctrl.Dtu.ConnectTimeOut++;
    201          //            Ctrl.Mtr.ConnectTimeOut++;
    202          ////            Ctrl.Otr.ConnectTimeOut++;
    203          //            
    204          //            if( Ctrl.Dtu.ConnectTimeOut > 1)
    205          //                Ctrl.Dtu.ConnectFlag = 0;
    206          //            
    207          //            if( Ctrl.Mtr.ConnectTimeOut > 1)
    208          //                Ctrl.Mtr.ConnectFlag = 0;
    209          //            
    210          ////            if( Ctrl.Otr.ConnectTimeOut > 1)
    211          ////                Ctrl.Otr.ConnectFlag = 0;
    212          //
    213          //            osal_start_timerEx(  OS_TASK_ID_TMR,     //计数器重新开始
    214          //                    OS_EVT_TMR_SEC,
    215          //                    OS_TICKS_PER_SEC);        
    216          //            
    217          //        return ( task_event ^ OS_EVT_TMR_SEC );
    218          //    }
    219              return  task_event;
   \                     ??TaskTmrEvtProcess_0: (+1)
   \   0000003A   0x4620             MOV      R0,R4
   \   0000003C   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    220          }
    221          
    222          /*******************************************************************************
    223           * 名    称： APP_TmrInit
    224           * 功    能： 任务初始化
    225           * 入口参数： 无
    226           * 出口参数： 无
    227           * 作　　者： wumingshen.
    228           * 创建日期： 2015-03-28
    229           * 修    改：
    230           * 修改日期：
    231           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    232          void TaskInitTmr(void)
    233          {
    234              /***********************************************
    235              * 描述： 初始化
    236              */    
    237              /***********************************************
    238              * 描述： 在看门狗标志组注册本任务的看门狗标志
    239              */
    240              WdtFlags |= WDT_FLAG_TMR;
   \                     TaskInitTmr: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable1_2
   \   00000002   0x6801             LDR      R1,[R0, #+0]
   \   00000004   0xF041 0x0104      ORR      R1,R1,#0x4
   \   00000008   0x6001             STR      R1,[R0, #+0]
    241              /*************************************************
    242              * 描述：启动事件查询
    243              */
    244          //    osal_start_timerEx( OS_TASK_ID_TMR, OS_EVT_TMR_SEC,OS_TICKS_PER_SEC);   
    245          //    osal_start_timerEx( OS_TASK_ID_TMR, OS_EVT_TMR_MTR,OS_TICKS_PER_SEC*1 ); 
    246              osal_start_timerEx( OS_TASK_ID_TMR, OS_EVT_TMR_DTU,OS_TICKS_PER_SEC*2 ); 
   \   0000000A   0xF44F 0x62FA      MOV      R2,#+2000
   \   0000000E   0x2102             MOVS     R1,#+2
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0x.... 0x....      B.W      osal_start_timerEx
    247          //    osal_start_timerEx( OS_TASK_ID_TMR, OS_EVT_TMR_OTR,OS_TICKS_PER_SEC*10);
    248          
    249          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     WdtFlagGRP

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x........         DC32     Ctrl+0x462

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x........         DC32     WdtFlags
    250          
    251          /*******************************************************************************
    252           * 				                    end of file                                *
    253           *******************************************************************************/
    254          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   TaskInitTmr
         0   -> osal_start_timerEx
      16   TaskTmrEvtProcess
        16   -> OS_FlagPost
        16   -> osal_start_timerEx


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
      22  TaskInitTmr
      62  TaskTmrEvtProcess

 
 96 bytes in section .text
 
 96 bytes of CODE memory

Errors: none
Warnings: none

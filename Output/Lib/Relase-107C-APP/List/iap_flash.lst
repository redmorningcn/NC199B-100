###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       26/Dec/2017  20:53:49
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  F:\iar\NC199B-100\Library\Source\APP\Iap\iap_flash.c
#    Command line =  
#        F:\iar\NC199B-100\Library\Source\APP\Iap\iap_flash.c -D
#        USE_STDPERIPH_DRIVER -D STM32F10X_CL -D RELEASE -D IMAGE_A -D
#        STM32F103RC -D STM32_FLASH_SIZE=256 -D HSE_VALUE=25000000 -lCN
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Relase-107C-APP\List\
#        -o
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Relase-107C-APP\Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        F:\iar\NC199B-100\Library\Project\IAR\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\User\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\AES\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Config\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\OS\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\User\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Source\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Port\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\OS\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Config\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Protocol\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Iap\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Driver\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\IAR\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\uCOS-III\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\CMSIS\CM3\CoreSupport\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\CMSIS\CM3\DeviceSupport\ST\STM32F10x\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\STM32F10x_StdPeriph_Driver\inc\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-CPU\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-CPU\ARM-Cortex-M3\IAR\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-LIB\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\OSAL\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\OSAL\OS\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\OS\uCOS-III\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\Source\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\Source\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\FatFs\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\FatFs\option\ -Om
#        --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Relase-107C-APP\List\iap_flash.lst
#    Object file  =  
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Relase-107C-APP\Obj\iap_flash.o
#
###############################################################################

F:\iar\NC199B-100\Library\Source\APP\Iap\iap_flash.c
      1          #include <includes.h>
      2          
      3          //////////////////////////////////////////////////////////////////////////////////	 
      4          //本程序只供学习使用，未经作者许可，不得用于其它任何用途
      5          //ALIENTEK STM32F407开发板
      6          //STM32内部FLASH读写 驱动代码	   
      7          //正点原子@ALIENTEK
      8          //技术论坛:www.openedv.com
      9          //创建日期:2014/5/9
     10          //版本：V1.0
     11          //版权所有，盗版必究。
     12          //Copyright(C) 广州市星翼电子科技有限公司 2014-2024
     13          //All rights reserved									  
     14          ////////////////////////////////////////////////////////////////////////////////// 
     15          
     16          //#define	USER_APP_START_ADDR		    0x00010000 	
     17          
     18          //读取指定地址的半字(16位数据) 
     19          //faddr:读地址 
     20          //返回值:对应数据.

   \                                 In section .text, align 2, keep-with-next
     21          u32 STMFLASH_ReadWord(u32 faddr)
     22          {
     23          	return *(vu32*)faddr; 
   \                     STMFLASH_ReadWord: (+1)
   \   00000000   0x6800             LDR      R0,[R0, #+0]
   \   00000002   0x4770             BX       LR               ;; return
     24          }  
     25          
     26          //从指定地址开始写入指定长度的数据
     27          //特别注意:因为STM32F4的扇区实在太大,没办法本地保存扇区数据,所以本函数
     28          //         写地址如果非0XFF,那么会先擦除整个扇区且不保存扇区数据.所以
     29          //         写非0XFF的地址,将导致整个扇区数据丢失.建议写之前确保扇区里
     30          //         没有重要数据,最好是整个扇区先擦除了,然后慢慢往后写. 
     31          //该函数对OTP区域也有效!可以用来写OTP区!
     32          //OTP区域地址范围:0X1FFF7800~0X1FFF7A0F
     33          //WriteAddr:起始地址(此地址必须为4的倍数!!)
     34          //pBuffer:数据指针
     35          //NumToWrite:字(32位)数(就是要写入的32位数据的个数.) 

   \                                 In section .text, align 2, keep-with-next
     36          void STMFLASH_Write(u32 WriteAddr,u32 *pBuffer,u32 NumToWrite)	
     37          { 
   \                     STMFLASH_Write: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
   \   00000008   0x4616             MOV      R6,R2
     38            FLASH_Status status = FLASH_COMPLETE;
   \   0000000A   0x2704             MOVS     R7,#+4
     39          	u32 addrx=0;
     40          	u32 endaddr=0;	
     41            if(WriteAddr<STM32_FLASH_BASE||WriteAddr%4)
   \   0000000C   0xF1B4 0x6F00      CMP      R4,#+134217728
   \   00000010   0xD32C             BCC.N    ??STMFLASH_Write_0
   \   00000012   0xF014 0x0F03      TST      R4,#0x3
   \   00000016   0xD129             BNE.N    ??STMFLASH_Write_0
     42                return;	//非法地址
     43          	FLASH_Unlock();									//解锁 
   \   00000018   0x.... 0x....      BL       FLASH_Unlock
     44            //FLASH_DataCacheCmd(DISABLE);//FLASH擦除期间,必须禁止数据缓存
     45           		
     46          	addrx=WriteAddr;				//写入的起始地址
   \   0000001C   0x46A0             MOV      R8,R4
     47          	endaddr=WriteAddr+NumToWrite*4;	//写入的结束地址
   \   0000001E   0xEB04 0x0686      ADD      R6,R4,R6, LSL #+2
     48              
     49          	if(addrx<0X1FFF0000)			//只有主存储区,才需要执行擦除操作!!
   \   00000022   0x....             LDR.N    R0,??DataTable1  ;; 0x1fff0000
   \   00000024   0x4580             CMP      R8,R0
   \   00000026   0xD210             BCS.N    ??STMFLASH_Write_1
   \   00000028   0xE001             B.N      ??STMFLASH_Write_2
     50          	{
     51          		while(addrx<endaddr)		//扫清一切障碍.(对非FFFFFFFF的地方,先擦除)
     52          		{
     53          			if(STMFLASH_ReadWord(addrx)!=0XFFFFFFFF)//有非0XFFFFFFFF的地方,要擦除这个扇区
     54          			{   
     55          				//status=FLASH_EraseSector(STMFLASH_GetFlashSector(addrx),VoltageRange_3);//VCC=2.7~3.6V之间!!
     56          				status = FLASH_ErasePage(addrx);
     57                          if(status!=FLASH_COMPLETE)break;	//发生错误了
     58          			}else addrx+=4;
   \                     ??STMFLASH_Write_3: (+1)
   \   0000002A   0xF108 0x0804      ADD      R8,R8,#+4
   \                     ??STMFLASH_Write_2: (+1)
   \   0000002E   0x45B0             CMP      R8,R6
   \   00000030   0xD20B             BCS.N    ??STMFLASH_Write_1
   \   00000032   0x4640             MOV      R0,R8
   \   00000034   0x.... 0x....      BL       STMFLASH_ReadWord
   \   00000038   0xF110 0x0F01      CMN      R0,#+1
   \   0000003C   0xD0F5             BEQ.N    ??STMFLASH_Write_3
   \   0000003E   0x4640             MOV      R0,R8
   \   00000040   0x.... 0x....      BL       FLASH_ErasePage
   \   00000044   0x4607             MOV      R7,R0
   \   00000046   0x2F04             CMP      R7,#+4
   \   00000048   0xD0F1             BEQ.N    ??STMFLASH_Write_2
     59          		} 
     60          	}
     61              
     62          	if(status==FLASH_COMPLETE)
   \                     ??STMFLASH_Write_1: (+1)
   \   0000004A   0x2F04             CMP      R7,#+4
   \   0000004C   0xD10A             BNE.N    ??STMFLASH_Write_4
   \   0000004E   0xE001             B.N      ??STMFLASH_Write_5
     63          	{
     64          		while(WriteAddr<endaddr)//写数据
     65          		{
     66          			if(FLASH_ProgramWord(WriteAddr,*pBuffer)!=FLASH_COMPLETE)//写入数据
     67          			{ 
     68          				break;	//写入异常
     69          			}
     70          			WriteAddr+=4;
   \                     ??STMFLASH_Write_6: (+1)
   \   00000050   0x1D24             ADDS     R4,R4,#+4
     71          			pBuffer++;
   \   00000052   0x1D2D             ADDS     R5,R5,#+4
   \                     ??STMFLASH_Write_5: (+1)
   \   00000054   0x42B4             CMP      R4,R6
   \   00000056   0xD205             BCS.N    ??STMFLASH_Write_4
   \   00000058   0x6829             LDR      R1,[R5, #+0]
   \   0000005A   0x4620             MOV      R0,R4
   \   0000005C   0x.... 0x....      BL       FLASH_ProgramWord
   \   00000060   0x2804             CMP      R0,#+4
   \   00000062   0xD0F5             BEQ.N    ??STMFLASH_Write_6
     72          		} 
     73          	}
     74           // FLASH_DataCacheCmd(ENABLE);	//FLASH擦除结束,开启数据缓存
     75          	FLASH_Lock();//上锁
   \                     ??STMFLASH_Write_4: (+1)
   \   00000064   0xE8BD 0x41F0      POP      {R4-R8,LR}
   \   00000068   0x.... 0x....      B.W      FLASH_Lock
   \                     ??STMFLASH_Write_0: (+1)
   \   0000006C   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
     76          } 
     77          
     78          //从指定地址开始读出指定长度的数据
     79          //ReadAddr:起始地址
     80          //pBuffer:数据指针
     81          //NumToRead:字(4位)数

   \                                 In section .text, align 2, keep-with-next
     82          void STMFLASH_Read(u32 ReadAddr,u32 *pBuffer,u32 NumToRead)   	
     83          {
   \                     STMFLASH_Read: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0x4616             MOV      R6,R2
     84          	u32 i;
     85          	for(i=0;i<NumToRead;i++)
   \   00000008   0x2700             MOVS     R7,#+0
   \   0000000A   0xE006             B.N      ??STMFLASH_Read_0
     86          	{
     87          		pBuffer[i]=STMFLASH_ReadWord(ReadAddr);//读取4个字节.
   \                     ??STMFLASH_Read_1: (+1)
   \   0000000C   0x4620             MOV      R0,R4
   \   0000000E   0x.... 0x....      BL       STMFLASH_ReadWord
   \   00000012   0xF845 0x0027      STR      R0,[R5, R7, LSL #+2]
     88          		ReadAddr+=4;//偏移4个字节.	
   \   00000016   0x1D24             ADDS     R4,R4,#+4
     89          	}
   \   00000018   0x1C7F             ADDS     R7,R7,#+1
   \                     ??STMFLASH_Read_0: (+1)
   \   0000001A   0x42B7             CMP      R7,R6
   \   0000001C   0xD3F6             BCC.N    ??STMFLASH_Read_1
     90          }
   \   0000001E   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
     91          
     92          

   \                                 In section .bss, align 4
     93          u32 iapbuf[512]; 	//2K字节缓存  
   \                     iapbuf:
   \   00000000                      DS8 2048
     94          //appxaddr:应用程序的起始地址
     95          //appbuf:应用程序CODE.
     96          //appsize:应用程序大小(字节).

   \                                 In section .text, align 2, keep-with-next
     97          void iap_write_appbin(u32 appxaddr,u8 *appbuf,u32 appsize)
     98          {
   \                     iap_write_appbin: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x4607             MOV      R7,R0
   \   00000006   0x4688             MOV      R8,R1
   \   00000008   0x4614             MOV      R4,R2
     99          	u32 t;
    100          	u16 i=0;
   \   0000000A   0x2500             MOVS     R5,#+0
    101          	u32 temp;
    102          	u32 fwaddr=appxaddr;//当前写入的地址
    103          	u8 *dfu=appbuf;
    104          	for(t=0;t<appsize;t+=4)
   \   0000000C   0x462E             MOV      R6,R5
   \   0000000E   0xE020             B.N      ??iap_write_appbin_0
    105          	{						   
    106          		temp =(u32)dfu[3]<<24;   
    107          		temp|=(u32)dfu[2]<<16;    
    108          		temp|=(u32)dfu[1]<<8;
    109          		temp|=(u32)dfu[0];	  
   \                     ??iap_write_appbin_1: (+1)
   \   00000010   0xF898 0x0003      LDRB     R0,[R8, #+3]
   \   00000014   0xF898 0x1002      LDRB     R1,[R8, #+2]
   \   00000018   0x0409             LSLS     R1,R1,#+16
   \   0000001A   0xEA41 0x6000      ORR      R0,R1,R0, LSL #+24
   \   0000001E   0xF898 0x1001      LDRB     R1,[R8, #+1]
   \   00000022   0xEA40 0x2001      ORR      R0,R0,R1, LSL #+8
   \   00000026   0xF898 0x1000      LDRB     R1,[R8, #+0]
   \   0000002A   0x4308             ORRS     R0,R1,R0
    110          		dfu +=4;//偏移4个字节
   \   0000002C   0xF108 0x0804      ADD      R8,R8,#+4
    111          		iapbuf[i++]=temp;	    
   \   00000030   0x....             LDR.N    R1,??DataTable1_1
   \   00000032   0xF841 0x0025      STR      R0,[R1, R5, LSL #+2]
   \   00000036   0x1C6D             ADDS     R5,R5,#+1
    112          		if( i==512 )
   \   00000038   0xB2AD             UXTH     R5,R5
   \   0000003A   0xF5B5 0x7F00      CMP      R5,#+512
   \   0000003E   0xD107             BNE.N    ??iap_write_appbin_2
    113          		{
    114          			i=0; 
   \   00000040   0x2500             MOVS     R5,#+0
    115          			STMFLASH_Write(fwaddr,iapbuf,512);
   \   00000042   0xF44F 0x7200      MOV      R2,#+512
   \   00000046   0x4638             MOV      R0,R7
   \   00000048   0x.... 0x....      BL       STMFLASH_Write
    116          			fwaddr+=2048;//偏移2048  512*4=2048
   \   0000004C   0xF507 0x6700      ADD      R7,R7,#+2048
    117          		}
    118          	} 
   \                     ??iap_write_appbin_2: (+1)
   \   00000050   0x1D36             ADDS     R6,R6,#+4
   \                     ??iap_write_appbin_0: (+1)
   \   00000052   0x42A6             CMP      R6,R4
   \   00000054   0xD3DC             BCC.N    ??iap_write_appbin_1
    119          	if(i)STMFLASH_Write(fwaddr,iapbuf,i);//将最后的一些内容字节写进去.  
   \   00000056   0x2D00             CMP      R5,#+0
   \   00000058   0xD005             BEQ.N    ??iap_write_appbin_3
   \   0000005A   0x462A             MOV      R2,R5
   \   0000005C   0x....             LDR.N    R1,??DataTable1_1
   \   0000005E   0x4638             MOV      R0,R7
   \   00000060   0xE8BD 0x41F0      POP      {R4-R8,LR}
   \   00000064   0x....             B.N      STMFLASH_Write
    120          }
   \                     ??iap_write_appbin_3: (+1)
   \   00000066   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x1FFF0000         DC32     0x1fff0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x........         DC32     iapbuf

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   STMFLASH_Read
        24   -> STMFLASH_ReadWord
       0   STMFLASH_ReadWord
      24   STMFLASH_Write
        24   -> FLASH_ErasePage
         0   -> FLASH_Lock
        24   -> FLASH_ProgramWord
        24   -> FLASH_Unlock
        24   -> STMFLASH_ReadWord
      24   iap_write_appbin
         0   -> STMFLASH_Write
        24   -> STMFLASH_Write


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
      32  STMFLASH_Read
       4  STMFLASH_ReadWord
     112  STMFLASH_Write
     106  iap_write_appbin
    2048  iapbuf

 
 2 048 bytes in section .bss
   262 bytes in section .text
 
   262 bytes of CODE memory
 2 048 bytes of DATA memory

Errors: none
Warnings: none

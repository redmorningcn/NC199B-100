###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       13/Dec/2017  10:41:14
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  F:\iar\NC199B-200 主板\Software\APP\comm\app_comm_mtr.c
#    Command line =  
#        "F:\iar\NC199B-200 主板\Software\APP\comm\app_comm_mtr.c" -D
#        USE_STDPERIPH_DRIVER -D _STM32F10X_HD -D STM32F10X_CL -D DEBUG -D
#        STM32F103RC -D STM32_FLASH_SIZE=256 -D HSE_VALUE=25000000 -lCN
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\List\
#        -o
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        F:\iar\NC199B-100\Library\Project\IAR\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\User\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\AES\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Config\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\OS\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\User\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Source\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Port\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\OS\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Config\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Protocol\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Iap\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Driver\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\IAR\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\uCOS-III\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\CMSIS\CM3\CoreSupport\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\CMSIS\CM3\DeviceSupport\ST\STM32F10x\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\STM32F10x_StdPeriph_Driver\inc\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-CPU\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-CPU\ARM-Cortex-M3\IAR\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-LIB\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\OSAL\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\OSAL\OS\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\OS\uCOS-III\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\Source\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\Source\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\FatFs\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\FatFs\option\ -Om
#        --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\List\app_comm_mtr.lst
#    Object file  =  
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\Obj\app_comm_mtr.o
#
###############################################################################

F:\iar\NC199B-200 主板\Software\APP\comm\app_comm_mtr.c
      1          /*******************************************************************************
      2          *   Revised:        All copyrights reserved to wumingshen.
      3          *   Revision:       v1.0
      4          *   Writer:	     redmorningcn.
      5          *
      6          *   Description:    双击选中 comm 按 Ctrl + H, 钩选 Match the case, Replace with
      7          *                   输入您要的名字，点击 Replace All
      8          *                   双击选中 Comm 按 Ctrl + H, 钩选 Match the case, Replace with
      9          *                   输入您要的名字，点击 Replace All
     10          *                   双击选中 COMM 按 Ctrl + H, 钩选 Match the case, Replace with
     11          *                   输入您要的名字，点击 Replace All
     12          *                   在 app_cfg.h 中指定本任务的 优先级  （ APP_TASK_COMM_PRIO     ）
     13          *                                            和 任务堆栈（ APP_TASK_COMM_STK_SIZE ）大小
     14          *
     15          *   Notes:
     16          *     				E-mail: redmorningcn@qq.com
     17          *
     18          *******************************************************************************/
     19          
     20          /*******************************************************************************
     21          * INCLUDES
     22          */
     23          #define  SNL_APP_SOURCE
     24          #include <includes.h>
     25          #include <app_comm_protocol.h>
     26          #include <app_ctrl.h>
     27          #include <app.h>
     28          #include <cpu.h>
     29          #include <MB.h>
     30          
     31          
     32          #include <os_cfg_app.h>
     33          
     34          #ifdef VSC_INCLUDE_SOURCE_FILE_NAMES
     35          const  CPU_CHAR  *app_comm_mtr__c = "$Id: $";
     36          #endif
     37          
     38          #define APP_TASK_COMM_EN     DEF_ENABLED
     39          #if APP_TASK_COMM_EN == DEF_ENABLED
     40          /*******************************************************************************
     41          * CONSTANTS
     42          */
     43          
     44          /*******************************************************************************
     45          * MACROS
     46          */
     47          #define CYCLE_TIME_TICKS            (OS_TICKS_PER_SEC * 1)
     48          
     49          /*******************************************************************************
     50          * TYPEDEFS
     51          */
     52          
     53          #define     GOOD_GRADE      0
     54          #define     NORMAL_GRADE    1
     55          #define     BAD_GRADE       2
     56          
     57          /*******************************************************************************
     58          * LOCAL VARIABLES
     59          */
     60          
     61          /*******************************************************************************
     62          * GLOBAL VARIABLES
     63          */
     64          
     65          /***********************************************
     66          * 描述： 软定时器声明
     67          */
     68          
     69          /***********************************************
     70          * 描述： 软定时器回调函数
     71          */
     72          
     73          
     74          /*******************************************************************************
     75          * LOCAL FUNCTIONS
     76          */
     77          #define     SLAVE_ADDR      1
     78          
     79          
     80          /*******************************************************************************
     81          * GLOBAL FUNCTIONS
     82          */
     83          
     84          /*******************************************************************************
     85          * EXTERN VARIABLES
     86          */
     87          
     88          /*******************************************************************************
     89          * EXTERN FUNCTIONS
     90          */
     91          
     92          /*******************************************************************************/
     93          
     94          
     95          /*******************************************************************************
     96          * 名    称： app_comm_mtr
     97          * 入口参数： 无
     98          * 出口参数： 无
     99          * 作　 　者： redmorningcn.
    100          * 创建日期： 2017-05-18
    101          * 修    改：
    102          * 修改日期：
    103          * 备    注： 任务创建函数需要在app.h文件中声明,
    104          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    105          void    app_comm_mtr(void)
    106          {
   \                     app_comm_mtr: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    107              uint16           renum = 0;
    108              static  uint8   mtrerrtimes = 0;
    109              //static      
    110              renum = MBM_FC03_HoldingRegRd(  Ctrl.Mtr.pch,
    111                                            ModbusNode,
    112                                            SLAVE_ADDR,
    113                                            (CPU_INT16U  *)&Ctrl.sRec.sAir,
    114                                            sizeof(Ctrl.sRec.sAir)/2 );    
    115              
    116              if( renum )                 //接收到modbus协议数据
   \   00000004   0x4D34             LDR.N    R5,??app_comm_mtr_0
   \   00000006   0xF505 0x7637      ADD      R6,R5,#+732
   \   0000000A   0xF505 0x7485      ADD      R4,R5,#+266
   \   0000000E   0x2010             MOVS     R0,#+16
   \   00000010   0x9000             STR      R0,[SP, #+0]
   \   00000012   0x4623             MOV      R3,R4
   \   00000014   0x2201             MOVS     R2,#+1
   \   00000016   0x4611             MOV      R1,R2
   \   00000018   0x6830             LDR      R0,[R6, #+0]
   \   0000001A   0x.... 0x....      BL       MBM_FC03_HoldingRegRd
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD03D             BEQ.N    ??app_comm_mtr_1
    117              {
    118                  Ctrl.sRec.sAir.Temperature -=3;     //下修正3°
   \   00000022   0x8820             LDRH     R0,[R4, #+0]
   \   00000024   0x1EC0             SUBS     R0,R0,#+3
   \   00000026   0x8020             STRH     R0,[R4, #+0]
    119                   //通讯成功，清故障数据
    120                  Ctrl.Mtr.ConnectTimeOut = 0;
   \   00000028   0x7930             LDRB     R0,[R6, #+4]
   \   0000002A   0xF000 0x0080      AND      R0,R0,#0x80
   \   0000002E   0x7130             STRB     R0,[R6, #+4]
    121                  mtrerrtimes = 0;
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x492A             LDR.N    R1,??app_comm_mtr_0+0x4
   \   00000034   0x7008             STRB     R0,[R1, #+0]
    122                  Ctrl.sRec.ErrCode.MtrCommErr = 0;       //清故障代码
   \   00000036   0xF205 0x1033      ADDW     R0,R5,#+307
   \   0000003A   0x8801             LDRH     R1,[R0, #+0]
   \   0000003C   0xF64F 0x72FE      MOVW     R2,#+65534
   \   00000040   0x4011             ANDS     R1,R2,R1
   \   00000042   0x8001             STRH     R1,[R0, #+0]
    123          
    124                  //湿度等级判断
    125                  Ctrl.sRec.Air_Hum_Grade = GOOD_GRADE;
   \   00000044   0x2100             MOVS     R1,#+0
   \   00000046   0x7081             STRB     R1,[R0, #+2]
    126                  
    127                  if(Ctrl.sRec.sAir.Humidity > Ctrl.Para.dat.sAirPara.sStandard_Hum.NormalLimit)
   \   00000048   0x8862             LDRH     R2,[R4, #+2]
   \   0000004A   0xF105 0x0120      ADD      R1,R5,#+32
   \   0000004E   0x884B             LDRH     R3,[R1, #+2]
   \   00000050   0x4293             CMP      R3,R2
   \   00000052   0xD202             BCS.N    ??app_comm_mtr_2
    128                  {
    129                      Ctrl.sRec.Air_Hum_Grade = BAD_GRADE;
   \   00000054   0x2202             MOVS     R2,#+2
   \   00000056   0x7082             STRB     R2,[R0, #+2]
   \   00000058   0xE004             B.N      ??app_comm_mtr_3
    130                  }
    131                  else if(Ctrl.sRec.sAir.Humidity > Ctrl.Para.dat.sAirPara.sStandard_Hum.GoodLimit)
   \                     ??app_comm_mtr_2: (+1)
   \   0000005A   0x880B             LDRH     R3,[R1, #+0]
   \   0000005C   0x4293             CMP      R3,R2
   \   0000005E   0xD201             BCS.N    ??app_comm_mtr_3
    132                  {
    133                      Ctrl.sRec.Air_Hum_Grade = NORMAL_GRADE;
   \   00000060   0x2201             MOVS     R2,#+1
   \   00000062   0x7082             STRB     R2,[R0, #+2]
    134                  }
    135                  
    136                  //油气等级判断
    137                  Ctrl.sRec.Air_Voc_Grade = GOOD_GRADE;
   \                     ??app_comm_mtr_3: (+1)
   \   00000064   0x2200             MOVS     R2,#+0
   \   00000066   0x70C2             STRB     R2,[R0, #+3]
    138                  
    139                  if(Ctrl.sRec.sAir.VOCs > Ctrl.Para.dat.sAirPara.sStandard_VOC.NormalLimit)
   \   00000068   0x88A2             LDRH     R2,[R4, #+4]
   \   0000006A   0x88CB             LDRH     R3,[R1, #+6]
   \   0000006C   0x4293             CMP      R3,R2
   \   0000006E   0xD202             BCS.N    ??app_comm_mtr_4
    140                  {
    141                      Ctrl.sRec.Air_Voc_Grade = BAD_GRADE;
   \   00000070   0x2202             MOVS     R2,#+2
   \   00000072   0x70C2             STRB     R2,[R0, #+3]
   \   00000074   0xE004             B.N      ??app_comm_mtr_5
    142                  }
    143                  else if(Ctrl.sRec.sAir.VOCs > Ctrl.Para.dat.sAirPara.sStandard_VOC.GoodLimit)
   \                     ??app_comm_mtr_4: (+1)
   \   00000076   0x888B             LDRH     R3,[R1, #+4]
   \   00000078   0x4293             CMP      R3,R2
   \   0000007A   0xD201             BCS.N    ??app_comm_mtr_5
    144                  {
    145                      Ctrl.sRec.Air_Voc_Grade = NORMAL_GRADE;
   \   0000007C   0x2201             MOVS     R2,#+1
   \   0000007E   0x70C2             STRB     R2,[R0, #+3]
    146                  }
    147                  
    148                  //粉尘等级判断
    149                  Ctrl.sRec.Air_Dust_Grade = GOOD_GRADE;
   \                     ??app_comm_mtr_5: (+1)
   \   00000080   0x2200             MOVS     R2,#+0
   \   00000082   0x7102             STRB     R2,[R0, #+4]
    150                  
    151                  if     (Ctrl.sRec.sAir.Dusts_2D5 > Ctrl.Para.dat.sAirPara.sStandard_Dust.NormalLimit)
   \   00000084   0x8BE2             LDRH     R2,[R4, #+30]
   \   00000086   0x894B             LDRH     R3,[R1, #+10]
   \   00000088   0x4293             CMP      R3,R2
   \   0000008A   0xD202             BCS.N    ??app_comm_mtr_6
    152                  {
    153                          Ctrl.sRec.Air_Dust_Grade = BAD_GRADE;
   \   0000008C   0x2102             MOVS     R1,#+2
   \   0000008E   0x7101             STRB     R1,[R0, #+4]
   \   00000090   0xBD73             POP      {R0,R1,R4-R6,PC}
    154                  }
    155                  else if(Ctrl.sRec.sAir.Dusts_2D5 > Ctrl.Para.dat.sAirPara.sStandard_Dust.GoodLimit)
   \                     ??app_comm_mtr_6: (+1)
   \   00000092   0x8909             LDRH     R1,[R1, #+8]
   \   00000094   0x4291             CMP      R1,R2
   \   00000096   0xD21D             BCS.N    ??app_comm_mtr_7
    156                  {
    157                          Ctrl.sRec.Air_Dust_Grade = NORMAL_GRADE;
   \   00000098   0x2101             MOVS     R1,#+1
   \   0000009A   0x7101             STRB     R1,[R0, #+4]
    158                  }  
    159                  
    160                  return;
   \   0000009C   0xBD73             POP      {R0,R1,R4-R6,PC}
    161              }
    162              
    163              //通讯错误
    164              if(Ctrl.Mtr.ConnectFlag == 0)
   \                     ??app_comm_mtr_1: (+1)
   \   0000009E   0x7930             LDRB     R0,[R6, #+4]
   \   000000A0   0x09C0             LSRS     R0,R0,#+7
   \   000000A2   0xD117             BNE.N    ??app_comm_mtr_7
    165              {
    166                  if(mtrerrtimes++ > 5)       //连续5次无通讯，认为通许错误
   \   000000A4   0x480D             LDR.N    R0,??app_comm_mtr_0+0x4
   \   000000A6   0x7801             LDRB     R1,[R0, #+0]
   \   000000A8   0x1C4A             ADDS     R2,R1,#+1
   \   000000AA   0x7002             STRB     R2,[R0, #+0]
   \   000000AC   0x2906             CMP      R1,#+6
   \   000000AE   0xDB11             BLT.N    ??app_comm_mtr_7
    167                  {
    168                      Ctrl.sRec.ErrCode.MtrCommErr = 1;       //置故障代码
   \   000000B0   0xF205 0x1033      ADDW     R0,R5,#+307
   \   000000B4   0x8801             LDRH     R1,[R0, #+0]
   \   000000B6   0xF041 0x0101      ORR      R1,R1,#0x1
   \   000000BA   0x8001             STRH     R1,[R0, #+0]
    169                      
    170                      uint8 *p = (uint8 *)&Ctrl.sRec.sAir;    //数据清零
    171                      
    172                      for(uint8 i =0;i < sizeof(Ctrl.sRec.sAir);i++){
   \   000000BC   0x2100             MOVS     R1,#+0
   \   000000BE   0x460A             MOV      R2,R1
   \   000000C0   0xE002             B.N      ??app_comm_mtr_8
    173                          *p = 0;
   \                     ??app_comm_mtr_9: (+1)
   \   000000C2   0xF804 0x2B01      STRB     R2,[R4], #+1
    174                           p++;
    175                      }
   \   000000C6   0x1C49             ADDS     R1,R1,#+1
   \                     ??app_comm_mtr_8: (+1)
   \   000000C8   0x2920             CMP      R1,#+32
   \   000000CA   0xD3FA             BCC.N    ??app_comm_mtr_9
    176                      
    177                      Ctrl.sRec.Air_Hum_Grade     = GOOD_GRADE;
   \   000000CC   0x4611             MOV      R1,R2
   \   000000CE   0x7081             STRB     R1,[R0, #+2]
    178                      Ctrl.sRec.Air_Voc_Grade     = GOOD_GRADE;
   \   000000D0   0x70C1             STRB     R1,[R0, #+3]
    179                      Ctrl.sRec.Air_Dust_Grade    = GOOD_GRADE;
   \   000000D2   0x7101             STRB     R1,[R0, #+4]
    180                  }
    181              }
    182          }
   \                     ??app_comm_mtr_7: (+1)
   \   000000D4   0xBD73             POP      {R0,R1,R4-R6,PC}  ;; return
   \   000000D6   0xBF00             Nop      
   \                     ??app_comm_mtr_0:
   \   000000D8   0x........         DC32     Ctrl
   \   000000DC   0x........         DC32     ??mtrerrtimes

   \                                 In section .bss, align 1
   \                     ??mtrerrtimes:
   \   00000000                      DS8 1
    183          
    184          
    185          /*******************************************************************************
    186          * 				end of file
    187          *******************************************************************************/
    188          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   app_comm_mtr
        24   -> MBM_FC03_HoldingRegRd


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     224  app_comm_mtr
       1  mtrerrtimes

 
   1 byte  in section .bss
 224 bytes in section .text
 
 224 bytes of CODE memory
   1 byte  of DATA memory

Errors: none
Warnings: none

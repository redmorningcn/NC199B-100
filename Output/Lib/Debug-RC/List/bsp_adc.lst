###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       16/Nov/2017  10:23:39
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  F:\iar\NC199B-100\Library\Source\BSP\Driver\bsp_adc.c
#    Command line =  
#        F:\iar\NC199B-100\Library\Source\BSP\Driver\bsp_adc.c -D
#        USE_STDPERIPH_DRIVER -D _STM32F10X_HD -D STM32F10X_CL -D DEBUG -D
#        STM32F103RC -D STM32_FLASH_SIZE=256 -D HSE_VALUE=25000000 -lCN
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\List\
#        -o
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        F:\iar\NC199B-100\Library\Project\IAR\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\User\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\AES\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Config\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\OS\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\User\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Source\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Port\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\OS\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Config\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Protocol\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Iap\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Driver\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\IAR\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\uCOS-III\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\CMSIS\CM3\CoreSupport\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\CMSIS\CM3\DeviceSupport\ST\STM32F10x\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\STM32F10x_StdPeriph_Driver\inc\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-CPU\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-CPU\ARM-Cortex-M3\IAR\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-LIB\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\OSAL\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\OSAL\OS\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\OS\uCOS-III\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\Source\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\Source\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\FatFs\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\FatFs\option\ -Om
#        --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\List\bsp_adc.lst
#    Object file  =  
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\Obj\bsp_adc.o
#
###############################################################################

F:\iar\NC199B-100\Library\Source\BSP\Driver\bsp_adc.c
      1          /*******************************************************************************
      2           *   Filename:       bsp_adc.c
      3           *   Revised:        All copyrights reserved to Roger.
      4           *   Date:           2014-08-11
      5           *   Revision:       v1.0
      6           *   Writer:	     wumingshen.
      7           *
      8           *   Description:    ADC模数转换模块（使用DMA传输数据）
      9           *
     10           *
     11           *   Notes:
     12           *
     13           *   All copyrights reserved to wumingshen
     14           *******************************************************************************/
     15          #include "bsp_adc.h"
     16          
     17          

   \                                 In section .bss, align 4
     18          __IO uint16_t ADC_Value[Channel_Times][Channel_Number];
   \                     ADC_Value:
   \   00000000                      DS8 8
     19          __IO uint16_t ADC_AverageValue[Channel_Number];
   \                     ADC_AverageValue:
   \   00000008                      DS8 8
     20          
     21          //============================================================================//
     22          
     23          
     24          /*******************************************************************************
     25           * 名    称： ADCx_GPIO_Config
     26           * 功    能： 初始化ADC使用的引脚
     27           * 入口参数： 无
     28           * 出口参数： 无
     29           * 作　 　者： 无名沈.
     30           * 创建日期： 2015-06-25
     31           * 修    改：
     32           * 修改日期：
     33           * 备    注：
     34           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     35          static void ADCx_GPIO_Config(void)
     36          {
   \                     ADCx_GPIO_Config: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     37          	GPIO_InitTypeDef GPIO_InitStructure;
     38          
     39          	/* Enable DMA clock */
     40          	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0x4608             MOV      R0,R1
   \   00000006   0x.... 0x....      BL       RCC_AHBPeriphClockCmd
     41          
     42          	/* Enable ADC1 and GPIOA clock */
     43          	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1 | RCC_APB2Periph_GPIOA, ENABLE);
   \   0000000A   0x2101             MOVS     R1,#+1
   \   0000000C   0xF44F 0x7001      MOV      R0,#+516
   \   00000010   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     44          
     45          	GPIO_InitStructure.GPIO_Pin     = GPIO_Pin_5
     46                                              | GPIO_Pin_6
     47                                              | GPIO_Pin_7;
   \   00000014   0x20E0             MOVS     R0,#+224
   \   00000016   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     48          	GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_AIN;
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0xF88D 0x0003      STRB     R0,[SP, #+3]
     49          	GPIO_Init(GPIOA, &GPIO_InitStructure);
   \   00000020   0x4669             MOV      R1,SP
   \   00000022   0x....             LDR.N    R0,??DataTable4  ;; 0x40010800
   \   00000024   0x.... 0x....      BL       GPIO_Init
     50          }
   \   00000028   0xBD01             POP      {R0,PC}          ;; return
     51          
     52          /*******************************************************************************
     53           * 名    称： ADCx_Mode_Config
     54           * 功    能： 配置ADCx的工作模式
     55           * 入口参数： 无
     56           * 出口参数： 无
     57           * 作　 　者： 无名沈.
     58           * 创建日期： 2015-06-25
     59           * 修    改：
     60           * 修改日期：
     61           * 备    注：
     62           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     63          static void  ADCx_Mode_Config(void)
     64          {
   \                     ADCx_Mode_Config: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB090             SUB      SP,SP,#+64
     65              DMA_InitTypeDef DMA_InitStructure;
     66              ADC_InitTypeDef ADC_InitStructure;
     67          
     68              /* DMA channel1 configuration */
     69              //给DMA配置通道1
     70              DMA_DeInit(DMA1_Channel1);
   \   00000004   0x....             LDR.N    R4,??DataTable4_1  ;; 0x40020008
   \   00000006   0x4620             MOV      R0,R4
   \   00000008   0x.... 0x....      BL       DMA_DeInit
     71          
     72              //设置DMA源：内存地址或者串口数据寄存器地址
     73              DMA_InitStructure.DMA_PeripheralBaseAddr = ADC1_DR_Address;	 //ADC地址
   \   0000000C   0x....             LDR.N    R0,??DataTable4_2  ;; 0x4001244c
   \   0000000E   0x9005             STR      R0,[SP, #+20]
     74              //内存地址（要传输的变量的指针）
     75              DMA_InitStructure.DMA_MemoryBaseAddr = (u32)&ADC_Value;      //内存地址
   \   00000010   0x....             LDR.N    R0,??DataTable4_3
   \   00000012   0x9006             STR      R0,[SP, #+24]
     76              //方向：单向传输
     77              DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x9007             STR      R0,[SP, #+28]
     78              //设置传输时缓冲区的长度（1就是一个Half-word16位）
     79              DMA_InitStructure.DMA_BufferSize = Channel_Times * Channel_Number;
   \   00000018   0x2003             MOVS     R0,#+3
   \   0000001A   0x9008             STR      R0,[SP, #+32]
     80              //外设地址固定
     81              DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;//外设地址固定
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x9009             STR      R0,[SP, #+36]
     82              //内存地址递增
     83              DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;        //内存地址固定
   \   00000020   0x2080             MOVS     R0,#+128
   \   00000022   0x900A             STR      R0,[SP, #+40]
     84              //DMA在访问每次操作 数据长度
     85              DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;//半字（16位）
   \   00000024   0xF44F 0x7080      MOV      R0,#+256
   \   00000028   0x900B             STR      R0,[SP, #+44]
     86              DMA_InitStructure.DMA_MemoryDataSize     = DMA_MemoryDataSize_HalfWord;
   \   0000002A   0xF44F 0x6080      MOV      R0,#+1024
   \   0000002E   0x900C             STR      R0,[SP, #+48]
     87              //设置DMA的传输方式：循环传输模数
     88              DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;		//循环传输模式
   \   00000030   0x2020             MOVS     R0,#+32
   \   00000032   0x900D             STR      R0,[SP, #+52]
     89              //DMA通道x的优先等级:高
     90              DMA_InitStructure.DMA_Priority = DMA_Priority_High;
   \   00000034   0xF44F 0x5000      MOV      R0,#+8192
   \   00000038   0x900E             STR      R0,[SP, #+56]
     91              //DMA通道x禁止内存到内存的传输
     92              DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0x900F             STR      R0,[SP, #+60]
     93              //初始化DMA
     94              DMA_Init(DMA1_Channel1, &DMA_InitStructure);
   \   0000003E   0xA905             ADD      R1,SP,#+20
   \   00000040   0x4620             MOV      R0,R4
   \   00000042   0x.... 0x....      BL       DMA_Init
     95          
     96              /* Enable DMA channel1 */
     97              //使能DMA
     98              DMA_Cmd(DMA1_Channel1, ENABLE);
   \   00000046   0x2101             MOVS     R1,#+1
   \   00000048   0x4620             MOV      R0,R4
   \   0000004A   0x.... 0x....      BL       DMA_Cmd
     99          
    100              /* ADC1 configuration */
    101              ADC_DeInit(ADC1); //将外设 ADC1 的全部寄存器重设为缺省值
   \   0000004E   0x....             LDR.N    R4,??DataTable4_4  ;; 0x40012400
   \   00000050   0x4620             MOV      R0,R4
   \   00000052   0x.... 0x....      BL       ADC_DeInit
    102          
    103              ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;	    //独立模式ADC模式
   \   00000056   0x2000             MOVS     R0,#+0
   \   00000058   0x9000             STR      R0,[SP, #+0]
    104              ADC_InitStructure.ADC_ScanConvMode = ENABLE ; 	        //开启扫描模式，扫描模式用于多通道采集
   \   0000005A   0x2001             MOVS     R0,#+1
   \   0000005C   0xF88D 0x0004      STRB     R0,[SP, #+4]
    105              ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;	    //开启连续转换模式，即不停地进行ADC转换
   \   00000060   0xF88D 0x0005      STRB     R0,[SP, #+5]
    106              ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;	//不使用外部触发转换
   \   00000064   0xF44F 0x2060      MOV      R0,#+917504
   \   00000068   0x9002             STR      R0,[SP, #+8]
    107              ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right; 	//采集数据右对齐
   \   0000006A   0x2000             MOVS     R0,#+0
   \   0000006C   0x9003             STR      R0,[SP, #+12]
    108              ADC_InitStructure.ADC_NbrOfChannel = Channel_Number;	//要转换的通道数目Channel_Number
   \   0000006E   0x2003             MOVS     R0,#+3
   \   00000070   0xF88D 0x0010      STRB     R0,[SP, #+16]
    109              ADC_Init(ADC1, &ADC_InitStructure);
   \   00000074   0x4669             MOV      R1,SP
   \   00000076   0x4620             MOV      R0,R4
   \   00000078   0x.... 0x....      BL       ADC_Init
    110          
    111              //----------------------------------------------------------------------
    112              //ADC的转换时间与ADC的时钟和采样周期相关，下面就是配置ADC转换时间的函数
    113              //ADC采样时间计算公式：T = 采样周期+12.5个周期
    114          
    115              /*配置ADC时钟，为PCLK2的6分频，即12MHz*/
    116              //ADC时钟频率越高，转换速度越快，但ADC时钟有上限值（不超过14MHZ）
    117              RCC_ADCCLKConfig(RCC_PCLK2_Div6);
   \   0000007C   0xF44F 0x4000      MOV      R0,#+32768
   \   00000080   0x.... 0x....      BL       RCC_ADCCLKConfig
    118              /*配置ADC1的通道11为55.	5个采样周期，序列为1 */
    119              //RANK值是指在多通道扫描模式时，本通道的扫描顺序
    120              ADC_RegularChannelConfig(ADC1, ADC_Channel_5, 1, ADC_SampleTime_1Cycles5);
   \   00000084   0x2300             MOVS     R3,#+0
   \   00000086   0x2201             MOVS     R2,#+1
   \   00000088   0x2105             MOVS     R1,#+5
   \   0000008A   0x4620             MOV      R0,R4
   \   0000008C   0x.... 0x....      BL       ADC_RegularChannelConfig
    121              ADC_RegularChannelConfig(ADC1, ADC_Channel_6, 2, ADC_SampleTime_55Cycles5);
   \   00000090   0x2305             MOVS     R3,#+5
   \   00000092   0x2202             MOVS     R2,#+2
   \   00000094   0x2106             MOVS     R1,#+6
   \   00000096   0x4620             MOV      R0,R4
   \   00000098   0x.... 0x....      BL       ADC_RegularChannelConfig
    122              ADC_RegularChannelConfig(ADC1, ADC_Channel_7, 3, ADC_SampleTime_55Cycles5);
   \   0000009C   0x2305             MOVS     R3,#+5
   \   0000009E   0x2203             MOVS     R2,#+3
   \   000000A0   0x2107             MOVS     R1,#+7
   \   000000A2   0x4620             MOV      R0,R4
   \   000000A4   0x.... 0x....      BL       ADC_RegularChannelConfig
    123          
    124              //----------------------------------------------------------------------
    125          
    126              /* Enable ADC1 DMA */
    127              //使能ADC1 的DMA
    128              ADC_DMACmd(ADC1, ENABLE);
   \   000000A8   0x2101             MOVS     R1,#+1
   \   000000AA   0x4620             MOV      R0,R4
   \   000000AC   0x.... 0x....      BL       ADC_DMACmd
    129          
    130              /* Enable ADC1 */
    131              //使能ADC
    132              ADC_Cmd(ADC1, ENABLE);
   \   000000B0   0x2101             MOVS     R1,#+1
   \   000000B2   0x4620             MOV      R0,R4
   \   000000B4   0x.... 0x....      BL       ADC_Cmd
    133          
    134              //----------------------------------------------------------------------
    135              //在开始ADC转换之前，需要启动ADC的自校准
    136              /*复位校准寄存器 */
    137              ADC_ResetCalibration(ADC1);
   \   000000B8   0x4620             MOV      R0,R4
   \   000000BA   0x.... 0x....      BL       ADC_ResetCalibration
    138              /*等待校准寄存器复位完成 */
    139              while(ADC_GetResetCalibrationStatus(ADC1));
   \                     ??ADCx_Mode_Config_0: (+1)
   \   000000BE   0x4620             MOV      R0,R4
   \   000000C0   0x.... 0x....      BL       ADC_GetResetCalibrationStatus
   \   000000C4   0x2800             CMP      R0,#+0
   \   000000C6   0xD1FA             BNE.N    ??ADCx_Mode_Config_0
    140          
    141              /* ADC校准 */
    142              ADC_StartCalibration(ADC1);
   \   000000C8   0x4620             MOV      R0,R4
   \   000000CA   0x.... 0x....      BL       ADC_StartCalibration
    143              /* 等待校准完成*/
    144              while(ADC_GetCalibrationStatus(ADC1));
   \                     ??ADCx_Mode_Config_1: (+1)
   \   000000CE   0x4620             MOV      R0,R4
   \   000000D0   0x.... 0x....      BL       ADC_GetCalibrationStatus
   \   000000D4   0x2800             CMP      R0,#+0
   \   000000D6   0xD1FA             BNE.N    ??ADCx_Mode_Config_1
    145          
    146              /* 由于没有采用外部触发，所以使用软件触发ADC转换 */
    147              ADC_SoftwareStartConvCmd(ADC1, DISABLE);
   \   000000D8   0x2100             MOVS     R1,#+0
   \   000000DA   0x4620             MOV      R0,R4
   \   000000DC   0x.... 0x....      BL       ADC_SoftwareStartConvCmd
    148          }
   \   000000E0   0xB010             ADD      SP,SP,#+64
   \   000000E2   0xBD10             POP      {R4,PC}          ;; return
    149          
    150          
    151          /*******************************************************************************
    152           * 名    称： Bsp_ADC_Init
    153           * 功    能： ADC初始化
    154           * 入口参数： 无
    155           * 出口参数： 无
    156           * 作　 　者： 无名沈.
    157           * 创建日期： 2015-06-25
    158           * 修    改：
    159           * 修改日期：
    160           * 备    注：
    161           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    162          void Bsp_ADC_Init(void)
    163          {
   \                     Bsp_ADC_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    164          	ADCx_GPIO_Config();
   \   00000002   0x.... 0x....      BL       ADCx_GPIO_Config
    165          	ADCx_Mode_Config();
   \   00000006   0xE8BD 0x4001      POP      {R0,LR}
   \   0000000A   0x....             B.N      ADCx_Mode_Config
    166          }
    167          
    168          /*******************************************************************************
    169           * 名    称： ADC1Convert_Begin
    170           * 功    能： 开始ADC1的采集和转换
    171           * 入口参数： 无
    172           * 出口参数： 无
    173           * 作　 　者： 无名沈.
    174           * 创建日期： 2015-06-25
    175           * 修    改：
    176           * 修改日期：
    177           * 备    注：
    178           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    179          void ADC1Convert_Begin(void)
    180          {
    181              ADC_SoftwareStartConvCmd(ADC1, ENABLE);
   \                     ADC1Convert_Begin: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0x....             LDR.N    R0,??DataTable4_4  ;; 0x40012400
   \   00000004   0x.... 0x....      B.W      ADC_SoftwareStartConvCmd
    182          }
    183          
    184          
    185          /*******************************************************************************
    186           * 名    称： ADC1Convert_Stop
    187           * 功    能： 停止ADC1的采集和转换
    188           * 入口参数： 无
    189           * 出口参数： 无
    190           * 作　 　者： 无名沈.
    191           * 创建日期： 2015-06-25
    192           * 修    改：
    193           * 修改日期：
    194           * 备    注：
    195           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    196          void ADC1Convert_Stop(void)
    197          {
    198              ADC_SoftwareStartConvCmd(ADC1, DISABLE);
   \                     ADC1Convert_Stop: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0x....             LDR.N    R0,??DataTable4_4  ;; 0x40012400
   \   00000004   0x.... 0x....      B.W      ADC_SoftwareStartConvCmd
    199          }
    200          
    201          
    202          /*******************************************************************************
    203           * 名    称： Get_AD_AverageValue
    204           * 功    能： 获取AD采集的平均值
    205           * 入口参数： 无
    206           * 出口参数： 无
    207           * 作　 　者： 无名沈.
    208           * 创建日期： 2015-06-25
    209           * 修    改：
    210           * 修改日期：
    211           * 备    注：
    212           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    213          void Get_AD_AverageValue(void)
    214          {
    215              uint8_t count;
    216              uint8_t i;
    217              uint32_t sum = 0;
   \                     Get_AD_AverageValue: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
    218          
    219              for(i=0;i<Channel_Number;i++) {
   \   00000002   0x4601             MOV      R1,R0
   \   00000004   0xE00B             B.N      ??Get_AD_AverageValue_0
    220                  for(count=0;count<Channel_Times;count++) {
    221                      sum += ADC_Value[count][i];
   \                     ??Get_AD_AverageValue_1: (+1)
   \   00000006   0xF832 0x2011      LDRH     R2,[R2, R1, LSL #+1]
   \   0000000A   0x1810             ADDS     R0,R2,R0
    222                  }
   \   0000000C   0x2301             MOVS     R3,#+1
   \                     ??Get_AD_AverageValue_2: (+1)
   \   0000000E   0x....             LDR.N    R2,??DataTable4_3
   \   00000010   0x2B00             CMP      R3,#+0
   \   00000012   0xD0F8             BEQ.N    ??Get_AD_AverageValue_1
    223                  ADC_AverageValue[i] = sum/Channel_Times;
   \   00000014   0xEB02 0x0241      ADD      R2,R2,R1, LSL #+1
   \   00000018   0x8110             STRH     R0,[R2, #+8]
    224                  sum = 0;
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x1C49             ADDS     R1,R1,#+1
   \                     ??Get_AD_AverageValue_0: (+1)
   \   0000001E   0x2903             CMP      R1,#+3
   \   00000020   0xDA01             BGE.N    ??Get_AD_AverageValue_3
   \   00000022   0x4603             MOV      R3,R0
   \   00000024   0xE7F3             B.N      ??Get_AD_AverageValue_2
    225              }
    226          }
   \                     ??Get_AD_AverageValue_3: (+1)
   \   00000026   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x40010800         DC32     0x40010800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x40020008         DC32     0x40020008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x4001244C         DC32     0x4001244c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x........         DC32     ADC_Value

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x40012400         DC32     0x40012400
    227          
    228          /*******************************************************************************
    229           *              end of file                                                    *
    230           *******************************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   ADC1Convert_Begin
         0   -> ADC_SoftwareStartConvCmd
       0   ADC1Convert_Stop
         0   -> ADC_SoftwareStartConvCmd
       8   ADCx_GPIO_Config
         8   -> GPIO_Init
         8   -> RCC_AHBPeriphClockCmd
         8   -> RCC_APB2PeriphClockCmd
      72   ADCx_Mode_Config
        72   -> ADC_Cmd
        72   -> ADC_DMACmd
        72   -> ADC_DeInit
        72   -> ADC_GetCalibrationStatus
        72   -> ADC_GetResetCalibrationStatus
        72   -> ADC_Init
        72   -> ADC_RegularChannelConfig
        72   -> ADC_ResetCalibration
        72   -> ADC_SoftwareStartConvCmd
        72   -> ADC_StartCalibration
        72   -> DMA_Cmd
        72   -> DMA_DeInit
        72   -> DMA_Init
        72   -> RCC_ADCCLKConfig
       8   Bsp_ADC_Init
         8   -> ADCx_GPIO_Config
         0   -> ADCx_Mode_Config
       0   Get_AD_AverageValue


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       8  ADC1Convert_Begin
       8  ADC1Convert_Stop
      16  ADC_Value
          ADC_AverageValue
      42  ADCx_GPIO_Config
     228  ADCx_Mode_Config
      12  Bsp_ADC_Init
      40  Get_AD_AverageValue

 
  16 bytes in section .bss
 358 bytes in section .text
 
 358 bytes of CODE memory
  16 bytes of DATA memory

Errors: none
Warnings: none

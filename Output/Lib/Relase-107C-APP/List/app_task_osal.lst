###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       26/Dec/2017  20:53:41
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  F:\iar\NC199B-100\Library\Source\APP\Tasks\app_task_osal.c
#    Command line =  
#        F:\iar\NC199B-100\Library\Source\APP\Tasks\app_task_osal.c -D
#        USE_STDPERIPH_DRIVER -D STM32F10X_CL -D RELEASE -D IMAGE_A -D
#        STM32F103RC -D STM32_FLASH_SIZE=256 -D HSE_VALUE=25000000 -lCN
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Relase-107C-APP\List\
#        -o
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Relase-107C-APP\Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        F:\iar\NC199B-100\Library\Project\IAR\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\User\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\AES\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Config\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\OS\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\User\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Source\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Port\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\OS\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Config\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Protocol\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Iap\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Driver\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\IAR\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\uCOS-III\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\CMSIS\CM3\CoreSupport\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\CMSIS\CM3\DeviceSupport\ST\STM32F10x\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\STM32F10x_StdPeriph_Driver\inc\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-CPU\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-CPU\ARM-Cortex-M3\IAR\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-LIB\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\OSAL\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\OSAL\OS\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\OS\uCOS-III\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\Source\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\Source\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\FatFs\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\FatFs\option\ -Om
#        --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Relase-107C-APP\List\app_task_osal.lst
#    Object file  =  
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Relase-107C-APP\Obj\app_task_osal.o
#
###############################################################################

F:\iar\NC199B-100\Library\Source\APP\Tasks\app_task_osal.c
      1          /*******************************************************************************
      2           *   Revised:        All copyrights reserved to redmorningcn.
      3           *   Revision:       v1.0
      4           *   Writer:	     redmorningcn.
      5           *
      6           *   Description:    双击选中 store 按 Ctrl + H, 钩选 Match the case, Replace with
      7           *                   输入您要的名字，点击 Replace All
      8           *                   双击选中 Store 按 Ctrl + H, 钩选 Match the case, Replace with
      9           *                   输入您要的名字，点击 Replace All
     10           *                   双击选中 STORE 按 Ctrl + H, 钩选 Match the case, Replace with
     11           *                   输入您要的名字，点击 Replace All
     12           *                   在 app_cfg.h 中指定本任务的 优先级  （ APP_TASK_STORE_PRIO ）
     13           *                                            和 任务堆栈（ APP_TASK_STORE_STK_SIZE ）大小
     14           *                   在 app.h 中声明本任务的     创建函数（ void  App_TaskStoreCreate(void) ）
     15           *                                            和 看门狗标志位 （ WDTFLAG_Store ）
     16           *
     17           *   Notes:
     18           *     				E-mail: redmorningcn@qq.com
     19           *
     20           *******************************************************************************/
     21          
     22          /*******************************************************************************
     23           * INCLUDES
     24           */
     25          #define  SNL_APP_SOURCE
     26          #include <includes.h>
     27          #include <app_ctrl.h>
     28          #include <os.h>
     29          #include <osal.h>
     30          #include <osal_event.h>
     31          #include <os_cfg_app.h>
     32          
     33          #ifdef VSC_INCLUDE_SOURCE_FILE_NAMES
     34          const  CPU_CHAR  *app_task_osal__c = "$Id: $";
     35          #endif
     36          
     37          #define APP_TASK_OSAL_EN     DEF_ENABLED
     38          #if APP_TASK_OSAL_EN == DEF_ENABLED
     39          /*******************************************************************************
     40           * CONSTANTS
     41           */
     42          
     43          /*******************************************************************************
     44           * MACROS
     45           */
     46          #define  OSAL_CYCLE_TIME_TICKS     (OS_CFG_TICK_RATE_HZ / 100u)
     47          
     48          /*******************************************************************************
     49           * TYPEDEFS
     50           */
     51          #if ( OSAL_EN == DEF_ENABLED )
     52          /***********************************************
     53          * 描述： 任务控制块（TCB）
     54          */

   \                                 In section .bss, align 4
     55          static  OS_TCB   AppTaskOsalTCB;
   \                     AppTaskOsalTCB:
   \   00000000                      DS8 184
   \   000000B8                      DS8 512
     56          
     57          /***********************************************
     58          * 描述： 任务堆栈（STACKS）
     59          */
     60          static  CPU_STK  AppTaskOsalStk[ APP_TASK_OSAL_STK_SIZE ];
     61          #endif
     62          /*******************************************************************************
     63           * LOCAL VARIABLES
     64           */
     65          
     66          /*******************************************************************************
     67           * GLOBAL VARIABLES
     68           */
     69          /*******************************************************************************
     70           * LOCAL FUNCTIONS
     71           */
     72          static  void    AppTaskOsal             (void *p_arg);
     73          static  void    APP_OsalInit            (void);
     74          
     75          /*******************************************************************************
     76           * GLOBAL FUNCTIONS
     77           */
     78          
     79          /*******************************************************************************
     80           * EXTERN VARIABLES
     81           */
     82          extern void     OSAL_TaskCreateHook     (void);
     83              
     84           /*******************************************************************************
     85           * EXTERN FUNCTIONS
     86           */
     87          
     88          /*******************************************************************************/
     89          
     90          /*******************************************************************************
     91           * 名    称： App_TaskOsalCreate
     92           * 功    能： **任务创建
     93           * 入口参数： 无
     94           * 出口参数： 无
     95           * 作　　者： wumingshen.
     96           * 创建日期： 2015-02-05
     97           * 修    改：
     98           * 修改日期：
     99           * 备    注： 任务创建函数需要在app.h文件中声明
    100           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    101          void  App_TaskOsalCreate(void)
    102          {
   \                     App_TaskOsalCreate: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB08B             SUB      SP,SP,#+44
    103          #if ( OSAL_EN == DEF_ENABLED )
    104              OS_ERR  err;
    105          
    106              /***********************************************
    107              * 描述： 任务创建
    108              */
    109              OSTaskCreate((OS_TCB     *)&AppTaskOsalTCB,                 // 任务控制块  （当前文件中定义）
    110                           (CPU_CHAR   *)"App Task Osal",                 // 任务名称
    111                           (OS_TASK_PTR ) AppTaskOsal,                    // 任务函数指针（当前文件中定义）
    112                           (void       *) 0,                              // 任务函数参数
    113                           (OS_PRIO     ) APP_TASK_OSAL_PRIO,             // 任务优先级，不同任务优先级可以相同，0 < 优先级 < OS_CFG_PRIO_MAX - 2（app_cfg.h中定义）
    114                           (CPU_STK    *)&AppTaskOsalStk[0],              // 任务栈顶
    115                           (CPU_STK_SIZE) APP_TASK_OSAL_STK_SIZE / 10,    // 任务栈溢出报警值
    116                           (CPU_STK_SIZE) APP_TASK_OSAL_STK_SIZE,         // 任务栈大小（CPU数据宽度 * 8 * size = 4 * 8 * size(字节)）（app_cfg.h中定义）
    117                           (OS_MSG_QTY  ) 5u,                             // 可以发送给任务的最大消息队列数量
    118                           (OS_TICK     ) 0u,                             // 相同优先级任务的轮循时间（ms），0为默认
    119                           (void       *) 0,                              // 是一个指向它被用作一个TCB扩展用户提供的存储器位置
    120                           (OS_OPT      )(OS_OPT_TASK_STK_CHK |           // 允许堆栈检查该任务
    121                                          OS_OPT_TASK_STK_CLR),           // 创建任务时堆栈清零
    122                           (OS_ERR     *)&err);                           // 指向错误代码的指针，用于创建结果处理
   \   00000004   0x....             LDR.N    R0,??DataTable2
   \   00000006   0xA909             ADD      R1,SP,#+36
   \   00000008   0x9108             STR      R1,[SP, #+32]
   \   0000000A   0x2103             MOVS     R1,#+3
   \   0000000C   0x9107             STR      R1,[SP, #+28]
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0x9106             STR      R1,[SP, #+24]
   \   00000012   0x9105             STR      R1,[SP, #+20]
   \   00000014   0x2105             MOVS     R1,#+5
   \   00000016   0x9104             STR      R1,[SP, #+16]
   \   00000018   0x2180             MOVS     R1,#+128
   \   0000001A   0x9103             STR      R1,[SP, #+12]
   \   0000001C   0x210C             MOVS     R1,#+12
   \   0000001E   0x9102             STR      R1,[SP, #+8]
   \   00000020   0xF100 0x01B8      ADD      R1,R0,#+184
   \   00000024   0x9101             STR      R1,[SP, #+4]
   \   00000026   0x211D             MOVS     R1,#+29
   \   00000028   0x9100             STR      R1,[SP, #+0]
   \   0000002A   0x2300             MOVS     R3,#+0
   \   0000002C   0x.... 0x....      ADR.W    R2,AppTaskOsal
   \   00000030   0x.... 0x....      ADR.W    R1,?_0
   \   00000034   0x.... 0x....      BL       OSTaskCreate
    123          #else
    124          #endif
    125          }
   \   00000038   0xB00B             ADD      SP,SP,#+44
   \   0000003A   0xBD00             POP      {PC}             ;; return
    126          
    127          /*******************************************************************************
    128           * 名    称： AppTaskOsal
    129           * 功    能： 控制任务
    130           * 入口参数： p_arg - 由任务创建函数传入
    131           * 出口参数： 无
    132           * 作　　者： wumingshen.
    133           * 创建日期： 2015-02-05
    134           * 修    改：
    135           * 修改日期：
    136           *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    137          static  void  AppTaskOsal (void *p_arg)
    138          {    
   \                     AppTaskOsal: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    139          #if ( OSAL_EN == DEF_ENABLED )
    140              OS_ERR          err;
    141          //    INT32U          ticks;
    142              static INT32S   dly     = OSAL_CYCLE_TIME_TICKS;
    143              
    144              osalEvt         events;
    145              halIntState_t   cpu_sr;
    146              
    147              /***********************************************
    148              * 描述： 任务初始化
    149              */
    150              APP_OsalInit();
   \   00000002   0x.... 0x....      BL       APP_OsalInit
    151              
    152              /***********************************************
    153              * 描述：OSAL系统初始化
    154              */
    155              osal_init_system();
   \   00000006   0x.... 0x....      BL       osal_init_system
    156              
    157              /***********************************************
    158              * 描述： OSAL创建任务
    159              */
    160              OSAL_TaskCreateHook();
   \   0000000A   0x.... 0x....      BL       OSAL_TaskCreateHook
    161              
    162              /***********************************************
    163              * 描述：OSAL任务初始化
    164              */
    165              osal_Task_init();
   \   0000000E   0x.... 0x....      BL       osal_Task_init
   \   00000012   0x....             LDR.N    R4,??DataTable2_1
    166              
    167              /***********************************************
    168              * 描述： Task body, always written as an infinite loop.
    169              *        OSAL任务查询和执行
    170              */
    171              while (DEF_TRUE) {
    172                  /***********************************************
    173                  * 描述： 得到系统当前时间
    174                  */
    175          //        ticks = OSTimeGet(&err);
    176                  
    177          #if (UCOS_EN == DEF_ENABLED ) && ( OS_VERSION > 30000U )
    178                  BOOL    ret = BSP_OS_SemWait(&Osal_EvtSem, dly);    // 等待信号量
   \                     ??AppTaskOsal_0: (+1)
   \   00000014   0x....             LDR.N    R0,??DataTable2_2
   \   00000016   0x6801             LDR      R1,[R0, #+0]
   \   00000018   0x....             LDR.N    R0,??DataTable2_3
   \   0000001A   0x.... 0x....      BL       BSP_OS_SemWait
    179          #endif
    180                  do {
    181                      /***********************************************
    182                      * 描述：用于需要系统总是查询的的事件，如：
    183                      *       串口接收事件，按钮扫描事件等
    184                      */
    185                      //HAL_ProcessPoll();
    186                      
    187                      /***********************************************
    188                      * 描述：查找是否有任务产生事件
    189                      */
    190                      TaskActive = osalNextActiveTask();
   \                     ??AppTaskOsal_1: (+1)
   \   0000001E   0x.... 0x....      BL       osalNextActiveTask
   \   00000022   0x6020             STR      R0,[R4, #+0]
    191                      
    192                      /***********************************************
    193                      * 描述：如果当前任务有事件发生
    194                      */
    195                      if ( TaskActive ) {
   \   00000024   0x2800             CMP      R0,#+0
   \   00000026   0xD027             BEQ.N    ??AppTaskOsal_2
    196                          CPU_CRITICAL_ENTER();
   \   00000028   0x.... 0x....      BL       CPU_SR_Save
   \   0000002C   0x4606             MOV      R6,R0
   \   0000002E   0x.... 0x....      BL       CPU_IntDisMeasStart
    197                          events = TaskActive->events;
   \   00000032   0x6820             LDR      R0,[R4, #+0]
   \   00000034   0x6945             LDR      R5,[R0, #+20]
    198                          
    199                          /***********************************************
    200                          * 描述：清除当前任务事件
    201                          */
    202                          TaskActive->events = 0;
   \   00000036   0x2100             MOVS     R1,#+0
   \   00000038   0x6141             STR      R1,[R0, #+20]
    203                          CPU_CRITICAL_EXIT();
   \   0000003A   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   0000003E   0xB2F6             UXTB     R6,R6
   \   00000040   0x4630             MOV      R0,R6
   \   00000042   0x.... 0x....      BL       CPU_SR_Restore
    204                          
    205                          /***********************************************
    206                          * 描述：再次检查事件是否存在
    207                          */
    208                          if ( events != 0 ) {
   \   00000046   0x2D00             CMP      R5,#+0
   \   00000048   0xD016             BEQ.N    ??AppTaskOsal_2
    209                              /***********************************************
    210                              * 描述：判断任务函数是否存在
    211                              */
    212                              if ( TaskActive->pfnEventProcessor ) {
   \   0000004A   0x6820             LDR      R0,[R4, #+0]
   \   0000004C   0x6882             LDR      R2,[R0, #+8]
   \   0000004E   0x0011             MOVS     R1,R2
   \   00000050   0xD012             BEQ.N    ??AppTaskOsal_2
    213                                  /***********************************************
    214                                  * 描述：执行任务处理高优先级事件并返回未处理完的事件
    215                                  *       事件值越小，优先级越高
    216                                  */
    217                                  events = (TaskActive->pfnEventProcessor)( TaskActive->taskID, events );
   \   00000052   0x4629             MOV      R1,R5
   \   00000054   0x68C0             LDR      R0,[R0, #+12]
   \   00000056   0x4790             BLX      R2
   \   00000058   0x4605             MOV      R5,R0
    218                                  
    219                                  /***********************************************
    220                                  * 描述：添加返回未处理完的事件到当前任务，等待下次执行
    221                                  */
    222                                  CPU_CRITICAL_ENTER();
   \   0000005A   0x.... 0x....      BL       CPU_SR_Save
   \   0000005E   0x4606             MOV      R6,R0
   \   00000060   0x.... 0x....      BL       CPU_IntDisMeasStart
    223                                  TaskActive->events |= events;
   \   00000064   0x6820             LDR      R0,[R4, #+0]
   \   00000066   0x6941             LDR      R1,[R0, #+20]
   \   00000068   0x4329             ORRS     R1,R5,R1
   \   0000006A   0x6141             STR      R1,[R0, #+20]
    224                                  CPU_CRITICAL_EXIT();
   \   0000006C   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   00000070   0xB2F6             UXTB     R6,R6
   \   00000072   0x4630             MOV      R0,R6
   \   00000074   0x.... 0x....      BL       CPU_SR_Restore
    225                              }
    226                          }
    227                      }
    228                  } while (TaskActive);                           // 等待所有任务执行完
   \                     ??AppTaskOsal_2: (+1)
   \   00000078   0x6820             LDR      R0,[R4, #+0]
   \   0000007A   0x2800             CMP      R0,#+0
   \   0000007C   0xD1CF             BNE.N    ??AppTaskOsal_1
   \   0000007E   0xE7C9             B.N      ??AppTaskOsal_0
    229                  
    230          
    231                  
    232                  /***********************************************
    233                  * 描述： 去除任务运行的时间，等到一个控制周期里剩余需要延时的时间
    234                  */
    235          //        dly   = OSAL_CYCLE_TIME_TICKS - ( OSTimeGet(&err) - ticks );
    236          //        if ( dly  <= 0 ) {
    237          //            dly   = 1;
    238          //        }else if(dly > OSAL_CYCLE_TIME_TICKS)
    239          //        {
    240          //            dly   =  OSAL_CYCLE_TIME_TICKS;
    241          //        }       
    242          //        OSTimeDly(dly, OS_OPT_TIME_DLY, &err);
    243              }
    244          #else
    245          #endif
    246          }

   \                                 In section .data, align 4
   \                     ??dly:
   \   00000000   0x0000000A         DC32 10
    247          
    248          /*******************************************************************************
    249           * 名    称： APP_OsalInit
    250           * 功    能： 任务初始化
    251           * 入口参数： 无
    252           * 出口参数： 无
    253           * 作　　者： wumingshen.
    254           * 创建日期： 2015-03-28
    255           * 修    改：
    256           * 修改日期：
    257           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    258          static void APP_OsalInit(void)
    259          {
    260              /***********************************************
    261              * 描述： 在看门狗标志组注册本任务的看门狗标志
    262              */
    263          
    264          }
   \                     APP_OsalInit: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     AppTaskOsalTCB

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x........         DC32     TaskActive

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x........         DC32     ??dly

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x........         DC32     Osal_EvtSem

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x41 0x70          DC8 "App Task Osal"
   \              0x70 0x20    
   \              0x54 0x61    
   \              0x73 0x6B    
   \              0x20 0x4F    
   \              0x73 0x61    
   \              0x6C 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0
    265          
    266          /*******************************************************************************
    267           * 				end of file
    268           *******************************************************************************/
    269          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   APP_OsalInit
      16   AppTaskOsal
        16   -- Indirect call
        16   -> APP_OsalInit
        16   -> BSP_OS_SemWait
        16   -> CPU_IntDisMeasStart
        16   -> CPU_IntDisMeasStop
        16   -> CPU_SR_Restore
        16   -> CPU_SR_Save
        16   -> OSAL_TaskCreateHook
        16   -> osalNextActiveTask
        16   -> osal_Task_init
        16   -> osal_init_system
      48   App_TaskOsalCreate
        48   -> OSTaskCreate


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
      16  ?_0
       2  APP_OsalInit
     128  AppTaskOsal
     696  AppTaskOsalTCB
          AppTaskOsalStk
      60  App_TaskOsalCreate
       4  dly

 
 696 bytes in section .bss
   4 bytes in section .data
 222 bytes in section .text
 
 222 bytes of CODE memory
 700 bytes of DATA memory

Errors: none
Warnings: 1

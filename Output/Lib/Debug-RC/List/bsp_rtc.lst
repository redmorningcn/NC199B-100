###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       23/Nov/2017  13:36:21
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  F:\iar\NC199B-100\Library\Source\BSP\Driver\bsp_rtc.c
#    Command line =  
#        F:\iar\NC199B-100\Library\Source\BSP\Driver\bsp_rtc.c -D
#        USE_STDPERIPH_DRIVER -D _STM32F10X_HD -D STM32F10X_CL -D DEBUG -D
#        STM32F103RC -D STM32_FLASH_SIZE=256 -D HSE_VALUE=25000000 -lCN
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\List\
#        -o
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        F:\iar\NC199B-100\Library\Project\IAR\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\User\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\AES\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Config\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\OS\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\User\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Source\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Port\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\OS\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Config\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Protocol\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Iap\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Driver\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\IAR\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\uCOS-III\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\CMSIS\CM3\CoreSupport\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\CMSIS\CM3\DeviceSupport\ST\STM32F10x\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\STM32F10x_StdPeriph_Driver\inc\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-CPU\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-CPU\ARM-Cortex-M3\IAR\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-LIB\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\OSAL\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\OSAL\OS\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\OS\uCOS-III\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\Source\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\Source\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\FatFs\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\FatFs\option\ -Om
#        --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\List\bsp_rtc.lst
#    Object file  =  
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\Obj\bsp_rtc.o
#
###############################################################################

F:\iar\NC199B-100\Library\Source\BSP\Driver\bsp_rtc.c
      1          /*******************************************************************************
      2           *   Filename:      bsp_rtc.c
      3           *   Revised:       $Date: 2013-06-30
      4           *   Revision:      $V1.0
      5           *   Writer:        wumingshen.
      6           *
      7           *   Description:
      8           *
      9           *   Notes:         STM32F103内部RTC驱动模块
     10           *                  使用RTC可以直接调用bsp_time.c中的函数获取和修改RTC实时时间
     11           *
     12           *   All copyrights reserved to wumingshen
     13           *
     14           *******************************************************************************/
     15          
     16          /*******************************************************************************
     17           * INCLUDES
     18           */
     19          #include <bsp_rtc.h>
     20          
     21          #define BSP_RTC_MODULE_EN  1
     22          #if BSP_RTC_MODULE_EN >  0
     23          
     24          /*******************************************************************************
     25           * 描述： 该模块是否搭载uCOS系统使用
     26           */
     27          #if defined( UCOS_EN )
     28          #undef UCOS_EN
     29          #endif
     30               
     31          #define UCOS_EN  1
     32          
     33          /*******************************************************************************
     34           * 描述： 允许时钟64分频到PC13脚输出时钟
     35           */
     36          #define RTCClockOutput_Enable  /* RTC Clock/64 is output on tamper pin(PC.13) */
     37          
     38          /*******************************************************************************
     39           * TYPEDEFS
     40           */
     41          
     42          #if (UCOS_EN == ENABLE)
     43              #if OS_VERSION > 30000U
     44              static  OS_SEM                   RtcSem;    // 信号量
     45              #else
     46              static  OS_EVENT                *RtcSem;    // 信号量
     47              #endif
     48          #endif
     49          
     50          //============================================================================//
     51          
     52          /*******************************************************************************
     53          * 名    称： BSP_RTC_Alarm_ISR_Handler
     54          * 功    能： RTC报警中断服务函数
     55          * 入口参数： 无
     56          * 出口参数： 无
     57          * 作　 　者： 无名沈
     58          * 创建日期： 2014-08-18
     59          * 修    改：
     60          * 修改日期：
     61          * 备    注：
     62          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     63          void BSP_RTC_Alarm_ISR_Handler (void)
     64          {
     65          //	if(RTC_GetITStatus(RTC_IT_ALR) != RESET) {
     66          //        EXTI_ClearITPendingBit(EXTI_Line17);		// 清EXTI_Line17挂起位
     67          //        if(PWR_GetFlagStatus(PWR_FLAG_WU) != RESET){// 检查唤醒标志是否设置
     68          //            PWR_ClearFlag(PWR_FLAG_WU);				// 清除唤醒标志
     69          //        }
     70          //        RTC_WaitForLastTask();						// 等待最后一条命令写完成
     71          //
     72          //        RTC_ClearITPendingBit(RTC_IT_ALR);			// 清RTC报警中断挂起
     73          //        RTC_WaitForLastTask();						// 等待最后一条命令写完成
     74          //    }
     75          }
   \                     BSP_RTC_Alarm_ISR_Handler: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     76          
     77          /*******************************************************************************
     78          * 名    称： RTC_Configuration
     79          * 功    能： RTC配置函数
     80          * 入口参数： 无
     81          * 出口参数： 无
     82          * 作　 　者： 无名沈
     83          * 创建日期： 2014-08-18
     84          * 修    改：
     85          * 修改日期：
     86          * 备    注：
     87          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     88          void RTC_Configuration(void)
     89          {
   \                     RTC_Configuration: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     90              /* Enable PWR and BKP clocks */
     91              RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR | RCC_APB1Periph_BKP, ENABLE);
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0xF04F 0x50C0      MOV      R0,#+402653184
   \   00000008   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
     92          
     93              /* Allow access to BKP Domain */
     94              PWR_BackupAccessCmd(ENABLE);
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0x.... 0x....      BL       PWR_BackupAccessCmd
     95          
     96              /* Reset Backup Domain */
     97              BKP_DeInit();
   \   00000012   0x.... 0x....      BL       BKP_DeInit
     98          
     99              /* Enable LSE */
    100              RCC_LSEConfig(RCC_LSE_ON);
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0x.... 0x....      BL       RCC_LSEConfig
    101              /* Wait till LSE is ready */
    102              while (RCC_GetFlagStatus(RCC_FLAG_LSERDY) == RESET){}
   \                     ??RTC_Configuration_0: (+1)
   \   0000001C   0x2041             MOVS     R0,#+65
   \   0000001E   0x.... 0x....      BL       RCC_GetFlagStatus
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD0FA             BEQ.N    ??RTC_Configuration_0
    103          
    104              /* Select LSE as RTC Clock Source */
    105              RCC_RTCCLKConfig(RCC_RTCCLKSource_LSE);
   \   00000026   0xF44F 0x7080      MOV      R0,#+256
   \   0000002A   0x.... 0x....      BL       RCC_RTCCLKConfig
    106              //RCC_RTCCLKConfig(RCC_RTCCLKSource_LSI);
    107          
    108              /* Enable RTC Clock */
    109              RCC_RTCCLKCmd(ENABLE);
   \   0000002E   0x2001             MOVS     R0,#+1
   \   00000030   0x.... 0x....      BL       RCC_RTCCLKCmd
    110          
    111              /* Wait for RTC registers synchronization */
    112              RTC_WaitForSynchro();
   \   00000034   0x.... 0x....      BL       RTC_WaitForSynchro
    113          
    114              /* Wait until last write operation on RTC registers has finished */
    115              RTC_WaitForLastTask();
   \   00000038   0x.... 0x....      BL       RTC_WaitForLastTask
    116          
    117              /* Enable the RTC Second */
    118          	//RTC_ITConfig(RTC_IT_SEC, ENABLE);
    119          
    120          	/* Wait until last write operation on RTC registers has finished */
    121              //RTC_WaitForLastTask();
    122          
    123              /* Set RTC prescaler: set RTC period to 1sec */
    124              RTC_SetPrescaler(32768); /* RTC period = RTCCLK/RTC_PR = (32.768 KHz)/(32767+1) */
   \   0000003C   0xF44F 0x4000      MOV      R0,#+32768
   \   00000040   0x.... 0x....      BL       RTC_SetPrescaler
    125          
    126              /* Wait until last write operation on RTC registers has finished */
    127              RTC_WaitForLastTask();
   \   00000044   0xE8BD 0x4001      POP      {R0,LR}
   \   00000048   0x.... 0x....      B.W      RTC_WaitForLastTask
    128          }
    129          
    130          
    131          /*******************************************************************************
    132          * 名    称： BSP_RTC_GetTime
    133          * 功    能： RTC获取实时时间
    134          * 入口参数： INT08U *time ：大小为3个字节的数组；time[0]:时 time[1]:分 time[2]:秒
    135          * 出口参数： TRUE ： 时间获取成功
    136          * 作　 　者： 无名沈
    137          * 创建日期： 2014-08-18
    138          * 修    改：
    139          * 修改日期：
    140          * 备    注：
    141          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    142          BOOL BSP_RTC_GetTime( INT08U *time )
    143          {
   \                     BSP_RTC_GetTime: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    144              INT32U TimeCnt;
    145          
    146          #if (UCOS_EN == ENABLE)
    147          #if OS_VERSION > 30000U
    148              CPU_BOOLEAN err;
    149              err = BSP_OS_SemWait(&RtcSem,1000);             // 等待信号量
    150              if ( err != OS_ERR_NONE )
    151                  return FALSE;
    152          #else
    153              INT08U   err;
    154              OSSemPend(RtcSem,1000,&err);                    // 信号量
    155              if ( err != OS_ERR_NONE )
    156                  return FALSE;
    157          #endif
    158          #endif
    159              /* Display current time */
    160              TimeCnt = RTC_GetCounter();
   \   00000004   0x.... 0x....      BL       RTC_GetCounter
    161          
    162              /* Compute  hours */
    163              *time++ = TimeCnt / 3600 % 24;
   \   00000008   0xF44F 0x6161      MOV      R1,#+3600
   \   0000000C   0xFBB0 0xF1F1      UDIV     R1,R0,R1
   \   00000010   0x2218             MOVS     R2,#+24
   \   00000012   0xFBB1 0xF2F2      UDIV     R2,R1,R2
   \   00000016   0xEB02 0x0342      ADD      R3,R2,R2, LSL #+1
   \   0000001A   0xEBA1 0x02C3      SUB      R2,R1,R3, LSL #+3
   \   0000001E   0x7022             STRB     R2,[R4, #+0]
    164              /* Compute minutes */
    165              *time++ = (TimeCnt % 3600) / 60;
   \   00000020   0xF44F 0x6261      MOV      R2,#+3600
   \   00000024   0xFB02 0x0011      MLS      R0,R2,R1,R0
   \   00000028   0x213C             MOVS     R1,#+60
   \   0000002A   0xFBB0 0xF1F1      UDIV     R1,R0,R1
   \   0000002E   0x7061             STRB     R1,[R4, #+1]
    166              /* Compute seconds */
    167              *time++ = (TimeCnt % 3600) % 60;
   \   00000030   0xEBC1 0x1201      RSB      R2,R1,R1, LSL #+4
   \   00000034   0xEBA0 0x0082      SUB      R0,R0,R2, LSL #+2
   \   00000038   0x70A0             STRB     R0,[R4, #+2]
    168          
    169          #if (UCOS_EN == ENABLE)
    170          
    171          #if OS_VERSION > 30000U
    172              BSP_OS_SemPost(&RtcSem);                     // 发送信号量
    173          #else
    174              OSSemPost(RtcSem);                              // 信号量
    175          #endif
    176          
    177          #endif
    178          
    179              return TRUE;
   \   0000003A   0x2001             MOVS     R0,#+1
   \   0000003C   0xBD10             POP      {R4,PC}          ;; return
    180          }
    181          
    182          
    183          /*******************************************************************************
    184          * 名    称： BSP_RTC_SetTime
    185          * 功    能： 设置RTC的时间
    186          * 入口参数： INT08U *time ：大小为3个字节的数组；time[0]:时 time[1]:分 time[2]:秒
    187          * 出口参数： 无
    188          * 作　 　者： 无名沈
    189          * 创建日期： 2014-08-18
    190          * 修    改：
    191          * 修改日期：
    192          * 备    注：
    193          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    194          BOOL BSP_RTC_SetTime(INT08U *time)
    195          {
   \                     BSP_RTC_SetTime: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    196              INT32U  cnts;
    197          
    198          #if (UCOS_EN == ENABLE)
    199              #if OS_VERSION > 30000U
    200                   CPU_BOOLEAN err;
    201                   err = BSP_OS_SemWait(&RtcSem,1000);           // 等待信号量
    202                   if ( err != OS_ERR_NONE )
    203                    return FALSE;
    204              #else
    205                  INT08U       err;
    206                  OSSemPend(RtcSem,1000,&err);                   // 等待信号量
    207                  if ( err != OS_ERR_NONE )
    208                    return FALSE;
    209              #endif
    210          #endif
    211          
    212          
    213            /* Wait until last write operation on RTC registers has finished */
    214            RTC_WaitForLastTask();
   \   00000004   0x.... 0x....      BL       RTC_WaitForLastTask
    215          
    216            cnts  = time[0] * 3600 + time[1] * 60 + time[2];
    217          
    218            /* Change the current time */
    219            RTC_SetCounter(cnts);
   \   00000008   0x7820             LDRB     R0,[R4, #+0]
   \   0000000A   0xF44F 0x6161      MOV      R1,#+3600
   \   0000000E   0x7862             LDRB     R2,[R4, #+1]
   \   00000010   0xEBC2 0x1302      RSB      R3,R2,R2, LSL #+4
   \   00000014   0x009A             LSLS     R2,R3,#+2
   \   00000016   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   0000001A   0x78A1             LDRB     R1,[R4, #+2]
   \   0000001C   0x1808             ADDS     R0,R1,R0
   \   0000001E   0x.... 0x....      BL       RTC_SetCounter
    220            /* Wait until last write operation on RTC registers has finished */
    221            RTC_WaitForLastTask();
   \   00000022   0x.... 0x....      BL       RTC_WaitForLastTask
    222          
    223          #if (UCOS_EN == ENABLE)
    224          #if OS_VERSION > 30000U
    225              BSP_OS_SemPost(&RtcSem);                        // 发送信号量
    226          #else
    227              INT08U       err;
    228              OSSemPost(RtcSem);                              // 发送信号量
    229          #endif
    230          #endif
    231            return TRUE;
   \   00000026   0x2001             MOVS     R0,#+1
   \   00000028   0xBD10             POP      {R4,PC}          ;; return
    232          }
    233          
    234          
    235          /*******************************************************************************
    236          * 名    称： BSP_RTC_DispTime
    237          * 功    能： RTC 实时时间显示
    238          * 入口参数： 无
    239          * 出口参数： 无
    240          * 作　 　者： 无名沈
    241          * 创建日期： 2014-08-18
    242          * 修    改：
    243          * 修改日期：
    244          * 备    注：
    245          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    246          void BSP_RTC_DispTime(void)
    247          {
   \                     BSP_RTC_DispTime: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    248              INT08U TimeBuf[3];
    249          
    250          	BSP_RTC_GetTime(TimeBuf);
   \   00000002   0x4668             MOV      R0,SP
   \   00000004   0x.... 0x....      BL       BSP_RTC_GetTime
    251          
    252          //    GUI_SetDrawMode(GUI_DM_XOR);
    253          //    GUI_SetFont(&GUI_FontComic18B_ASCII);
    254          //
    255          //    GUI_DispDecAt   (TimeBuf[0],    LCD_XSIZE - 20 * 8, LCD_YSIZE - 20, 2);
    256          //    GUI_DispStringAt(":",           LCD_XSIZE - 20 * 6, LCD_YSIZE - 20);
    257          //    GUI_DispDecAt   (TimeBuf[1],    LCD_XSIZE - 20 * 5, LCD_YSIZE - 20, 2);
    258          //    GUI_DispStringAt(":",           LCD_XSIZE - 20 * 3, LCD_YSIZE - 20);
    259          //    GUI_DispDecAt   (TimeBuf[2],    LCD_XSIZE - 20 * 2, LCD_YSIZE - 20, 2);
    260              //UartPrintf(COMM_PORT_MSG, "当前时间: %0.2d:%0.2d:%0.2d\r\n", TimeBuf[0], TimeBuf[1], TimeBuf[2]);
    261          }
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
    262          
    263          
    264          /*******************************************************************************
    265          * 名    称： BSP_RTC_Init
    266          * 功    能： RTC初始化函数
    267          * 入口参数： 无
    268          * 出口参数： TRUE : 初始化成功
    269          * 作　 　者： 无名沈
    270          * 创建日期： 2014-08-18
    271          * 修    改：
    272          * 修改日期：
    273          * 备    注：
    274          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    275          BOOL BSP_RTC_Init(void)
    276          {
   \                     BSP_RTC_Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    277              if (BKP_ReadBackupRegister(BKP_DR1) != 0xA5A5) {
   \   00000004   0xF24A 0x54A5      MOVW     R4,#+42405
   \   00000008   0x2004             MOVS     R0,#+4
   \   0000000A   0x.... 0x....      BL       BKP_ReadBackupRegister
   \   0000000E   0x42A0             CMP      R0,R4
   \   00000010   0xD00E             BEQ.N    ??BSP_RTC_Init_0
    278                  INT08U time[] = {20, 4, 0};
   \   00000012   0x4668             MOV      R0,SP
   \   00000014   0x.... 0x....      ADR.W    R1,?_0
   \   00000018   0x680A             LDR      R2,[R1, #0]
   \   0000001A   0x6002             STR      R2,[R0, #+0]
    279                  // Backup data register value is not correct or not yet programmed (when
    280                  // the first time the program is executed)
    281          
    282                  //UartPutString(COMM_PORT_MSG, "时钟未配置...\r\n");
    283          
    284                  // RTC Configuration
    285                  RTC_Configuration();
   \   0000001C   0x.... 0x....      BL       RTC_Configuration
    286          
    287                  //UartPutString(COMM_PORT_MSG, "时钟已配置...\r\n");
    288          
    289                  // Adjust time by values entred by the user on the hyperterminal
    290                  BSP_RTC_SetTime(time);
   \   00000020   0x4668             MOV      R0,SP
   \   00000022   0x.... 0x....      BL       BSP_RTC_SetTime
    291          
    292                  BKP_WriteBackupRegister(BKP_DR1, 0xA5A5);
   \   00000026   0x4621             MOV      R1,R4
   \   00000028   0x2004             MOVS     R0,#+4
   \   0000002A   0x.... 0x....      BL       BKP_WriteBackupRegister
   \   0000002E   0xE009             B.N      ??BSP_RTC_Init_1
    293              } else {
    294                  // Check if the Power On Reset flag is set
    295                  if (RCC_GetFlagStatus(RCC_FLAG_PORRST) != RESET) {
   \                     ??BSP_RTC_Init_0: (+1)
   \   00000030   0x207B             MOVS     R0,#+123
   \   00000032   0x.... 0x....      BL       RCC_GetFlagStatus
   \   00000036   0x2800             CMP      R0,#+0
   \   00000038   0xD102             BNE.N    ??BSP_RTC_Init_2
    296                    //UartPutString(COMM_PORT_MSG, "上电复位...\r\n");
    297                  }
    298                  // Check if the Pin Reset flag is set
    299                  else if (RCC_GetFlagStatus(RCC_FLAG_PINRST) != RESET) {
   \   0000003A   0x207A             MOVS     R0,#+122
   \   0000003C   0x.... 0x....      BL       RCC_GetFlagStatus
    300                    //UartPutString(COMM_PORT_MSG, "外部复位...\r\n");
    301                  }
    302          
    303                  //UartPutString(COMM_PORT_MSG, "时钟无需配置...\r\n");
    304                  // Wait for RTC registers synchronization
    305                  RTC_WaitForSynchro();
   \                     ??BSP_RTC_Init_2: (+1)
   \   00000040   0x.... 0x....      BL       RTC_WaitForSynchro
    306          
    307                  // Enable the RTC Second
    308                  //RTC_ITConfig(RTC_IT_SEC, ENABLE);
    309                  // Wait until last write operation on RTC registers has finished
    310                  //RTC_WaitForLastTask();
    311              }
    312          
    313          #ifdef RTCClockOutput_Enable
    314              // Enable PWR and BKP clocks
    315              RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR | RCC_APB1Periph_BKP, ENABLE);
   \                     ??BSP_RTC_Init_1: (+1)
   \   00000044   0x2101             MOVS     R1,#+1
   \   00000046   0xF04F 0x50C0      MOV      R0,#+402653184
   \   0000004A   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
    316          
    317              // Allow access to BKP Domain
    318              PWR_BackupAccessCmd(ENABLE);
   \   0000004E   0x2001             MOVS     R0,#+1
   \   00000050   0x.... 0x....      BL       PWR_BackupAccessCmd
    319          
    320              // Disable the Tamper Pin
    321              BKP_TamperPinCmd(DISABLE); // To output RTCCLK/64 on Tamper pin, the tamper
   \   00000054   0x2000             MOVS     R0,#+0
   \   00000056   0x.... 0x....      BL       BKP_TamperPinCmd
    322                                         //  functionality must be disabled
    323          
    324              // Enable RTC Clock Output on Tamper Pin */
    325              // BKP_RTCOutputConfig(BKP_RTCOutputSource_CalibClock);
    326          #endif
    327          
    328          	/***********************************************
    329          	* 描述：设置中断入口函数及中断优先级
    330          	*/
    331          	BSP_IntVectSet(BSP_INT_ID_RTC, BSP_RTC_Alarm_ISR_Handler);
   \   0000005A   0x....             LDR.N    R1,??DataTable1
   \   0000005C   0x2003             MOVS     R0,#+3
   \   0000005E   0x.... 0x....      BL       BSP_IntVectSet
    332          	BSP_IntEn(BSP_INT_ID_RTC);
   \   00000062   0x2003             MOVS     R0,#+3
   \   00000064   0x.... 0x....      BL       BSP_IntEn
    333          	/***********************************************
    334          	* 描述：允许RTC报警中断
    335          	*/
    336          	RTC_ITConfig(RTC_IT_ALR, ENABLE);				// 允许RTC报警中断
   \   00000068   0x2101             MOVS     R1,#+1
   \   0000006A   0x2002             MOVS     R0,#+2
   \   0000006C   0x.... 0x....      BL       RTC_ITConfig
    337          	RTC_WaitForLastTask();							// 等待最后一条写指令完成
   \   00000070   0x.... 0x....      BL       RTC_WaitForLastTask
    338          
    339              // Clear reset flags
    340              RCC_ClearFlag();
   \   00000074   0x.... 0x....      BL       RCC_ClearFlag
    341          
    342          #if (UCOS_EN == ENABLE)
    343          #if OS_VERSION > 30000U
    344              BSP_OS_SemCreate(&RtcSem,1, "Bsp RtcSem");      // 创建信号量
    345          #else
    346              RtcSem     = OSSemCreate(1);                    // 创建信号量
    347          #endif
    348          #endif
    349              return TRUE;
   \   00000078   0x2001             MOVS     R0,#+1
   \   0000007A   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    350          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     BSP_RTC_Alarm_ISR_Handler

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x14 0x04          DC8 20, 4, 0, 0
   \              0x00 0x00    
    351          
    352          
    353          /*******************************************************************************
    354          * 名    称： RTC_Configuration
    355          * 功    能： RTC配置函数
    356          * 入口参数： 无
    357          * 出口参数： 无
    358          * 作　 　者： 无名沈
    359          * 创建日期： 2014-08-18
    360          * 修    改：
    361          * 修改日期：
    362          * 备    注：
    363          *******************************************************************************/
    364          //void BSP_RTC_Main(void)
    365          //{
    366          //    BSP_RTC_Init();
    367          //
    368          //    while(1){
    369          //        BSP_RTC_DispTime();
    370          //        OSTimeDly(OS_TICKS_PER_SEC);
    371          //        break;
    372          //    }
    373          //}
    374          
    375          /*******************************************************************************
    376           *              end of file                                                    *
    377           *******************************************************************************/
    378          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   BSP_RTC_Alarm_ISR_Handler
       8   BSP_RTC_DispTime
         8   -> BSP_RTC_GetTime
       8   BSP_RTC_GetTime
         8   -> RTC_GetCounter
      16   BSP_RTC_Init
        16   -> BKP_ReadBackupRegister
        16   -> BKP_TamperPinCmd
        16   -> BKP_WriteBackupRegister
        16   -> BSP_IntEn
        16   -> BSP_IntVectSet
        16   -> BSP_RTC_SetTime
        16   -> PWR_BackupAccessCmd
        16   -> RCC_APB1PeriphClockCmd
        16   -> RCC_ClearFlag
        16   -> RCC_GetFlagStatus
        16   -> RTC_Configuration
        16   -> RTC_ITConfig
        16   -> RTC_WaitForLastTask
        16   -> RTC_WaitForSynchro
       8   BSP_RTC_SetTime
         8   -> RTC_SetCounter
         8   -> RTC_WaitForLastTask
       8   RTC_Configuration
         8   -> BKP_DeInit
         8   -> PWR_BackupAccessCmd
         8   -> RCC_APB1PeriphClockCmd
         8   -> RCC_GetFlagStatus
         8   -> RCC_LSEConfig
         8   -> RCC_RTCCLKCmd
         8   -> RCC_RTCCLKConfig
         8   -> RTC_SetPrescaler
         0   -> RTC_WaitForLastTask
         8   -> RTC_WaitForLastTask
         8   -> RTC_WaitForSynchro


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ?_0
       2  BSP_RTC_Alarm_ISR_Handler
      10  BSP_RTC_DispTime
      62  BSP_RTC_GetTime
     124  BSP_RTC_Init
      42  BSP_RTC_SetTime
      76  RTC_Configuration

 
 324 bytes in section .text
 
 324 bytes of CODE memory

Errors: none
Warnings: none

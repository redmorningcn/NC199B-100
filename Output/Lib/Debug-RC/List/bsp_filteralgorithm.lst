###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       16/Nov/2017  10:23:39
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\iar\NC199B-100\Library\Source\BSP\Driver\bsp_filteralgorithm.c
#    Command line =  
#        F:\iar\NC199B-100\Library\Source\BSP\Driver\bsp_filteralgorithm.c -D
#        USE_STDPERIPH_DRIVER -D _STM32F10X_HD -D STM32F10X_CL -D DEBUG -D
#        STM32F103RC -D STM32_FLASH_SIZE=256 -D HSE_VALUE=25000000 -lCN
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\List\
#        -o
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        F:\iar\NC199B-100\Library\Project\IAR\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\User\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\AES\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Config\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\OS\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\User\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Source\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Port\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\OS\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Config\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Protocol\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Iap\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Driver\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\IAR\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\uCOS-III\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\CMSIS\CM3\CoreSupport\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\CMSIS\CM3\DeviceSupport\ST\STM32F10x\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\STM32F10x_StdPeriph_Driver\inc\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-CPU\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-CPU\ARM-Cortex-M3\IAR\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-LIB\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\OSAL\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\OSAL\OS\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\OS\uCOS-III\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\Source\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\Source\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\FatFs\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\FatFs\option\ -Om
#        --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\List\bsp_filteralgorithm.lst
#    Object file  =  
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\Obj\bsp_filteralgorithm.o
#
###############################################################################

F:\iar\NC199B-100\Library\Source\BSP\Driver\bsp_filteralgorithm.c
      1          /*******************************************************************************
      2           *   Filename:       bsp_filteralgorithm.c
      3           *   Revised:        All copyrights reserved to Roger.
      4           *   Date:           2015-05-11
      5           *   Revision:       v1.0
      6           *   Writer:	     Roger-WY.
      7           *
      8           *   Description:    滤波算法
      9           *
     10           *
     11           *   Notes:
     12           *
     13           *******************************************************************************/
     14          #include "bsp_filteralgorithm.h"
     15          
     16          //============================================================================//
     17          
     18          /*******************************************************************************
     19          * 名    称： App_ModbusQPost
     20          * 功    能： 时间平滑平均滤波
     21          * 入口参数： filter：缓存一段时间内的dat值   dat:当前测量值
     22          * 出口参数： 经过平滑平均函数之后的dat值
     23          * 作　 　者： 无名沈
     24          * 创建日期： 2015-05-30
     25          * 修    改：
     26          * 修改日期：
     27          * 备    注： 取一段时间内所有的dat值，计算时间段内所有数据的平均值
     28          *            例如：StrDataFilter    TempFilter = {8,0,{0}}; 8代表取缓存数组的前多少个值进行平均
     29          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     30          INT16U App_GetTimeMeanFiler(StrDataFilter *filter, INT16S dat)
     31          {
   \                     App_GetTimeMeanFiler: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x4606             MOV      R6,R0
   \   00000006   0x4689             MOV      R9,R1
     32              filter->Buf[filter->Idx]  = dat;
   \   00000008   0x8870             LDRH     R0,[R6, #+2]
   \   0000000A   0xEB06 0x0040      ADD      R0,R6,R0, LSL #+1
   \   0000000E   0xF8A0 0x9004      STRH     R9,[R0, #+4]
     33          
     34              if ( ++filter->Idx >= filter->Nbr ) {
   \   00000012   0x8870             LDRH     R0,[R6, #+2]
   \   00000014   0x1C40             ADDS     R0,R0,#+1
   \   00000016   0x8070             STRH     R0,[R6, #+2]
   \   00000018   0x8831             LDRH     R1,[R6, #+0]
   \   0000001A   0xB280             UXTH     R0,R0
   \   0000001C   0x4288             CMP      R0,R1
   \   0000001E   0xD301             BCC.N    ??App_GetTimeMeanFiler_0
     35                  filter->Idx = 0;
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x8070             STRH     R0,[R6, #+2]
     36              } else {
     37          
     38              }
     39              double  sum = 0.0;
   \                     ??App_GetTimeMeanFiler_0: (+1)
   \   00000024   0x2400             MOVS     R4,#+0
   \   00000026   0x4625             MOV      R5,R4
     40              INT16U  nbr = 0;
   \   00000028   0x4627             MOV      R7,R4
     41          
     42              for ( int i = 0; i < filter->Nbr; i++ ) {
   \   0000002A   0x46A0             MOV      R8,R4
   \   0000002C   0xE010             B.N      ??App_GetTimeMeanFiler_1
   \                     ??App_GetTimeMeanFiler_2: (+1)
   \   0000002E   0xEB06 0x0048      ADD      R0,R6,R8, LSL #+1
   \   00000032   0xF9B0 0x0004      LDRSH    R0,[R0, #+4]
   \   00000036   0x2801             CMP      R0,#+1
   \   00000038   0xDB08             BLT.N    ??App_GetTimeMeanFiler_3
     43                  if ( filter->Buf[i] > 0 ) {
     44                      sum += filter->Buf[i];
   \   0000003A   0x.... 0x....      BL       __aeabi_i2d
   \   0000003E   0x4622             MOV      R2,R4
   \   00000040   0x462B             MOV      R3,R5
   \   00000042   0x.... 0x....      BL       __aeabi_dadd
   \   00000046   0x4604             MOV      R4,R0
   \   00000048   0x460D             MOV      R5,R1
     45                      nbr++;
   \   0000004A   0x1C7F             ADDS     R7,R7,#+1
     46                  }
     47              }
   \                     ??App_GetTimeMeanFiler_3: (+1)
   \   0000004C   0xF108 0x0801      ADD      R8,R8,#+1
   \                     ??App_GetTimeMeanFiler_1: (+1)
   \   00000050   0x8830             LDRH     R0,[R6, #+0]
   \   00000052   0x4580             CMP      R8,R0
   \   00000054   0xDBEB             BLT.N    ??App_GetTimeMeanFiler_2
     48              if (nbr)
   \   00000056   0xB2BF             UXTH     R7,R7
   \   00000058   0x2F00             CMP      R7,#+0
   \   0000005A   0xD009             BEQ.N    ??App_GetTimeMeanFiler_4
     49                  sum /= nbr;
   \   0000005C   0x4638             MOV      R0,R7
   \   0000005E   0x.... 0x....      BL       __aeabi_ui2d
   \   00000062   0x4602             MOV      R2,R0
   \   00000064   0x460B             MOV      R3,R1
   \   00000066   0x4620             MOV      R0,R4
   \   00000068   0x4629             MOV      R1,R5
   \   0000006A   0x.... 0x....      BL       __aeabi_ddiv
   \   0000006E   0xE002             B.N      ??App_GetTimeMeanFiler_5
     50              else
     51                  sum  = dat;
   \                     ??App_GetTimeMeanFiler_4: (+1)
   \   00000070   0x4648             MOV      R0,R9
   \   00000072   0x.... 0x....      BL       __aeabi_i2d
     52          
     53              return  (INT16U)sum;
   \                     ??App_GetTimeMeanFiler_5: (+1)
   \   00000076   0x.... 0x....      BL       __aeabi_d2iz
   \   0000007A   0xB280             UXTH     R0,R0
   \   0000007C   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
     54          }
     55          
     56          
     57          /*******************************************************************************
     58          * 名    称： App_BubbleAscendingArray
     59          * 功    能： 冒泡法升序排列
     60          * 入口参数： buf： 需要排序的数组   bufsize:数组的大小
     61          * 出口参数： 排序之后的数组
     62          * 作　 　者： 无名沈
     63          * 创建日期： 2015-05-30
     64          * 修    改：
     65          * 修改日期：
     66          * 备    注：
     67          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     68          void App_BubbleAscendingArray(INT16U *needbuf,INT16U bufsize,INT16U *afterbuf)
     69          {
   \                     App_BubbleAscendingArray: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
     70              INT16U i, j;
     71              INT16U usTemp;
     72          
     73              for(i = 0; i < bufsize; i++) {
   \   00000002   0x2300             MOVS     R3,#+0
   \   00000004   0xE005             B.N      ??App_BubbleAscendingArray_0
     74                afterbuf[i] = *(needbuf+i);
   \                     ??App_BubbleAscendingArray_1: (+1)
   \   00000006   0xF830 0x4013      LDRH     R4,[R0, R3, LSL #+1]
   \   0000000A   0xF822 0x4013      STRH     R4,[R2, R3, LSL #+1]
     75              }
   \   0000000E   0x1C5B             ADDS     R3,R3,#+1
   \   00000010   0xB29B             UXTH     R3,R3
   \                     ??App_BubbleAscendingArray_0: (+1)
   \   00000012   0x428B             CMP      R3,R1
   \   00000014   0xDBF7             BLT.N    ??App_BubbleAscendingArray_1
     76              for(i = 0; i < bufsize - 1; i++) {
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xE00E             B.N      ??App_BubbleAscendingArray_2
     77                  for(j = i + 1; j < bufsize; j++) {
     78                      if(afterbuf[i] > afterbuf[j]) {
   \                     ??App_BubbleAscendingArray_3: (+1)
   \   0000001A   0xF832 0x3010      LDRH     R3,[R2, R0, LSL #+1]
   \   0000001E   0xF832 0x4015      LDRH     R4,[R2, R5, LSL #+1]
   \   00000022   0x429C             CMP      R4,R3
   \   00000024   0xD203             BCS.N    ??App_BubbleAscendingArray_4
     79                          usTemp = afterbuf[i];
     80                          afterbuf[i] = afterbuf[j];
   \   00000026   0xF822 0x4010      STRH     R4,[R2, R0, LSL #+1]
     81                          afterbuf[j] = usTemp;
   \   0000002A   0xF822 0x3015      STRH     R3,[R2, R5, LSL #+1]
     82                      }
     83                  }
   \                     ??App_BubbleAscendingArray_4: (+1)
   \   0000002E   0x1C6D             ADDS     R5,R5,#+1
   \   00000030   0xB2AD             UXTH     R5,R5
   \                     ??App_BubbleAscendingArray_5: (+1)
   \   00000032   0x428D             CMP      R5,R1
   \   00000034   0xDBF1             BLT.N    ??App_BubbleAscendingArray_3
   \   00000036   0x4630             MOV      R0,R6
   \                     ??App_BubbleAscendingArray_2: (+1)
   \   00000038   0x1E4B             SUBS     R3,R1,#+1
   \   0000003A   0x4298             CMP      R0,R3
   \   0000003C   0xDA03             BGE.N    ??App_BubbleAscendingArray_6
   \   0000003E   0x1C46             ADDS     R6,R0,#+1
   \   00000040   0xB2B6             UXTH     R6,R6
   \   00000042   0x4635             MOV      R5,R6
   \   00000044   0xE7F5             B.N      ??App_BubbleAscendingArray_5
     84              }
     85          }
   \                     ??App_BubbleAscendingArray_6: (+1)
   \   00000046   0xBC70             POP      {R4-R6}
   \   00000048   0x4770             BX       LR               ;; return
     86          
     87          /*******************************************************************************
     88          * 名    称： App_BubbleAscendingArray
     89          * 功    能： 冒泡法升序排列
     90          * 入口参数： buf： 需要排序的数组   bufsize:数组的大小
     91          * 出口参数： 排序之后的数组
     92          * 作　 　者： 无名沈
     93          * 创建日期： 2015-05-30
     94          * 修    改：
     95          * 修改日期：
     96          * 备    注：
     97          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     98          INT16U App_GetFilterValue(INT16U *needbuf, INT16U *afterbuf, INT16U bufsize, INT16U needsize)
     99          {
   \                     App_GetFilterValue: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
    100              INT16U  i, j;
    101              INT16U  usTemp;          
    102              u16     cutsize     = 0;
    103              INT32U  sum         = 0;  
   \   00000002   0x2500             MOVS     R5,#+0
    104              u16     cnt         = 0;
   \   00000004   0x462E             MOV      R6,R5
    105              
    106              /***********************************************
    107              * 描述： 过滤
    108              */
    109              if ( bufsize == 0 ) {
   \   00000006   0x2A00             CMP      R2,#+0
   \   00000008   0xD001             BEQ.N    ??App_GetFilterValue_0
    110                  return 0;
    111              }  
    112                  
    113              if ( 0 == needsize ) {
   \   0000000A   0x2B00             CMP      R3,#+0
   \   0000000C   0xD101             BNE.N    ??App_GetFilterValue_1
    114                  return 0;
   \                     ??App_GetFilterValue_0: (+1)
   \   0000000E   0x4628             MOV      R0,R5
   \   00000010   0xBDF0             POP      {R4-R7,PC}
    115              }
    116          
    117              /***********************************************
    118              * 描述： 不做删减
    119              */
    120              if ( bufsize == needsize ) {
   \                     ??App_GetFilterValue_1: (+1)
   \   00000012   0x4614             MOV      R4,R2
   \   00000014   0x429A             CMP      R2,R3
   \   00000016   0xD10B             BNE.N    ??App_GetFilterValue_2
    121                  for(u16 i = cutsize; i < bufsize - cutsize;i++) {
   \   00000018   0x4629             MOV      R1,R5
   \                     ??App_GetFilterValue_3: (+1)
   \   0000001A   0x42A1             CMP      R1,R4
   \   0000001C   0xDA3F             BGE.N    ??App_GetFilterValue_4
    122                      if ( needbuf[i] != 0 ) {
   \   0000001E   0xF830 0x2011      LDRH     R2,[R0, R1, LSL #+1]
   \   00000022   0x2A00             CMP      R2,#+0
   \   00000024   0xD001             BEQ.N    ??App_GetFilterValue_5
    123                          sum += needbuf[i];
   \   00000026   0x1955             ADDS     R5,R2,R5
    124                          cnt++;
   \   00000028   0x1C76             ADDS     R6,R6,#+1
    125                      }
    126                  }
   \                     ??App_GetFilterValue_5: (+1)
   \   0000002A   0x1C49             ADDS     R1,R1,#+1
   \   0000002C   0xB289             UXTH     R1,R1
   \   0000002E   0xE7F4             B.N      ??App_GetFilterValue_3
    127                  
    128                  return (INT16U)(sum/cnt);            // 返回平均值
    129              }
    130              
    131              /***********************************************
    132              * 描述： 
    133              */
    134              for(i = 0; i < bufsize; i++) {
   \                     ??App_GetFilterValue_2: (+1)
   \   00000030   0x462A             MOV      R2,R5
   \   00000032   0xE005             B.N      ??App_GetFilterValue_6
    135                afterbuf[i] = *(needbuf+i);
   \                     ??App_GetFilterValue_7: (+1)
   \   00000034   0xF830 0x7012      LDRH     R7,[R0, R2, LSL #+1]
   \   00000038   0xF821 0x7012      STRH     R7,[R1, R2, LSL #+1]
    136              }
   \   0000003C   0x1C52             ADDS     R2,R2,#+1
   \   0000003E   0xB292             UXTH     R2,R2
   \                     ??App_GetFilterValue_6: (+1)
   \   00000040   0x42A2             CMP      R2,R4
   \   00000042   0xDBF7             BLT.N    ??App_GetFilterValue_7
    137              
    138              /***********************************************
    139              * 描述： 排序
    140              */
    141              for(i = 0; i < bufsize - 1; i++) {
   \   00000044   0x4628             MOV      R0,R5
   \   00000046   0xE010             B.N      ??App_GetFilterValue_8
    142                  for(j = i + 1; j < bufsize; j++) {
    143                      if(afterbuf[i] > afterbuf[j]) {
   \                     ??App_GetFilterValue_9: (+1)
   \   00000048   0xF831 0x2010      LDRH     R2,[R1, R0, LSL #+1]
   \   0000004C   0xF831 0x701C      LDRH     R7,[R1, R12, LSL #+1]
   \   00000050   0x4297             CMP      R7,R2
   \   00000052   0xD203             BCS.N    ??App_GetFilterValue_10
    144                          usTemp = afterbuf[i];
    145                          afterbuf[i] = afterbuf[j];
   \   00000054   0xF821 0x7010      STRH     R7,[R1, R0, LSL #+1]
    146                          afterbuf[j] = usTemp;
   \   00000058   0xF821 0x201C      STRH     R2,[R1, R12, LSL #+1]
    147                      }
    148                  }
   \                     ??App_GetFilterValue_10: (+1)
   \   0000005C   0xF10C 0x0C01      ADD      R12,R12,#+1
   \   00000060   0xFA1F 0xFC8C      UXTH     R12,R12
   \                     ??App_GetFilterValue_11: (+1)
   \   00000064   0x45A4             CMP      R12,R4
   \   00000066   0xDBEF             BLT.N    ??App_GetFilterValue_9
   \   00000068   0x4670             MOV      R0,LR
   \                     ??App_GetFilterValue_8: (+1)
   \   0000006A   0x1E62             SUBS     R2,R4,#+1
   \   0000006C   0x4290             CMP      R0,R2
   \   0000006E   0xDA05             BGE.N    ??App_GetFilterValue_12
   \   00000070   0xF100 0x0E01      ADD      LR,R0,#+1
   \   00000074   0xFA1F 0xFE8E      UXTH     LR,LR
   \   00000078   0x46F4             MOV      R12,LR
   \   0000007A   0xE7F3             B.N      ??App_GetFilterValue_11
    149              }    
    150              
    151              /***********************************************
    152              * 描述： 获取删除数量
    153              */
    154              cutsize     = (bufsize - needsize) / 2;
   \                     ??App_GetFilterValue_12: (+1)
   \   0000007C   0x1AE0             SUBS     R0,R4,R3
   \   0000007E   0xEB00 0x70D0      ADD      R0,R0,R0, LSR #+31
   \   00000082   0x1040             ASRS     R0,R0,#+1
   \   00000084   0xB280             UXTH     R0,R0
    155              /***********************************************
    156              * 描述： 求和
    157              */
    158              for(u8 i = cutsize; i < bufsize - cutsize;i++) {
   \   00000086   0x4602             MOV      R2,R0
   \   00000088   0x1A27             SUBS     R7,R4,R0
   \   0000008A   0xE004             B.N      ??App_GetFilterValue_13
    159                  sum += afterbuf[i];
   \                     ??App_GetFilterValue_14: (+1)
   \   0000008C   0xF831 0x3013      LDRH     R3,[R1, R3, LSL #+1]
   \   00000090   0x195D             ADDS     R5,R3,R5
    160                  cnt++;
   \   00000092   0x1C76             ADDS     R6,R6,#+1
    161              }
   \   00000094   0x1C52             ADDS     R2,R2,#+1
   \                     ??App_GetFilterValue_13: (+1)
   \   00000096   0xB2D2             UXTB     R2,R2
   \   00000098   0x4613             MOV      R3,R2
   \   0000009A   0x42BB             CMP      R3,R7
   \   0000009C   0xDBF6             BLT.N    ??App_GetFilterValue_14
    162              
    163              return (INT16U)(sum/(cnt));                     // 返回平均值
   \                     ??App_GetFilterValue_4: (+1)
   \   0000009E   0xB2B6             UXTH     R6,R6
   \   000000A0   0xFBB5 0xF0F6      UDIV     R0,R5,R6
   \   000000A4   0xB280             UXTH     R0,R0
   \   000000A6   0xBDF0             POP      {R4-R7,PC}       ;; return
    164          }
    165          
    166          /******************************************************************************/
    167          //                              end of file                                   //
    168          /******************************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      12   App_BubbleAscendingArray
      20   App_GetFilterValue
      32   App_GetTimeMeanFiler
        32   -> __aeabi_d2iz
        32   -> __aeabi_dadd
        32   -> __aeabi_ddiv
        32   -> __aeabi_i2d
        32   -> __aeabi_ui2d


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      74  App_BubbleAscendingArray
     168  App_GetFilterValue
     128  App_GetTimeMeanFiler

 
 370 bytes in section .text
 
 370 bytes of CODE memory

Errors: none
Warnings: none

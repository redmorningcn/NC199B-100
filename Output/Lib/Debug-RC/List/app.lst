###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       23/Nov/2017  13:36:18
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  F:\iar\NC199B-100\Library\Source\APP\User\app.c
#    Command line =  
#        F:\iar\NC199B-100\Library\Source\APP\User\app.c -D
#        USE_STDPERIPH_DRIVER -D _STM32F10X_HD -D STM32F10X_CL -D DEBUG -D
#        STM32F103RC -D STM32_FLASH_SIZE=256 -D HSE_VALUE=25000000 -lCN
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\List\
#        -o
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        F:\iar\NC199B-100\Library\Project\IAR\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\User\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\AES\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Config\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\OS\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\User\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Source\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Port\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\OS\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Config\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Protocol\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Iap\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Driver\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\IAR\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\uCOS-III\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\CMSIS\CM3\CoreSupport\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\CMSIS\CM3\DeviceSupport\ST\STM32F10x\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\STM32F10x_StdPeriph_Driver\inc\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-CPU\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-CPU\ARM-Cortex-M3\IAR\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-LIB\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\OSAL\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\OSAL\OS\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\OS\uCOS-III\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\Source\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\Source\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\FatFs\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\FatFs\option\ -Om
#        --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\List\app.lst
#    Object file  =  
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\Obj\app.o
#
###############################################################################

F:\iar\NC199B-100\Library\Source\APP\User\app.c
      1          /*******************************************************************************
      2           *   Filename:      app.c
      3           *   Revised:       $Date: 2013-06-30$
      4           *   Revision:      $
      5           *	 Writer:		Wuming Shen.
      6           *
      7           *   Description:
      8           *   Notes:
      9           *					QQ:276193028
     10           *     				E-mail:shenchangwei945@163.com
     11           *
     12           *   All copyrights reserved to Wuming Shen.
     13           *
     14           *******************************************************************************/
     15          
     16          /*******************************************************************************
     17           * INCLUDES
     18           */
     19          #define  SNL_APP_SOURCE
     20          #include <app.h>
     21          #include <includes.h>
     22          //#include <iap.h>
     23          
     24          #ifdef VSC_INCLUDE_SOURCE_FILE_NAMES
     25          const  CPU_CHAR  *app__c = "$Id: $";
     26          #endif
     27          
     28          /*******************************************************************************
     29           * CONSTANTS
     30           */
     31          /****************************************************
     32          * 描述： 喂狗主任务的执行周期（单位:MS）
     33          */
     34          #define CYCLE_TIME_TICKS            (OS_CFG_TICK_RATE_HZ)
     35          
     36          //#define DEBUG_SIM                   DEF_ENABLED    // 软件仿真开关
     37          /*******************************************************************************
     38           * MACROS
     39           */
     40          
     41          /*******************************************************************************
     42           * TYPEDEFS
     43           */
     44          
     45          /*******************************************************************************
     46           * LOCAL VARIABLES
     47           */
     48          /***************************************************
     49          * 描述： uC/OS-III 任务控制块（TCB）
     50          *
     51          *       类型        TCB名称
     52          */

   \                                 In section .bss, align 4
     53          static  OS_TCB      AppTaskStartTCB;
   \                     AppTaskStartTCB:
   \   00000000                      DS8 184
   \   000000B8                      DS8 512
     54          
     55          /***************************************************
     56          * 描述： uC/OS 任务控制块（STACKS）
     57          *
     58          *       类型        堆栈名称                堆栈大小
     59          */
     60          static  CPU_STK     AppTaskStartStk         [ APP_TASK_START_STK_SIZE ];
     61          
     62          /***********************************************
     63          * 描述： 创建标志组
     64          */

   \                                 In section .bss, align 4
     65          OS_FLAG_GRP         WdtFlagGRP;                     //看门狗标志组
     66          OS_FLAGS            WdtFlags;
   \                     WdtFlags:
   \   00000000                      DS8 4
   \                     WdtFlagGRP:
   \   00000004                      DS8 28
     67          
     68          /***************************************************
     69          * 描述： 软定时器声明
     70          */

   \                                 In section .bss, align 4
     71          OS_TMR              OSTmr0;                         // 定时器1
   \                     OSTmr0:
   \   00000000                      DS8 44
     72          /****************************************************
     73          * 描述： 超过WdtTimeoutSec的时间还没有喂狗，系统复位。
     74          *        单位为 秒（S）
     75          */
     76          #define             WdtTimeoutSec           60
     77          
     78          /*******************************************************************************
     79           * GLOBAL VARIABLES
     80           */
     81          
     82          /*******************************************************************************
     83           * LOCAL FUNCTIONS
     84           *
     85           * 返回类型         函数名称                入口参数
     86           */
     87          static  void        AppTaskCreate           (void);
     88          static  void        AppObjCreate            (void);
     89          /***********************************************
     90          * 描述： 函数申明
     91          */
     92          static  void        App_Init                (void);
     93          static  void        AppTaskStart            (void *p_arg);
     94          /***********************************************
     95          * 描述： 软定时器回调函数
     96          */
     97          void                OSTmr0_callback         (OS_TMR *ptmr,void *p_arg);
     98          
     99          /*******************************************************************************
    100           * GLOBAL FUNCTIONS
    101           */
    102          
    103          /*******************************************************************************
    104           * EXTERN VARIABLES
    105           */
    106          
    107          /*******************************************************************************
    108           * EXTERN FUNCTIONS
    109           */
    110          extern  void        APP_TempEventProcess    (void);
    111          extern  void        App_InitStartHook       (void);
    112          extern  void        App_InitEndHook         (void);
    113          extern  void        AppTaskStart            (void *p_arg);
    114          extern  void        App_Main                (void);
    115          
    116          /*******************************************************************************
    117           * @fn      &:main
    118           * @brief   &:First function called after startup.
    119           * @return  &:don't care
    120           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    121          int main (void)
    122          {
   \                     main: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB08B             SUB      SP,SP,#+44
    123              OS_ERR  err;
    124          
    125              /***********************************************
    126              * 描述： 第一个调用函数，可以不返回
    127              */
    128              App_Main();
   \   00000004   0x.... 0x....      BL       App_Main
    129          #if DEBUG_SIM != DEF_ENABLED
    130          //#if !defined (LIBRARY)
    131              /***********************************************
    132              * 描述： 仅限64K芯片可用，其他容量芯片不让使用
    133              */
    134              INT16U FlashSize    = *(INT16U*)(0x1FFFF7E0);  // 闪存容量寄存器   
    135              if ( FlashSize != STM32_FLASH_SIZE )           // STM32F103RC  256K，在option中定义
   \   00000008   0x....             LDR.N    R0,??DataTable4  ;; 0x1ffff7e0
   \   0000000A   0x8800             LDRH     R0,[R0, #+0]
   \   0000000C   0xF5B0 0x7F80      CMP      R0,#+256
   \   00000010   0xD000             BEQ.N    ??main_0
    136                  while(1);
   \                     ??main_1: (+1)
   \   00000012   0xE7FE             B.N      ??main_1
    137          //#endif
    138          #endif
    139              /***********************************************
    140              * 描述： Init uC/OS-III.
    141              */
    142              OSInit(&err);
   \                     ??main_0: (+1)
   \   00000014   0xA809             ADD      R0,SP,#+36
   \   00000016   0x.... 0x....      BL       OSInit
    143          
    144              
    145              /***********************************************
    146              * 描述： 创建起始任务
    147              */
    148              OSTaskCreate((OS_TCB     *)&AppTaskStartTCB,                // 任务控制块（当前文件中定义）
    149                           (CPU_CHAR   *)"App Task Start",                // 任务名称
    150                           (OS_TASK_PTR ) AppTaskStart,                   // 任务函数指针（当前文件中定义）
    151                           (void       *) 0,                              // 任务函数参数
    152                           (OS_PRIO     ) APP_TASK_START_PRIO,            // 任务优先级，不同任务优先级可以相同，0 < 优先级 < OS_CFG_PRIO_MAX - 2（app_cfg.h中定义）
    153                           (CPU_STK    *)&AppTaskStartStk[0],             // 任务栈顶
    154                           (CPU_STK_SIZE) APP_TASK_START_STK_SIZE / 10,   // 任务栈溢出报警值
    155                           (CPU_STK_SIZE) APP_TASK_START_STK_SIZE,        // 任务栈大小（CPU数据宽度 * 8 * size = 4 * 8 * size(字节)）（app_cfg.h中定义）
    156                           (OS_MSG_QTY  ) 0u,                             // 可以发送给任务的最大消息队列数量
    157                           (OS_TICK     ) 0u,                             // 相同优先级任务的轮循时间（ms），0为默认
    158                           (void       *) 0,                              // 是一个指向它被用作一个TCB扩展用户提供的存储器位置
    159                           (OS_OPT      )(OS_OPT_TASK_STK_CHK |           // 允许堆栈检查该任务
    160                                          OS_OPT_TASK_STK_CLR),           // 创建任务时堆栈清零
    161                           (OS_ERR     *)&err);                           // 指向错误代码的指针，用于创建结果处理
   \   0000001A   0x....             LDR.N    R0,??DataTable4_1
   \   0000001C   0xA909             ADD      R1,SP,#+36
   \   0000001E   0x9108             STR      R1,[SP, #+32]
   \   00000020   0x2103             MOVS     R1,#+3
   \   00000022   0x9107             STR      R1,[SP, #+28]
   \   00000024   0x2100             MOVS     R1,#+0
   \   00000026   0x9106             STR      R1,[SP, #+24]
   \   00000028   0x9105             STR      R1,[SP, #+20]
   \   0000002A   0x9104             STR      R1,[SP, #+16]
   \   0000002C   0x2180             MOVS     R1,#+128
   \   0000002E   0x9103             STR      R1,[SP, #+12]
   \   00000030   0x210C             MOVS     R1,#+12
   \   00000032   0x9102             STR      R1,[SP, #+8]
   \   00000034   0xF100 0x01B8      ADD      R1,R0,#+184
   \   00000038   0x9101             STR      R1,[SP, #+4]
   \   0000003A   0x2112             MOVS     R1,#+18
   \   0000003C   0x9100             STR      R1,[SP, #+0]
   \   0000003E   0x2300             MOVS     R3,#+0
   \   00000040   0x.... 0x....      ADR.W    R2,AppTaskStart
   \   00000044   0x.... 0x....      ADR.W    R1,?_0
   \   00000048   0x.... 0x....      BL       OSTaskCreate
    162          
    163              /***********************************************
    164              * 描述： 启动 uC/OS-III
    165              */
    166              OSStart(&err);
   \   0000004C   0xA809             ADD      R0,SP,#+36
   \   0000004E   0x.... 0x....      BL       OSStart
    167          }
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0xB00B             ADD      SP,SP,#+44
   \   00000056   0xBD00             POP      {PC}             ;; return
    168          
    169          /*
    170          ********************************************************************************
    171          *                                          STARTUP TASK
    172          *
    173          * Description : This is an example of a startup task.  As mentioned in the book's 
    174          *               text, you MUST initialize the ticker only once multitasking has started.
    175          *
    176          * Arguments   : p_arg   is the argument passed to 'AppTaskStart()' by 'OSTaskCreate()'.
    177          *
    178          * Returns     : none
    179          *
    180          * Notes       : 1) The first line of code is used to prevent a compiler warning 
    181          *               because 'p_arg' is not used.  The compiler should not generate 
    182          *               any code for this statement.
    183          ********************************************************************************
    184          */

   \                                 In section .text, align 4, keep-with-next
    185          static  void  AppTaskStart (void *p_arg)
    186          {
   \                     AppTaskStart: (+1)
   \   00000000   0xB53E             PUSH     {R1-R5,LR}
    187              CPU_INT32U  cpu_clk_freq;
    188              CPU_INT32U  cnts;
    189              OS_ERR      err;
    190              INT32U      ticks;
    191              INT32S      dly;
    192              INT16U  	TimeOutCnt     = 0;                 //看门狗超时计数器
    193              uint8_t     ReadRTCTimeCnt = 0;
    194             (void)p_arg;
    195          
    196              /***********************************************
    197              * 描述： 设置STM32的系统时钟，I/O口设置，定时器等
    198              */
    199          #if DEBUG_SIM != DEF_ENABLED
    200              BSP_Init();                                                 /* Initialize BSP functions                             */
   \   00000002   0x.... 0x....      BL       BSP_Init
    201          #endif
    202              CPU_Init();
   \   00000006   0x.... 0x....      BL       CPU_Init
    203              
    204              /***********************************************
    205              * 描述： 初始化滴答定时器，即初始化系统节拍时钟。
    206              */
    207              cpu_clk_freq = BSP_CPU_ClkFreq();                           /* Determine SysTick reference freq.                    */
   \   0000000A   0x.... 0x....      BL       BSP_CPU_ClkFreq
    208              cnts = cpu_clk_freq / (CPU_INT32U)OSCfg_TickRate_Hz;        /* Determine nbr SysTick increments                     */
    209              OS_CPU_SysTickInit(cnts);                                   /* Init uC/OS periodic time src (SysTick).              */
   \   0000000E   0x....             LDR.N    R1,??DataTable4_2
   \   00000010   0x6809             LDR      R1,[R1, #+0]
   \   00000012   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000016   0x.... 0x....      BL       OS_CPU_SysTickInit
    210              
    211              /***********************************************
    212              * 描述： 设置UCOS钩子函数
    213              */
    214              App_OS_SetAllHooks();
   \   0000001A   0x.... 0x....      BL       App_OS_SetAllHooks
    215              
    216              /***********************************************
    217              * 描述： 初始化内存管理模块
    218              */
    219          #if (LIB_MEM_CFG_ALLOC_EN == DEF_ENABLED)
    220              Mem_Init();                                                 /* Initialize Memory Management Module                  */
    221          #endif
    222              
    223              /***********************************************
    224              * 描述： 看门狗初始化
    225              */
    226          #if DEBUG_SIM != DEF_ENABLED
    227          #if defined     (RELEASE)
    228              BSP_WDT_Init(BSP_WDT_MODE_ALL);
    229          #else
    230              BSP_WDT_Init(BSP_WDT_MODE_NONE);
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x.... 0x....      BL       BSP_WDT_Init
    231          #endif  
    232          #endif
    233              
    234              WdtReset();
   \   00000024   0x.... 0x....      BL       BSP_WDT_Rst
    235              /***********************************************
    236              * 描述： E2PROM初始化
    237              */
    238          #if DEBUG_SIM != DEF_ENABLED
    239              //App_Init();
    240          #endif
    241              extern StrNcProtocol   ComPackCtrl[4];
    242          //    Ctrl.MtrPar     = &Mater;
    243          //    Ctrl.Com.pack   = &ComPackCtrl[0];
    244          //    Ctrl.Dtu.pack   = &ComPackCtrl[1];
    245              
    246              App_TaskCommCreate();
   \   00000028   0x.... 0x....      BL       App_TaskCommCreate
    247              
    248              App_TaskMeasureCreate();
   \   0000002C   0x.... 0x....      BL       App_TaskMeasureCreate
    249              /***********************************************
    250              * 描述： 喂狗
    251              */
    252              WdtReset();
   \   00000030   0x.... 0x....      BL       BSP_WDT_Rst
    253              
    254              /***********************************************
    255              * 描述： 估算在没有运行任务时CPU的能力
    256              */
    257          #if OS_CFG_STAT_TASK_EN > 0u
    258              OSStatTaskCPUUsageInit(&err);                               /* Compute CPU capacity with no task running            */
    259          #endif
    260          
    261              /***********************************************
    262              * 描述：用于测量禁止中断的时间
    263              */
    264              CPU_IntDisMeasMaxCurReset();
   \   00000034   0x.... 0x....      BL       CPU_IntDisMeasMaxCurReset
    265          
    266          #if (APP_CFG_SERIAL_EN == DEF_ENABLED)
    267              BSP_Ser_Init(115200);                                       /* Enable Serial Interface                              */
    268          #endif
    269              
    270              /***********************************************
    271              * 描述： 创建对象（事件）,标志组
    272              */
    273              AppObjCreate();                                             /* Create Application Objects                           */
   \   00000038   0x.... 0x....      BL       AppObjCreate
    274          
    275              /***********************************************
    276              * 描述： 创建创建任务
    277              */
    278              AppTaskCreate();                                            /* Create Application Tasks                             */
   \   0000003C   0x.... 0x....      BL       AppTaskCreate
   \   00000040   0x....             LDR.N    R5,??DataTable4_3
    279          
    280          //    Ctrl.Com.SlaveAddr     = 0xA3;
    281              /***************************************************************************
    282              * 描述：每一个任务在创建时分配了一个喂狗标志位
    283              *	    每个任务在执行过和中，在未超出看门狗超时时间内
    284              *	    将相应的标志位置位，该任务将每秒钟查询一次
    285              *	    已经注册到喂狗标志位组的标志位，如果当前标志
    286              *	    位与注册的标志位相等，则表示每个任务当前都处于
    287              *	    活动状态，此时将超时计数器清零，重新开始超时计数
    288              *	    如果喂狗标志位没有全部置位，则将超时计数器+1，当
    289              *	    计数值超出设定的计数值时，系统进行重启。
    290              */
    291              while (DEF_TRUE) {
    292                  /***********************************************
    293                  * 描述： 得到系统当前时间
    294                  */
    295                  ticks = OSTimeGet(&err);
   \                     ??AppTaskStart_0: (+1)
   \   00000042   0xA802             ADD      R0,SP,#+8
   \   00000044   0x.... 0x....      BL       OSTimeGet
   \   00000048   0x4604             MOV      R4,R0
    296                  ReadRTCTimeCnt  ++;
    297          
    298                  /***********************************************
    299                  * 描述： 喂狗
    300                  */
    301                  WdtReset();
   \   0000004A   0x.... 0x....      BL       BSP_WDT_Rst
    302                         
    303                  /***********************************************************************
    304                  * 描述： 独立看门狗标志组检查， 判断是否所有任务已喂狗
    305                  */
    306                  OSFlagPend(( OS_FLAG_GRP *)&WdtFlagGRP,
    307                             ( OS_FLAGS     ) WdtFlags,
    308                             ( OS_TICK      ) 50,
    309                             ( OS_OPT       ) OS_OPT_PEND_FLAG_SET_ALL,   //全部置一
    310                             ( CPU_TS      *) NULL,
    311                             ( OS_ERR      *)&err);
   \   0000004E   0xA802             ADD      R0,SP,#+8
   \   00000050   0x9001             STR      R0,[SP, #+4]
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0x9000             STR      R0,[SP, #+0]
   \   00000056   0x2304             MOVS     R3,#+4
   \   00000058   0x2232             MOVS     R2,#+50
   \   0000005A   0x6829             LDR      R1,[R5, #+0]
   \   0000005C   0x1D28             ADDS     R0,R5,#+4
   \   0000005E   0x.... 0x....      BL       OSFlagPend
    312                  
    313                  if(err == OS_ERR_NONE) {                                //所有任务已喂狗
   \   00000062   0xF8BD 0x0008      LDRH     R0,[SP, #+8]
   \   00000066   0x2800             CMP      R0,#+0
   \   00000068   0xD10D             BNE.N    ??AppTaskStart_1
    314                      TimeOutCnt = 0;                                     //超时计数器清零
    315                      BSP_LED_Flash( 1, 1, 40, 40);
   \   0000006A   0x2328             MOVS     R3,#+40
   \   0000006C   0x461A             MOV      R2,R3
   \   0000006E   0x2101             MOVS     R1,#+1
   \   00000070   0x4608             MOV      R0,R1
   \   00000072   0x.... 0x....      BL       BSP_LED_Flash
    316                      OS_FlagPost ((OS_FLAG_GRP *)&WdtFlagGRP,            //清零所有标志
    317                                   (OS_FLAGS     ) WdtFlags,
    318                                   (OS_OPT       ) OS_OPT_POST_FLAG_CLR,
    319                                   (CPU_TS       ) 0,
    320                                   (OS_ERR      *) &err);
   \   00000076   0xA802             ADD      R0,SP,#+8
   \   00000078   0x9000             STR      R0,[SP, #+0]
   \   0000007A   0x2300             MOVS     R3,#+0
   \   0000007C   0x2201             MOVS     R2,#+1
   \   0000007E   0x6829             LDR      R1,[R5, #+0]
   \   00000080   0x1D28             ADDS     R0,R5,#+4
   \   00000082   0x.... 0x....      BL       OS_FlagPost
    321                  } else {                                                //不是所有任务都喂狗
    322          //            TimeOutCnt++;                                       //超时计数器加1
    323          //            if(TimeOutCnt > WdtTimeoutSec) {                    //喂狗超时
    324          //                /***********************************************
    325          //                * 描述： 如果程序处在升级模式
    326          //                */
    327          //                if ( ( Iap.Status != IAP_STS_DEF ) && ( Iap.Status != IAP_STS_SUCCEED ) ) {
    328          //                } else {
    329          //                    SystemReset();							    //系统重启
    330          //                    while(1){
    331          //                        /*******************************************************
    332          //                        * 描述： 长时间等不到某任务的看门狗标志位注册，说明有任务死了，
    333          //                        *        指示灯快速闪烁，进入死循环等待系统复位
    334          //                        */
    335          //                        BSP_LED_Toggle(1);
    336          //                        Delay_Nms(100);
    337          //                    };
    338          //                }
    339          //            } else {
    340          //                BSP_LED_Flash( 1, 1, 500, 500); 
    341          //            }
    342                  }
    343                  /***********************************************
    344                  * 描述： 去除任务运行的时间，等到一个控制周期里剩余需要延时的时间
    345                  */
    346                  dly   = CYCLE_TIME_TICKS - ( OSTimeGet(&err) - ticks );
   \                     ??AppTaskStart_1: (+1)
   \   00000086   0xA802             ADD      R0,SP,#+8
   \   00000088   0x.... 0x....      BL       OSTimeGet
   \   0000008C   0xF5C0 0x707A      RSB      R0,R0,#+1000
   \   00000090   0x1820             ADDS     R0,R4,R0
    347                  if ( dly  <= 0 ) {
   \   00000092   0x2801             CMP      R0,#+1
   \   00000094   0xDA00             BGE.N    ??AppTaskStart_2
    348                      dly   = 0;
   \   00000096   0x2000             MOVS     R0,#+0
    349                  }
    350                  OSTimeDly(dly, OS_OPT_TIME_DLY, &err);
   \                     ??AppTaskStart_2: (+1)
   \   00000098   0xAA02             ADD      R2,SP,#+8
   \   0000009A   0x2100             MOVS     R1,#+0
   \   0000009C   0x.... 0x....      BL       OSTimeDly
   \   000000A0   0xE7CF             B.N      ??AppTaskStart_0
    351              }
    352          }
    353          /*******************************************************************************
    354           * 名    称： App_Init
    355           * 功    能： 用户应用初始化
    356           * 入口参数： 无
    357           * 出口参数： 无
    358           * 作　 　者： 无名沈.
    359           * 创建日期： 2015-03-19
    360           * 修    改：
    361           * 修改日期：
    362           *******************************************************************************/
    363          static void App_Init(void)
    364          {
    365              /********************************************************************
    366              * 描述： 初始化EEPROM
    367              */
    368              App_PraInit();
    369              WdtReset();
    370              Ctrl.Para.dat.Password  = 0; 
    371              /********************************************************************
    372              * 描述： 在发布RELEASE版本时，给FLASH加上读保护
    373              */
    374          #ifndef DEBUG
    375              /***********************************************
    376              * 描述：Flash写保护和读保护，增加保护后，
    377              *       需使用JFLASH擦出芯片才可以进行下次下载与仿真。
    378              */
    379              if( FLASH_GetReadOutProtectionStatus() != SET ){
    380                  FLASH_Unlock();
    381                  FLASH_ReadOutProtection(ENABLE);
    382                  FLASH_Lock();
    383              }
    384              /***********************************************
    385              * 描述：Flash写保护和读保护，增加保护后，
    386              *       需使用JFLASH擦出芯片才可以进行下次下载与仿真。
    387              */
    388          #endif
    389          }
    390          
    391          /*
    392          ********************************************************************************
    393          *                                      CREATE APPLICATION EVENTS
    394          *
    395          * Description:  This function creates the application kernel objects.
    396          *
    397          * Arguments  :  none
    398          *
    399          * Returns    :  none
    400          ********************************************************************************
    401          */
    402          

   \                                 In section .text, align 2, keep-with-next
    403          static  void  AppObjCreate (void)
    404          {
   \                     AppObjCreate: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    405              OS_ERR    err;
    406          
    407              /***********************************************
    408              * 描述：创建看门狗标志组
    409              */
    410              OSFlagCreate(( OS_FLAG_GRP  *)&WdtFlagGRP,
    411                           ( CPU_CHAR     *)"Wdt Flag",
    412                           ( OS_FLAGS      )0,
    413                           ( OS_ERR       *)&err);
   \   00000002   0x466B             MOV      R3,SP
   \   00000004   0x2200             MOVS     R2,#+0
   \   00000006   0x.... 0x....      ADR.W    R1,?_1
   \   0000000A   0x....             LDR.N    R0,??DataTable4_4
   \   0000000C   0x.... 0x....      BL       OSFlagCreate
    414          
    415              /***********************************************
    416              * 描述：创建一个软定时器 OS_OPT_TMR_ONE_SHOT, OS_OPT_TMR_PERIODIC
    417              */
    418              //OSTmrCreate ((OS_TMR               *)&OSTmr0,
    419              //             (CPU_CHAR             *)"tmr0",
    420              //             (OS_TICK               )60 * OS_CFG_TMR_TASK_RATE_HZ,
    421              //             (OS_TICK               )60 * OS_CFG_TMR_TASK_RATE_HZ,
    422              //             (OS_OPT                )OS_OPT_TMR_ONE_SHOT,
    423              //             (OS_TMR_CALLBACK_PTR   )OSTmr0_callback,
    424              //             (void                 *)NULL,
    425              //             (OS_ERR               *)&err);
    426          }
   \   00000010   0xBD01             POP      {R0,PC}          ;; return
    427          
    428          
    429          /*******************************************************************************
    430           * 名    称： OSTmr0_callback
    431           * 功    能： 软定时器0的回调函数
    432           * 入口参数： 无
    433           * 出口参数： 无
    434           * 作　  者： 无名沈
    435           * 创建日期： 2015-03-28
    436           * 修    改：
    437           * 修改日期：
    438           * 备    注： 定时器回调函数不能使用延时函数
    439           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    440          void OSTmr0_callback(OS_TMR *ptmr,void *p_arg)
    441          {
    442              /***********************************************
    443              * 描述：注意：回调函数中执行的时间不宜过长
    444              */
    445          
    446          }
   \                     OSTmr0_callback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    447          
    448          /*
    449          ********************************************************************************
    450          *                                      CREATE APPLICATION TASKS
    451          *
    452          * Description:  This function creates the application tasks.
    453          *
    454          * Arguments  :  none
    455          *
    456          * Returns    :  none
    457          ********************************************************************************
    458          */

   \                                 In section .text, align 2, keep-with-next
    459          static  void  AppTaskCreate (void)
    460          {
   \                     AppTaskCreate: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    461              /***********************************************
    462              * 描述： 在此处创建任务
    463              */
    464              extern  void OS_TaskCreateHook(void);
    465              OS_TaskCreateHook();
   \   00000002   0x.... 0x....      BL       OS_TaskCreateHook
    466              
    467              /***********************************************
    468              * 描述： 在此处创建OSAL任务
    469              */
    470          #if ( OSAL_EN == DEF_ENABLED )
    471              App_TaskOsalCreate();
   \   00000006   0xE8BD 0x4001      POP      {R0,LR}
   \   0000000A   0x.... 0x....      B.W      App_TaskOsalCreate
    472              /***********************************************
    473              * 描述： 在此处创UCOS建任务
    474              */
    475          #else
    476              App_TaskSensorCreate();
    477              //App_TaskControlCreate();
    478          #endif
    479          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x1FFFF7E0         DC32     0x1ffff7e0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x........         DC32     AppTaskStartTCB

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x........         DC32     OSCfg_TickRate_Hz

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x........         DC32     WdtFlags

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x........         DC32     WdtFlags+0x4

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x41 0x70          DC8 "App Task Start"
   \              0x70 0x20    
   \              0x54 0x61    
   \              0x73 0x6B    
   \              0x20 0x53    
   \              0x74 0x61    
   \              0x72 0x74    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x57 0x64          DC8 "Wdt Flag"
   \              0x74 0x20    
   \              0x46 0x6C    
   \              0x61 0x67    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    480          
    481          /*******************************************************************************
    482           * 				end of file
    483           *******************************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   AppObjCreate
         8   -> OSFlagCreate
       8   AppTaskCreate
         0   -> App_TaskOsalCreate
         8   -> OS_TaskCreateHook
      24   AppTaskStart
        24   -> AppObjCreate
        24   -> AppTaskCreate
        24   -> App_OS_SetAllHooks
        24   -> App_TaskCommCreate
        24   -> App_TaskMeasureCreate
        24   -> BSP_CPU_ClkFreq
        24   -> BSP_Init
        24   -> BSP_LED_Flash
        24   -> BSP_WDT_Init
        24   -> BSP_WDT_Rst
        24   -> CPU_Init
        24   -> CPU_IntDisMeasMaxCurReset
        24   -> OSFlagPend
        24   -> OSTimeDly
        24   -> OSTimeGet
        24   -> OS_CPU_SysTickInit
        24   -> OS_FlagPost
       0   OSTmr0_callback
      48   main
        48   -> App_Main
        48   -> OSInit
        48   -> OSStart
        48   -> OSTaskCreate


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
      16  ?_0
      12  ?_1
      18  AppObjCreate
      14  AppTaskCreate
     162  AppTaskStart
     696  AppTaskStartTCB
          AppTaskStartStk
      44  OSTmr0
       2  OSTmr0_callback
      32  WdtFlags
          WdtFlagGRP
      88  main

 
 772 bytes in section .bss
 332 bytes in section .text
 
 332 bytes of CODE memory
 772 bytes of DATA memory

Errors: none
Warnings: 3

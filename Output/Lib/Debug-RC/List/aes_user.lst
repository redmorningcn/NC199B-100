###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       26/Dec/2017  15:40:15
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  F:\iar\NC199B-100\Library\Source\APP\AES\aes_user.c
#    Command line =  
#        F:\iar\NC199B-100\Library\Source\APP\AES\aes_user.c -D
#        USE_STDPERIPH_DRIVER -D _STM32F10X_HD -D STM32F10X_CL -D DEBUG -D
#        STM32F103RC -D STM32_FLASH_SIZE=256 -D HSE_VALUE=25000000 -lCN
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\List\
#        -o
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        F:\iar\NC199B-100\Library\Project\IAR\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\User\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\AES\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Config\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\OS\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\User\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Source\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Port\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\OS\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Config\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Protocol\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Iap\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Driver\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\IAR\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\uCOS-III\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\CMSIS\CM3\CoreSupport\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\CMSIS\CM3\DeviceSupport\ST\STM32F10x\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\STM32F10x_StdPeriph_Driver\inc\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-CPU\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-CPU\ARM-Cortex-M3\IAR\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-LIB\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\OSAL\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\OSAL\OS\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\OS\uCOS-III\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\Source\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\Source\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\FatFs\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\FatFs\option\ -Om
#        --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\List\aes_user.lst
#    Object file  =  
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\Obj\aes_user.o
#
###############################################################################

F:\iar\NC199B-100\Library\Source\APP\AES\aes_user.c
      1          /*******************************************************************************
      2           *   Filename:       aes_user.c
      3           *   Revised:        $Date: 2014-04-23
      4           *   Revision:       $
      5           *	 Writer:		 Wuming Shen.
      6           *
      7           *   Description:    
      8           *
      9           *   Notes:        
     10           *					   
     11           *			
     12           *   All copyrights reserved to Wuming Shen.
     13           *
     14           *******************************************************************************/
     15          
     16          /*******************************************************************************
     17           * INCLUDES
     18           */
     19          #include <includes.h>
     20          #include <global.h>
     21          #include <bsp_info.h>
     22          #include <aes.h>
     23          
     24          #define BSP_AES_MODULE_EN 1
     25          #if BSP_AES_MODULE_EN > 0
     26          /*******************************************************************************
     27           * CONSTANTS
     28           */
     29          #define AES_BITS        128
     30          #define AES_BYTES       16
     31          
     32          /*******************************************************************************
     33           * MACROS
     34           */
     35          
     36          /*******************************************************************************
     37           * TYPEDEFS
     38           */
     39          
     40          /*******************************************************************************
     41           * LOCAL VARIABLES
     42           */
     43          /***********************************************
     44          * 描述：定义函数指针
     45          */
     46          
     47          /*******************************************************************************
     48           * GLOBAL VARIABLES
     49           */
     50          #if MB_AES_EN == DEF_ENABLED
     51          static INT08U      mbszIvec[16] = {0X12, 0x34, 0x56, 0x78,0X87, 0x65, 0x56, 0x78,
     52                                           0x87, 0x65, 0x43, 0x21,0x12, 0x34, 0x43, 0x21};
     53          static AES_KEY     mbaesKey;
     54          static INT08U      mbuserIvec[16];
     55          #endif
     56          

   \                                 In section .bss, align 4
     57          static AES_KEY     aesKey;                            		            // AES 扩展密钥
     58          static INT08U 	    userKey[AES_BYTES+1];//    = "snlion>2014+2^99" / "2014<snlion>2^99";		// 解密密钥 16字节
   \                     userKey:
   \   00000000                      DS8 20
   \   00000014                      DS8 244

   \                                 In section .bss, align 4
     59          static INT08U 	    userIvec[AES_BYTES+1];//   = "4307783638394734";		// 解密向量 16字节
   \                     userIvec:
   \   00000000                      DS8 20
     60          
     61          /*******************************************************************************
     62           * LOCAL FUNCTIONS
     63           */
     64          
     65          /*******************************************************************************
     66           * GLOBAL FUNCTIONS
     67           */
     68          
     69          /*******************************************************************************
     70           * EXTERN VARIABLES
     71           */
     72          
     73           /*******************************************************************************
     74           * EXTERN FUNCTIONS
     75           */
     76           
     77          /*******************************************************************************/
     78          
     79          /*******************************************************************************
     80           * 名    称： AES_GetUserKey
     81           * 功    能： 获取用户密码
     82           * 入口参数： 
     83           * 出口参数： 
     84           * 作　 　者： 无名沈
     85           * 创建日期： 2014-05-04
     86           * 修    改：
     87           * 修改日期：
     88           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     89          static void AES_GetUserKey( unsigned char *userKey ) 
     90          {
     91            // "snlion>2014+2^99"
     92            *userKey++    = 's';//*szKey;
   \                     AES_GetUserKey: (+1)
   \   00000000   0x2173             MOVS     R1,#+115
   \   00000002   0x7001             STRB     R1,[R0, #+0]
     93            *userKey++    = 'n';//*(szKey + 2);
   \   00000004   0x216E             MOVS     R1,#+110
   \   00000006   0x7041             STRB     R1,[R0, #+1]
     94            *userKey++    = 'l';//*(szKey + 3);
   \   00000008   0x216C             MOVS     R1,#+108
   \   0000000A   0x7081             STRB     R1,[R0, #+2]
     95            *userKey++    = 'i';//*(szKey + 5);
   \   0000000C   0x2169             MOVS     R1,#+105
   \   0000000E   0x70C1             STRB     R1,[R0, #+3]
     96            *userKey++    = 'o';//*(szKey + 6);
   \   00000010   0x216F             MOVS     R1,#+111
   \   00000012   0x7101             STRB     R1,[R0, #+4]
     97            *userKey++    = 'n';//*(szKey + 7);
   \   00000014   0x216E             MOVS     R1,#+110
   \   00000016   0x7141             STRB     R1,[R0, #+5]
     98            *userKey++    = '>';//*(szKey + 9);
   \   00000018   0x213E             MOVS     R1,#+62
   \   0000001A   0x7181             STRB     R1,[R0, #+6]
     99            *userKey++    = '2';//*(szKey + 10);
   \   0000001C   0x2132             MOVS     R1,#+50
   \   0000001E   0x71C1             STRB     R1,[R0, #+7]
    100            *userKey++    = '0';//*(szKey + 11);
   \   00000020   0x2130             MOVS     R1,#+48
   \   00000022   0x7201             STRB     R1,[R0, #+8]
    101            *userKey++    = '1';//*(szKey + 12);
   \   00000024   0x2131             MOVS     R1,#+49
   \   00000026   0x7241             STRB     R1,[R0, #+9]
    102            *userKey++    = '4';//*(szKey + 14);
   \   00000028   0x2134             MOVS     R1,#+52
   \   0000002A   0x7281             STRB     R1,[R0, #+10]
    103            *userKey++    = '+';//*(szKey + 15);
   \   0000002C   0x212B             MOVS     R1,#+43
   \   0000002E   0x72C1             STRB     R1,[R0, #+11]
    104            *userKey++    = '2';//*(szKey + 1);
   \   00000030   0x2132             MOVS     R1,#+50
   \   00000032   0x7301             STRB     R1,[R0, #+12]
    105            *userKey++    = '^';//*(szKey + 4);
   \   00000034   0x215E             MOVS     R1,#+94
   \   00000036   0x7341             STRB     R1,[R0, #+13]
    106            *userKey++    = '9';//*(szKey + 8);
   \   00000038   0x2139             MOVS     R1,#+57
   \   0000003A   0x7381             STRB     R1,[R0, #+14]
    107            *userKey++    = '9';//*(szKey + 13);
   \   0000003C   0x73C1             STRB     R1,[R0, #+15]
    108            *userKey      = 0;
   \   0000003E   0x2100             MOVS     R1,#+0
   \   00000040   0x7401             STRB     R1,[R0, #+16]
    109          }
   \   00000042   0x4770             BX       LR               ;; return
    110          
    111          /*******************************************************************************
    112           * 名    称： AES_GetUserKey
    113           * 功    能： 获取用户密码
    114           * 入口参数： 
    115           * 出口参数： 
    116           * 作　 　者： 无名沈
    117           * 创建日期： 2014-05-04
    118           * 修    改：
    119           * 修改日期：
    120           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    121          static void AES_GetUserKeyForApp( unsigned char *userKey ) 
    122          {
    123            // "2014<snlion>2^99"
    124            *userKey++    = '2';//*szKey;
   \                     AES_GetUserKeyForApp: (+1)
   \   00000000   0x2132             MOVS     R1,#+50
   \   00000002   0x7001             STRB     R1,[R0, #+0]
    125            *userKey++    = '0';//*(szKey + 2);
   \   00000004   0x2130             MOVS     R1,#+48
   \   00000006   0x7041             STRB     R1,[R0, #+1]
    126            *userKey++    = '1';//*(szKey + 3);
   \   00000008   0x2131             MOVS     R1,#+49
   \   0000000A   0x7081             STRB     R1,[R0, #+2]
    127            *userKey++    = '4';//*(szKey + 5);
   \   0000000C   0x2134             MOVS     R1,#+52
   \   0000000E   0x70C1             STRB     R1,[R0, #+3]
    128            *userKey++    = '<';//*(szKey + 6);
   \   00000010   0x213C             MOVS     R1,#+60
   \   00000012   0x7101             STRB     R1,[R0, #+4]
    129            *userKey++    = 's';//*(szKey + 7);
   \   00000014   0x2173             MOVS     R1,#+115
   \   00000016   0x7141             STRB     R1,[R0, #+5]
    130            *userKey++    = 'n';//*(szKey + 9);
   \   00000018   0x216E             MOVS     R1,#+110
   \   0000001A   0x7181             STRB     R1,[R0, #+6]
    131            *userKey++    = 'l';//*(szKey + 10);
   \   0000001C   0x216C             MOVS     R1,#+108
   \   0000001E   0x71C1             STRB     R1,[R0, #+7]
    132            *userKey++    = 'i';//*(szKey + 11);
   \   00000020   0x2169             MOVS     R1,#+105
   \   00000022   0x7201             STRB     R1,[R0, #+8]
    133            *userKey++    = 'o';//*(szKey + 12);
   \   00000024   0x216F             MOVS     R1,#+111
   \   00000026   0x7241             STRB     R1,[R0, #+9]
    134            *userKey++    = 'n';//*(szKey + 14);
   \   00000028   0x216E             MOVS     R1,#+110
   \   0000002A   0x7281             STRB     R1,[R0, #+10]
    135            *userKey++    = '>';//*(szKey + 15);
   \   0000002C   0x213E             MOVS     R1,#+62
   \   0000002E   0x72C1             STRB     R1,[R0, #+11]
    136            *userKey++    = '2';//*(szKey + 1);
   \   00000030   0x2132             MOVS     R1,#+50
   \   00000032   0x7301             STRB     R1,[R0, #+12]
    137            *userKey++    = '^';//*(szKey + 4);
   \   00000034   0x215E             MOVS     R1,#+94
   \   00000036   0x7341             STRB     R1,[R0, #+13]
    138            *userKey++    = '9';//*(szKey + 8);
   \   00000038   0x2139             MOVS     R1,#+57
   \   0000003A   0x7381             STRB     R1,[R0, #+14]
    139            *userKey++    = '9';//*(szKey + 13);
   \   0000003C   0x73C1             STRB     R1,[R0, #+15]
    140            *userKey      = 0;
   \   0000003E   0x2100             MOVS     R1,#+0
   \   00000040   0x7401             STRB     R1,[R0, #+16]
    141          }
   \   00000042   0x4770             BX       LR               ;; return
    142          
    143          /*******************************************************************************
    144           * 名    称： AES_CbcInitKey
    145           * 功    能： 
    146           * 入口参数： 
    147           * 出口参数： 
    148           * 作　 　者： 无名沈
    149           * 创建日期： 2014-05-04
    150           * 修    改：
    151           * 修改日期：
    152           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    153          void AES_CbcInitKey(void)
    154          {
   \                     AES_CbcInitKey: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    155          	/***********************************************
    156          	* 描述： 设置密钥
    157          	*/
    158              AES_GetUserKey((INT08U *)userKey);
   \   00000002   0x....             LDR.N    R4,??DataTable3
   \   00000004   0x4620             MOV      R0,R4
   \   00000006   0x.... 0x....      BL       AES_GetUserKey
    159              //memcpy(userKey,"snlion>2014+2^99",16);
    160              userKey[AES_BYTES] = 0;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x7420             STRB     R0,[R4, #+16]
    161              
    162           	memset(aesKey.rd_key, 0, sizeof(aesKey.rd_key));// 清零扩展密钥
   \   0000000E   0x4602             MOV      R2,R0
   \   00000010   0x21F0             MOVS     R1,#+240
   \   00000012   0xF104 0x0014      ADD      R0,R4,#+20
   \   00000016   0x.... 0x....      BL       __aeabi_memset4
    163              AES_SetDecryptKey( userKey, 				    // 密钥
    164                                  AES_BITS, 		            // 128位方式，还有192和256位方式
    165                                  &aesKey);			        // 扩展密钥
   \   0000001A   0xF104 0x0214      ADD      R2,R4,#+20
   \   0000001E   0x2180             MOVS     R1,#+128
   \   00000020   0x4620             MOV      R0,R4
   \   00000022   0xE8BD 0x4010      POP      {R4,LR}
   \   00000026   0x.... 0x....      B.W      AES_set_decrypt_key
    166          }
    167          
    168          /*******************************************************************************
    169           * 名    称： AES_CbcInitKey
    170           * 功    能： 
    171           * 入口参数： 
    172           * 出口参数： 
    173           * 作　 　者： 无名沈
    174           * 创建日期： 2014-05-04
    175           * 修    改：
    176           * 修改日期：
    177           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    178          void AES_CbcInitKeyForApp(BOOL dec)
    179          {
   \                     AES_CbcInitKeyForApp: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    180          	/***********************************************
    181          	* 描述： 设置密钥
    182          	*/
    183              AES_GetUserKeyForApp((INT08U *)userKey);
   \   00000004   0x....             LDR.N    R5,??DataTable3
   \   00000006   0x4628             MOV      R0,R5
   \   00000008   0x.... 0x....      BL       AES_GetUserKeyForApp
    184              //memcpy(userKey,"2014<snlion>2^99",16);
    185              userKey[AES_BYTES] = 0;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x7428             STRB     R0,[R5, #+16]
    186              
    187           	memset(aesKey.rd_key, 0, sizeof(aesKey.rd_key));// 清零扩展密钥
   \   00000010   0x4602             MOV      R2,R0
   \   00000012   0x21F0             MOVS     R1,#+240
   \   00000014   0xF105 0x0014      ADD      R0,R5,#+20
   \   00000018   0x.... 0x....      BL       __aeabi_memset4
    188              if( dec == AES_DECRYPT )
   \   0000001C   0x2C00             CMP      R4,#+0
   \   0000001E   0xF105 0x0214      ADD      R2,R5,#+20
   \   00000022   0xD105             BNE.N    ??AES_CbcInitKeyForApp_0
    189                AES_SetDecryptKey( userKey, 				    // 密钥
    190                                  AES_BITS, 		            // 128位方式，还有192和256位方式
    191                                  &aesKey);			        // 扩展密钥
   \   00000024   0x2180             MOVS     R1,#+128
   \   00000026   0x4628             MOV      R0,R5
   \   00000028   0xE8BD 0x4038      POP      {R3-R5,LR}
   \   0000002C   0x.... 0x....      B.W      AES_set_decrypt_key
    192              else
    193                AES_SetEncryptKey( userKey, 				    // 密钥
    194                                  AES_BITS, 		            // 128位方式，还有192和256位方式
    195                                  &aesKey);			        // 扩展密钥
   \                     ??AES_CbcInitKeyForApp_0: (+1)
   \   00000030   0x2180             MOVS     R1,#+128
   \   00000032   0x4628             MOV      R0,R5
   \   00000034   0xE8BD 0x4038      POP      {R3-R5,LR}
   \   00000038   0x.... 0x....      B.W      AES_set_encrypt_key
    196          }
    197          
    198          /*******************************************************************************
    199           * 名    称： AES_CbcInitViec
    200           * 功    能： 
    201           * 入口参数： 
    202           * 出口参数： 
    203           * 作　 　者： 无名沈
    204           * 创建日期： 2014-05-04
    205           * 修    改：
    206           * 修改日期：
    207           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    208          void AES_CbcInitViec(void)
    209          {	/***********************************************
   \                     AES_CbcInitViec: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    210          	* 描述： 设置密钥
    211          	*/
    212              BSP_GetChipInfo(0,ChipInfo);
   \   00000002   0x....             LDR.N    R4,??DataTable3_1
   \   00000004   0x4621             MOV      R1,R4
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x.... 0x....      BL       BSP_GetChipInfo
    213              memcpy(userIvec,ChipInfo[0].cid, AES_BYTES); 
   \   0000000C   0x....             LDR.N    R5,??DataTable3_2
   \   0000000E   0x2210             MOVS     R2,#+16
   \   00000010   0xF104 0x010C      ADD      R1,R4,#+12
   \   00000014   0x4628             MOV      R0,R5
   \   00000016   0x.... 0x....      BL       __aeabi_memcpy4
    214              userIvec[AES_BYTES]  = 0;
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x7428             STRB     R0,[R5, #+16]
    215          }
   \   0000001E   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    216          
    217          /*******************************************************************************
    218           * 名    称： BOOT_AesCbcDec
    219           * 功    能： AES_CBC解密bin文件
    220           * 入口参数： pIn:加密后的bin文件明文；pOut:解密后的写入FLASH的bin文件
    221           * 出口参数： 
    222           * 作　 　者： 无名沈
    223           * 创建日期： 2014-04-23
    224           * 修    改：
    225           * 修改日期：
    226           *******************************************************************************/	

   \                                 In section .text, align 2, keep-with-next
    227          void AES_CbcDecrypt(const unsigned char *pIn, unsigned char *pOut, long len, unsigned char dec)
    228          {
   \                     AES_CbcDecrypt: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    229          	/***********************************************
    230          	* 描述： 
    231          	*/
    232              AES_CbcEnOrDecrypt((INT08U*)pIn,                // 待解密缓冲区
    233                             (INT08U*)pOut,                   // 解密后的缓冲区
    234                              len,				            // 缓冲区长度
    235                             (AES_KEY*)&aesKey, 		        // 扩展密钥
    236                             (INT08U*)userIvec, 		        // 向量
    237                              dec);		                    // 加密
   \   00000004   0x9301             STR      R3,[SP, #+4]
   \   00000006   0x....             LDR.N    R3,??DataTable3_2
   \   00000008   0x9300             STR      R3,[SP, #+0]
   \   0000000A   0x....             LDR.N    R3,??DataTable3_3
   \   0000000C   0x.... 0x....      BL       AES_cbc_encrypt
    238          }
   \   00000010   0xBD07             POP      {R0-R2,PC}       ;; return
    239          
    240          /*******************************************************************************
    241           * 名    称： MB_AESCbcDecrypt()
    242           * 功    能： 接收数据加密码
    243           * 入口参数： buf 输入接收缓冲区,len 输入要加密的缓冲区长度
    244           * 出口参数： 解密后的长度
    245           * 作　 　者： 无名沈
    246           * 创建日期： 2014-03-28
    247           * 修    改：
    248           * 修改日期：
    249           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    250          INT16U MB_AESCbcDecrypt(INT08U *buf, INT16U len)
    251          {
    252          #if MB_AES_EN == DEF_ENABLED    
    253              memset(mbaesKey.rd_key, 0, sizeof(mbaesKey.rd_key));// 清零扩展密钥
    254              AES_SetDecryptKey(  "scw->ll->zs->scw",         // 密钥
    255                                  128, 		                // 128位方式，还有192和256位方式
    256                                 &mbaesKey);			        // 扩展密钥
    257              /***********************************************
    258              * 描述： 设置密钥向量
    259              */
    260              memcpy((INT08U*)mbuserIvec,(INT08U*)&mbszIvec[0], 16);// 向量
    261              /***********************************************
    262              * 描述： 更改密钥向量（为增加安全性，可使向量自动与发送端进行同步）
    263              *
    264              if (++mbszIvec[6] > 10)
    265                mbszIvec[6]  = 0;
    266              *//***********************************************
    267              * 描述： 检查数据长度是否为16的整数倍
    268              */
    269              if ( (len & 0x0f) != 0  )
    270                return (DEF_FALSE);
    271              
    272              AES_CbcEnOrDecrypt((INT08U*)buf,                 // 待解密缓冲区
    273                                 (INT08U*)buf,                 // 解密后的缓冲区
    274                                  len,				        // 缓冲区长度
    275                                 (AES_KEY*)&mbaesKey, 		// 扩展密钥
    276                                 (INT08U*)mbuserIvec, 		    // 向量
    277                                  AES_DECRYPT);		        // 加密
    278              /***********************************************
    279              * 描述： 检查最后一个字节是否为1，为1则表示填充位字节数为1
    280              */
    281              if ( buf[len-1] == 1) {                         // 如果最后字节为1
    282                len--;                                        // 有效数据数-1
    283              /***********************************************
    284              * 描述： 检查>1的填充字节数
    285              */
    286              } else if ( buf[len-1] < 16 && buf[len-1] > 1) {
    287                INT08U i   = buf[len-1];                       // 获取填充值
    288                INT08U *p  = &buf[len-i];                      // 指向开始填充的字节地址
    289                for (i-=1;i > 0;i--,p++) {
    290                  if ( *p != *(p+1) )                         // 如果相邻两个字节的值不相等
    291                    break;                                    // 说明不是填充值，直接跳出
    292                }
    293                if (i==0)                                     // 如果较完成，说明是填充字节
    294                  len -= buf[len-1];                          // 获取有效数据帧字节数
    295              }
    296          #endif
    297              return      len;                                // 重新赋值给接收计数器
   \                     MB_AESCbcDecrypt: (+1)
   \   00000000   0x4608             MOV      R0,R1
   \   00000002   0x4770             BX       LR               ;; return
    298          }
    299          
    300          /*******************************************************************************
    301           * 名    称： MB_AESCbcEncrypt()
    302           * 功    能： 发送数据加密码
    303           * 入口参数： buf 输入发送缓冲区,len 输入要加密的缓冲区长度
    304           * 出口参数： 加密后的长度
    305           * 作　 　者： 无名沈
    306           * 创建日期： 2014-03-28
    307           * 修    改：
    308           * 修改日期：
    309           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    310          INT16U MB_AESCbcEncrypt(INT08U *buf, INT16U len)
    311          {
    312          #if MB_AES_EN == DEF_ENABLED
    313              INT08U       temp;
    314              
    315              memset(mbaesKey.rd_key, 0, sizeof(mbaesKey.rd_key));// 清零扩展密钥
    316              AES_SetEncryptKey(  "scw->ll->zs->scw",         // 密钥
    317                                  128, 		                // 128位方式，还有192和256位方式
    318                                 &mbaesKey);			        // 扩展密钥
    319              /***********************************************
    320              * 描述： 设置密钥向量
    321              */
    322              memcpy((INT08U*)mbuserIvec,(INT08U*)&mbszIvec[0], 16);// 向量
    323              temp    = len & 0x0f;
    324              if ( temp != 0) {
    325                temp    = 16 - temp;
    326                memset((INT08U*)&buf[len],temp,temp);
    327                len = len + temp;
    328              }
    329              AES_CbcEnOrDecrypt((INT08U*)&buf[0],             // 待解密缓冲区
    330                                 (INT08U*)&buf[0],             // 解密后的缓冲区
    331                                  len,	                    // 缓冲区长度
    332                                 (AES_KEY*)&mbaesKey, 		// 扩展密钥
    333                                 (INT08U*)mbuserIvec, 		    // 向量
    334                                  AES_ENCRYPT);		        // 加密
    335          #endif
    336              return len;
   \                     MB_AESCbcEncrypt: (+1)
   \   00000000   0x4608             MOV      R0,R1
   \   00000002   0x4770             BX       LR               ;; return
    337          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     userKey

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     ChipInfo

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x........         DC32     userIvec

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x........         DC32     userKey+0x14
    338          
    339          /*******************************************************************************
    340           * 				end of file
    341           *******************************************************************************/ 
    342          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   AES_CbcDecrypt
        16   -> AES_cbc_encrypt
       8   AES_CbcInitKey
         8   -> AES_GetUserKey
         0   -> AES_set_decrypt_key
         8   -> __aeabi_memset4
      16   AES_CbcInitKeyForApp
        16   -> AES_GetUserKeyForApp
         0   -> AES_set_decrypt_key
         0   -> AES_set_encrypt_key
        16   -> __aeabi_memset4
      16   AES_CbcInitViec
        16   -> BSP_GetChipInfo
        16   -> __aeabi_memcpy4
       0   AES_GetUserKey
       0   AES_GetUserKeyForApp
       0   MB_AESCbcDecrypt
       0   MB_AESCbcEncrypt


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
      18  AES_CbcDecrypt
      42  AES_CbcInitKey
      60  AES_CbcInitKeyForApp
      32  AES_CbcInitViec
      68  AES_GetUserKey
      68  AES_GetUserKeyForApp
       4  MB_AESCbcDecrypt
       4  MB_AESCbcEncrypt
      20  userIvec
     264  userKey
          aesKey

 
 284 bytes in section .bss
 312 bytes in section .text
 
 312 bytes of CODE memory
 284 bytes of DATA memory

Errors: none
Warnings: none

###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       13/Dec/2017  10:41:20
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  F:\iar\NC199B-100\Library\Source\BSP\Driver\Display.c
#    Command line =  
#        F:\iar\NC199B-100\Library\Source\BSP\Driver\Display.c -D
#        USE_STDPERIPH_DRIVER -D _STM32F10X_HD -D STM32F10X_CL -D DEBUG -D
#        STM32F103RC -D STM32_FLASH_SIZE=256 -D HSE_VALUE=25000000 -lCN
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\List\
#        -o
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        F:\iar\NC199B-100\Library\Project\IAR\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\User\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\AES\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Config\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\OS\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\User\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Source\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Port\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\OS\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Config\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Protocol\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Iap\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Driver\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\IAR\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\uCOS-III\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\CMSIS\CM3\CoreSupport\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\CMSIS\CM3\DeviceSupport\ST\STM32F10x\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\STM32F10x_StdPeriph_Driver\inc\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-CPU\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-CPU\ARM-Cortex-M3\IAR\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-LIB\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\OSAL\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\OSAL\OS\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\OS\uCOS-III\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\Source\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\Source\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\FatFs\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\FatFs\option\ -Om
#        --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\List\Display.lst
#    Object file  =  
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\Obj\Display.o
#
###############################################################################

F:\iar\NC199B-100\Library\Source\BSP\Driver\Display.c
      1          #include "stm32f10x.h"
      2          #include <stdio.h>
      3          #include "SZ_STM32F107VC_LIB.h"
      4          #include "DS3231.h"
      5          #include "I2C_CLK.h"
      6          #include "Display.h"
      7          #include "delay.h"
      8          #include "POWER_MACRO.h"
      9          #include "SPI_CS5463_AC.h"
     10           
     11          #include 	"Display.h"  
     12          #include 	"string.h"
     13          
     14          #include <includes.h>
     15          
     16          //定义端口及功能引脚---------------------------------------------------------------
     17          //#define     DDR_7219    DDRB 
     18          //#define     PINT_7219   PINB
     19          //#define     PORT_7219   PORTB  
     20          //#define     CS_7219     4                       //数据锁存
     21          
     22          //max7219寄存器地址定义-------------------------------------------------------------
     23          #define     NoOp        0x00                    // 空操作寄存器
     24          #define     Digit0      0x01                    // 数码管1寄存器
     25          #define     Digit1      0x02                    // 数码管2寄存器
     26          #define     Digit2      0x03                    // 数码管3寄存器
     27          #define     Digit3      0x04                    // 数码管4寄存器
     28          #define     Digit4      0x05                    // 数码管5寄存器
     29          #define     Digit5      0x06                    // 数码管6寄存器
     30          #define     Digit6      0x07                    // 数码管7寄存器
     31          #define     Digit7      0x08                    // 数码管8寄存器
     32          /**/
     33          #define     DecodeMode  0x09                    // 译码模式寄存器
     34          #define     Intensity   0x0a                    // 亮度寄存器
     35          #define     ScanLimit   0x0b                    // 扫描位数寄存器
     36          #define     ShutDown    0x0c                    // 低功耗模式寄存器
     37          #define     DisplayTest 0x0f                    // 显示测试寄存器
     38          //max7219控制寄存器命令
     39          #define     ShutdownMode    0x00                // 低功耗方式
     40          #define     NormalOperation 0x01                // 正常操作方式
     41          //#define     DecodeDigit     0xff                // 译码设置，8位均为BCD码;对8个数都编码   
     42          #define     NoDecodeDigit   0x00                // 译码设置，对8个数都不编码   
     43          #define     ScanDigit       0x07                // 扫描位数设置，显示8位数码管
     44          //#define   ScanDigit 0x03                      // 扫描位数设置，显示8位数码管
     45          #define   	IntensityGrade  0x2a                // 亮度级别设置
     46          //#define     IntensityGrade  0x03              // 亮度级别设置
     47          #define     TestMode    0x01                    // 显示测试模式 
     48          #define     TextEnd     0x00                    // 显示测试结束，恢复正常工作模式
     49          
     50          
     51          #define RCC_LED_DIS      		RCC_APB2Periph_GPIOD
     52          #define MOSI_DIS                GPIO_Pin_8
     53          #define SCK_DIS                 GPIO_Pin_10
     54          #define CS_DIS                  GPIO_Pin_9
     55          #define LED_DIS_PORT            GPIOD
     56          
     57          
     58          /**-------------------------------------------------------
     59            * @函数名 LED_DIS_Config
     60            * @功能   初始化LED的端口
     61            * @参数   无
     62            * @返回值 无
     63          ***------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
     64          void LED_DIS_Config(void)
     65          {
   \                     LED_DIS_Config: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     66            GPIO_InitTypeDef GPIO_InitStructure;
     67            /* Enable GPIOB, GPIOC and AFIO clock */
     68            RCC_APB2PeriphClockCmd(RCC_LED_DIS , ENABLE);
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0x2020             MOVS     R0,#+32
   \   00000006   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     69              
     70            /* LEDs pins configuration */
     71            GPIO_InitStructure.GPIO_Pin = MOSI_DIS | SCK_DIS | CS_DIS;
   \   0000000A   0xF44F 0x60E0      MOV      R0,#+1792
   \   0000000E   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     72            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   00000012   0x2003             MOVS     R0,#+3
   \   00000014   0xF88D 0x0002      STRB     R0,[SP, #+2]
     73            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   \   00000018   0x2010             MOVS     R0,#+16
   \   0000001A   0xF88D 0x0003      STRB     R0,[SP, #+3]
     74            GPIO_Init(LED_DIS_PORT, &GPIO_InitStructure);
   \   0000001E   0x4669             MOV      R1,SP
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable18  ;; 0x40011400
   \   00000024   0x.... 0x....      BL       GPIO_Init
     75          }
   \   00000028   0xBD01             POP      {R0,PC}          ;; return
     76          
     77          
     78          //------------------------------------------------------------------------
     79          //  名  称 ：void WriteCS_DIS( uint8_t temp )
     80          //  功  能 ：设置 CS_DIS
     81          // 入口参数：无
     82          // 出口参数：无
     83          //------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
     84          void WriteCS_DIS(uint8_t temp)
     85          {
     86          	if( temp )						// 端口输出高电平
   \                     WriteCS_DIS: (+1)
   \   00000000   0x.... 0x....      LDR.W    R2,??DataTable18  ;; 0x40011400
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xF44F 0x7100      MOV      R1,#+512
   \   0000000A   0x4610             MOV      R0,R2
   \   0000000C   0xD001             BEQ.N    ??WriteCS_DIS_0
     87          	{
     88          		GPIO_SetBits(LED_DIS_PORT, CS_DIS);				//PD2 置1
   \   0000000E   0x.... 0x....      B.W      GPIO_SetBits
     89          	}
     90          	else
     91          	{
     92          		GPIO_ResetBits(LED_DIS_PORT, CS_DIS);			//PD2 置0
   \                     ??WriteCS_DIS_0: (+1)
   \   00000012   0x.... 0x....      B.W      GPIO_ResetBits
     93          	}
     94          }
     95          //------------------------------------------------------------------------
     96          //  名  称 ：void WriteSCK1( uint8_t temp )
     97          //  功  能 ：设置 SCK0
     98          // 入口参数：无
     99          // 出口参数：无
    100          //------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    101          void WriteSCK1(uint8_t temp)
    102          {
    103          	if( temp )						// 端口输出高电平
   \                     WriteSCK1: (+1)
   \   00000000   0x.... 0x....      LDR.W    R2,??DataTable18  ;; 0x40011400
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xF44F 0x6180      MOV      R1,#+1024
   \   0000000A   0x4610             MOV      R0,R2
   \   0000000C   0xD001             BEQ.N    ??WriteSCK1_0
    104          	{
    105          		GPIO_SetBits(LED_DIS_PORT, SCK_DIS);
   \   0000000E   0x.... 0x....      B.W      GPIO_SetBits
    106          	}
    107          	else
    108          	{
    109          		GPIO_ResetBits(LED_DIS_PORT, SCK_DIS);
   \                     ??WriteSCK1_0: (+1)
   \   00000012   0x.... 0x....      B.W      GPIO_ResetBits
    110          	}
    111          }
    112          
    113          
    114          //------------------------------------------------------------------------
    115          //  名  称 ：void WriteMOSI1( uint8_t temp )
    116          //  功  能 ：设置 MOSI1
    117          // 入口参数：无
    118          // 出口参数：无
    119          //------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    120          void WriteMOSI1(uint8_t temp)
    121          {	
    122          	if( temp )					
   \                     WriteMOSI1: (+1)
   \   00000000   0x.... 0x....      LDR.W    R2,??DataTable18  ;; 0x40011400
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xF44F 0x7180      MOV      R1,#+256
   \   0000000A   0x4610             MOV      R0,R2
   \   0000000C   0xD001             BEQ.N    ??WriteMOSI1_0
    123          	{
    124          		GPIO_SetBits(LED_DIS_PORT, MOSI_DIS);
   \   0000000E   0x.... 0x....      B.W      GPIO_SetBits
    125          	}
    126          	else
    127          	{
    128          		GPIO_ResetBits(LED_DIS_PORT, MOSI_DIS);
   \                     ??WriteMOSI1_0: (+1)
   \   00000012   0x.... 0x....      B.W      GPIO_ResetBits
    129          	}
    130          }
    131          
    132          
    133          //---------------------------------------------------------------------------------
    134          //函数名称:             SentByte_SPI()
    135          //功    能:             SPI发送一字节数据
    136          //入口参数:             Data8
    137          //出口参数:             无
    138          //说    明:				以模拟SPI总线方式发送数据
    139          //----------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    140          void SentByte_SPI1(uint8_t ch)
    141          {
   \                     SentByte_SPI1: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    142          	uint8_t i,temp;   
    143          	
    144          	WriteSCK1 ( 0 );
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x.... 0x....      BL       WriteSCK1
    145          	
    146              for (i=0;i<8;i++)
   \   0000000A   0x2500             MOVS     R5,#+0
   \   0000000C   0xE009             B.N      ??SentByte_SPI1_0
    147              {
    148          		temp=ch&0x80;
    149              	ch=ch<<1;
    150                  if(temp)
    151                  {
    152                  	WriteMOSI1( 1 );	
    153          
    154                  	WriteSCK1 ( 0 );
    155          
    156          //            NOP();
    157            
    158                  	WriteSCK1 ( 1 );	        	
    159                  }
    160                  else
    161                  {
    162                  	WriteMOSI1( 0 );	
   \                     ??SentByte_SPI1_1: (+1)
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x.... 0x....      BL       WriteMOSI1
    163          
    164                      WriteSCK1 ( 0 );
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x.... 0x....      BL       WriteSCK1
    165          
    166          //            NOP();
    167                      
    168                  	WriteSCK1 ( 1 );
   \   0000001A   0x2001             MOVS     R0,#+1
   \   0000001C   0x.... 0x....      BL       WriteSCK1
    169                  }
   \                     ??SentByte_SPI1_2: (+1)
   \   00000020   0x1C6D             ADDS     R5,R5,#+1
   \                     ??SentByte_SPI1_0: (+1)
   \   00000022   0x2D08             CMP      R5,#+8
   \   00000024   0xDA0E             BGE.N    ??SentByte_SPI1_3
   \   00000026   0xF004 0x0080      AND      R0,R4,#0x80
   \   0000002A   0x0064             LSLS     R4,R4,#+1
   \   0000002C   0x2800             CMP      R0,#+0
   \   0000002E   0xD0EE             BEQ.N    ??SentByte_SPI1_1
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0x.... 0x....      BL       WriteMOSI1
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x.... 0x....      BL       WriteSCK1
   \   0000003C   0x2001             MOVS     R0,#+1
   \   0000003E   0x.... 0x....      BL       WriteSCK1
   \   00000042   0xE7ED             B.N      ??SentByte_SPI1_2
    170              }
    171              
    172          //    NOP();
    173              
    174              WriteSCK1 ( 0 );
   \                     ??SentByte_SPI1_3: (+1)
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0xE8BD 0x4032      POP      {R1,R4,R5,LR}
   \   0000004A   0x....             B.N      WriteSCK1
    175          }
    176          
    177          //----------------------------------------------------------------------------
    178          //函数名称:   SentByteTo7219()
    179          //功    能:   向7219发送1Byte数据或命令
    180          //入口参数:   addr:   数据接收地址
    181          //            Data:   要存的数据
    182          //出口参数:   无
    183          //-----------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    184          void SentByteTo7219(uint8_t Addr,uint8_t Data) 
    185          {
   \                     SentByteTo7219: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    186            	 WriteCS_DIS( 0 );			   					   		
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x.... 0x....      BL       WriteCS_DIS
    187            	 SentByte_SPI1( Addr );		                //送地址											
   \   0000000C   0x4620             MOV      R0,R4
   \   0000000E   0x.... 0x....      BL       SentByte_SPI1
    188            	 SentByte_SPI1( Data );                    	//送数据
   \   00000012   0x4628             MOV      R0,R5
   \   00000014   0x.... 0x....      BL       SentByte_SPI1
    189            	 WriteCS_DIS( 1 );							//数据锁存,关7219接收		  									
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0xE8BD 0x4032      POP      {R1,R4,R5,LR}
   \   0000001E   0x....             B.N      WriteCS_DIS
    190          }
    191          
    192          
    193          //-------------------------------------------------------------------
    194          //函数名称:     Init7219 ()
    195          //功    能:     7219初始化
    196          //入口参数:     无
    197          //出口参数:     无
    198          //-------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    199          void Init7219 (void)
    200          {
   \                     Init7219: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    201          //	InitIOForSPI1();								//SPI端口初始化IO口
    202          	
    203              SentByteTo7219 (DisplayTest,TextEnd);         	// 设置工作模式
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x200F             MOVS     R0,#+15
   \   00000006   0x.... 0x....      BL       SentByteTo7219
    204          	SentByteTo7219 (ScanLimit,ScanDigit);         	// 设置扫描界限
   \   0000000A   0x2107             MOVS     R1,#+7
   \   0000000C   0x200B             MOVS     R0,#+11
   \   0000000E   0x.... 0x....      BL       SentByteTo7219
    205              SentByteTo7219 (DecodeMode,NoDecodeDigit);      // 设置不译码模式
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0x2009             MOVS     R0,#+9
   \   00000016   0x.... 0x....      BL       SentByteTo7219
    206              SentByteTo7219 (Intensity,IntensityGrade);    	// 设置亮度
   \   0000001A   0x212A             MOVS     R1,#+42
   \   0000001C   0x200A             MOVS     R0,#+10
   \   0000001E   0x.... 0x....      BL       SentByteTo7219
    207              SentByteTo7219 (ShutDown,NormalOperation);    	// 设置为正常工作模式
   \   00000022   0x2101             MOVS     R1,#+1
   \   00000024   0x200C             MOVS     R0,#+12
   \   00000026   0xE8BD 0x4004      POP      {R2,LR}
   \   0000002A   0x....             B.N      SentByteTo7219
    208          }
    209          

   \                                 In section .data, align 4
    210          uint8_t LedNumCode[]={0x7E,0x30,0x6D,0x79,0x33,0x5B,0x5F,0x70,0x7F,0x7B,0x77,
   \                     LedNumCode:
   \   00000000   0x7E 0x30          DC8 126, 48, 109, 121, 51, 91, 95, 112, 127, 123, 119, 31, 78, 61, 79
   \              0x6D 0x79    
   \              0x33 0x5B    
   \              0x5F 0x70    
   \              0x7F 0x7B    
   \              0x77 0x1F    
   \              0x4E 0x3D    
   \              0x4F         
   \   0000000F   0x47               DC8 71
    211                             // 0    1    2    3    4    5    6    7    8    9    A 
    212                               0x1F,0x4E,0x3D,0x4F,0x47};  
    213                             // b   C    d     E    F      
    214          
    215          
    216          	 /*			b
    217          			  -----
    218          			 |     |
    219          		   g |	   | c
    220          			 |	h  |
    221          			  -----
    222          			 |     |
    223          		   f |	   | d
    224          			 |	   |
    225          			  -----	 .a
    226          				e
    227                    编码规则： abcd efgh
    228          
    229          	 */
    230          
    231          
    232          /*                   
    233          uint8_t LedCharCode[]={0x77,0x1F,0x4E,0x3D,0x4F,0x47,0x7B,0x37,0x30,0x3c,0x87,0x0e,0x01,
    234                             //   A    B    C    d    E    F    g    H     I   J    K    L   Minus    
    235                                  0x76,0x7E,0x67,0xfE,0x66,0x5B,0x0f,0x3e,0x3e,0x00,0x37,0x33,0x6D};  
    236                                  //n   O    P    Q     r    S    t    U    V    W   X    Y    Z   
    237          */                        

   \                                 In section .data, align 4
    238          uint8_t LedCharCode[] = {0x00,0xE5,0xE5,0xE5,0xE5,0xE5,0xE5,0xE5,0xE5,0xE5,0xE5,0xE5,0xE5,0x01,0xE5,0xE5,
   \                     LedCharCode:
   \   00000000   0x00 0xE5          DC8 0, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 1
   \              0xE5 0xE5    
   \              0xE5 0xE5    
   \              0xE5 0xE5    
   \              0xE5 0xE5    
   \              0xE5 0xE5    
   \              0xE5 0x01    
   \   0000000E   0xE5 0xE5          DC8 229, 229, 126, 48, 109, 121, 51, 91, 95, 112, 127, 123, 229, 229
   \              0x7E 0x30    
   \              0x6D 0x79    
   \              0x33 0x5B    
   \              0x5F 0x70    
   \              0x7F 0x7B    
   \              0xE5 0xE5    
   \   0000001C   0xE5 0xE5          DC8 229, 229, 229, 229, 229, 119, 31, 78, 61, 79, 71, 95, 55, 48, 60
   \              0xE5 0xE5    
   \              0xE5 0x77    
   \              0x1F 0x4E    
   \              0x3D 0x4F    
   \              0x47 0x5F    
   \              0x37 0x30    
   \              0x3C         
   \   0000002B   0x87 0x0E          DC8 135, 14, 229, 118, 126, 103, 254, 102, 91, 15, 62, 62, 229, 55, 51
   \              0xE5 0x76    
   \              0x7E 0x67    
   \              0xFE 0x66    
   \              0x5B 0x0F    
   \              0x3E 0x3E    
   \              0xE5 0x37    
   \              0x33         
   \   0000003A   0x6D 0xE5          DC8 109, 229, 229, 229, 229, 8, 229, 119, 31, 13, 61, 79, 71, 95, 23
   \              0xE5 0xE5    
   \              0xE5 0x08    
   \              0xE5 0x77    
   \              0x1F 0x0D    
   \              0x3D 0x4F    
   \              0x47 0x5F    
   \              0x17         
   \   00000049   0x30 0x3C          DC8 48, 60, 135, 14, 229, 21, 29, 103, 115, 5, 91, 15, 28, 28, 211, 55
   \              0x87 0x0E    
   \              0xE5 0x15    
   \              0x1D 0x67    
   \              0x73 0x05    
   \              0x5B 0x0F    
   \              0x1C 0x1C    
   \              0xD3 0x37    
   \   00000059   0x33 0x6D          DC8 51, 109, 229, 229, 229, 229, 229, 0, 0, 0, 0
   \              0xE5 0xE5    
   \              0xE5 0xE5    
   \              0xE5 0x00    
   \              0x00 0x00    
   \              0x00         
    239          				  	   //  ''   !    "    #    $    %    &    '    (     )   *    +    ,    -    .   /
    240          					  0x7E,0x30,0x6D,0x79,0x33,0x5B,0x5F,0x70,0x7F,0x7B, 
    241          					 // 0    1   2	  3	    4    5    6    7    8    9	
    242          					  0xE5,0xE5,0xE5,0xE5,0xE5,0xE5,0xE5,
    243          					 // :    ;    <    =     >   ?   @
    244          					  0x77,0x1F,0x4E,0x3d,0x4F,0x47,0x5F,0x37,0x30,0x3c,0x87,0x0e,0xE5,
    245                              //  A    B   C    D     E    F    G    H   I    J    K    L    M    
    246                                0x76,0x7E,0x67,0xFE,0x66,0x5B,0x0F,0x3E,0x3E,0xE5,0x37,0x33,0x6D,
    247                              //  N    O    P   Q    R     S    T    U    V   W    X    Y    Z     
    248                                0xE5,0xE5,0xE5,0xE5,0x08,0xE5,
    249                               // [    \    ]    ^    _    `
    250                                0x77,0x1F,0x0D,0x3D,0x4F,0x47,0x5F,0x17,0x30,0x3c,0x87,0x0e,0xE5,
    251                               // a    b   c    d     e    f    g    h    i    j     k    l    m
    252          					  0x15,0x1D,0x67,0x73,0x05,0x5B,0x0F,0x1C,0x1C,0xD3,0x37,0x33,0x6D,
    253                               // n    o   p    q     r    s    t    u    v   w    x    y    z     
    254                                0xE5,0xE5,0xE5,0xE5,0xE5,0x00//
    255                                // {    |    }    ~       灭
    256          					   };     
    257                     
    258          #define     LED_CHAR_NNM    16                  //数码管显示编码个数 
    259          #define     DISPLAY_LED_NUM 4                   //数码管个数   
    260                  
    261          //--------------------------------------------------------------------
    262          //void          DisplayNum (uint32_t Unmber)
    263          //功    能:     用数码管将整型数据显示出来
    264          //入口参数:     number
    265          //出口参数:     无
    266          //-------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    267          void    DisplayNum (uint32_t Unmber)
    268          {
   \                     DisplayNum: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x4604             MOV      R4,R0
    269              unsigned char i  = DISPLAY_LED_NUM;
   \   00000006   0x2504             MOVS     R5,#+4
    270          	unsigned char digit[8] = {Digit0,Digit1,Digit2,Digit3,Digit4,Digit5,Digit6,Digit7};
   \   00000008   0x4668             MOV      R0,SP
   \   0000000A   0x.... 0x....      ADR.W    R1,?_0
   \   0000000E   0xC90C             LDM      R1!,{R2,R3}
   \   00000010   0xC00C             STM      R0!,{R2,R3}
    271          	
    272          	Init7219();                                //显示初始化
   \   00000012   0x.... 0x....      BL       Init7219
   \   00000016   0x466F             MOV      R7,SP
    273          	
    274          	do
    275          	{ 		
    276          		i--;
   \                     ??DisplayNum_0: (+1)
   \   00000018   0x1E6D             SUBS     R5,R5,#+1
    277          		SentByteTo7219(digit[i],LedNumCode[Unmber % 10] );       //从低位到高位显示
   \   0000001A   0x200A             MOVS     R0,#+10
   \   0000001C   0xFBB4 0xF6F0      UDIV     R6,R4,R0
   \   00000020   0x....             LDR.N    R0,??DataTable18_1
   \   00000022   0xEB06 0x0186      ADD      R1,R6,R6, LSL #+2
   \   00000026   0xEBA4 0x0141      SUB      R1,R4,R1, LSL #+1
   \   0000002A   0x5C09             LDRB     R1,[R1, R0]
   \   0000002C   0xB2ED             UXTB     R5,R5
   \   0000002E   0x5DE8             LDRB     R0,[R5, R7]
   \   00000030   0x.... 0x....      BL       SentByteTo7219
    278          		Unmber /= 10;                       
   \   00000034   0x4634             MOV      R4,R6
    279          	} while(i && Unmber);										 //高位的0不显示
   \   00000036   0x2D00             CMP      R5,#+0
   \   00000038   0xD001             BEQ.N    ??DisplayNum_1
   \   0000003A   0x2C00             CMP      R4,#+0
   \   0000003C   0xD1EC             BNE.N    ??DisplayNum_0
    280          	while(i)
   \                     ??DisplayNum_1: (+1)
   \   0000003E   0x2D00             CMP      R5,#+0
   \   00000040   0xD006             BEQ.N    ??DisplayNum_2
    281          	{
    282                  i--;
   \   00000042   0x1E6D             SUBS     R5,R5,#+1
    283                  SentByteTo7219(digit[i],0x00);            //将没有用位的显示清除        
   \   00000044   0x2100             MOVS     R1,#+0
   \   00000046   0xB2ED             UXTB     R5,R5
   \   00000048   0x5DE8             LDRB     R0,[R5, R7]
   \   0000004A   0x.... 0x....      BL       SentByteTo7219
   \   0000004E   0xE7F6             B.N      ??DisplayNum_1
    284              }	  
    285          }
   \                     ??DisplayNum_2: (+1)
   \   00000050   0xBDF7             POP      {R0-R2,R4-R7,PC}  ;; return
    286          
    287          //--------------------------------------------------------------------
    288          //void          DisplayNum_WithZero (uint32_t Unmber)
    289          //功    能:     用数码管将整型数据显示出来
    290          //入口参数:     number
    291          //出口参数:     无
    292          //-------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    293          void    DisplayNum_WithZero (uint32_t Unmber)
    294          {
   \                     DisplayNum_WithZero: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x4604             MOV      R4,R0
    295              unsigned char i  = DISPLAY_LED_NUM;
   \   00000006   0x2504             MOVS     R5,#+4
    296          	unsigned char digit[8] = {Digit0,Digit1,Digit2,Digit3,Digit4,Digit5,Digit6,Digit7};
   \   00000008   0x4668             MOV      R0,SP
   \   0000000A   0x.... 0x....      ADR.W    R1,?_1
   \   0000000E   0xC90C             LDM      R1!,{R2,R3}
   \   00000010   0xC00C             STM      R0!,{R2,R3}
    297          	
    298          	Init7219();                                //显示初始化
   \   00000012   0x.... 0x....      BL       Init7219
   \   00000016   0x466F             MOV      R7,SP
    299          	
    300          	do
    301          	{ 		
    302          		i--;
   \                     ??DisplayNum_WithZero_0: (+1)
   \   00000018   0x1E6D             SUBS     R5,R5,#+1
    303          		SentByteTo7219(digit[i],LedNumCode[Unmber % 10] );       //从低位到高位显示
   \   0000001A   0x200A             MOVS     R0,#+10
   \   0000001C   0xFBB4 0xF6F0      UDIV     R6,R4,R0
   \   00000020   0x....             LDR.N    R0,??DataTable18_1
   \   00000022   0xEB06 0x0186      ADD      R1,R6,R6, LSL #+2
   \   00000026   0xEBA4 0x0141      SUB      R1,R4,R1, LSL #+1
   \   0000002A   0x5C09             LDRB     R1,[R1, R0]
   \   0000002C   0xB2ED             UXTB     R5,R5
   \   0000002E   0x5DE8             LDRB     R0,[R5, R7]
   \   00000030   0x.... 0x....      BL       SentByteTo7219
    304          		Unmber /= 10;                       
   \   00000034   0x4634             MOV      R4,R6
    305          	}while(i);													 //高位的0也显示出来	
   \   00000036   0x2D00             CMP      R5,#+0
   \   00000038   0xD1EE             BNE.N    ??DisplayNum_WithZero_0
    306          	while(i)
   \                     ??DisplayNum_WithZero_1: (+1)
   \   0000003A   0x2D00             CMP      R5,#+0
   \   0000003C   0xD006             BEQ.N    ??DisplayNum_WithZero_2
    307          	{
    308                  i--;
   \   0000003E   0x1E6D             SUBS     R5,R5,#+1
    309                  SentByteTo7219(digit[i],0x00);            //将没有用位的显示清除        
   \   00000040   0x2100             MOVS     R1,#+0
   \   00000042   0xB2ED             UXTB     R5,R5
   \   00000044   0x5DE8             LDRB     R0,[R5, R7]
   \   00000046   0x.... 0x....      BL       SentByteTo7219
   \   0000004A   0xE7F6             B.N      ??DisplayNum_WithZero_1
    310              }	  
    311          }
   \                     ??DisplayNum_WithZero_2: (+1)
   \   0000004C   0xBDF7             POP      {R0-R2,R4-R7,PC}  ;; return
    312          
    313          //--------------------------------------------------------------------
    314          //void          DisplayNumWithDoit (uint32_t Unmber)
    315          //功    能:     用数码管将整型数据显示出来
    316          //入口参数:     number
    317          //出口参数:     无
    318          //-------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    319          void    DisplayNumWithDot (uint32_t Unmber)
    320          {
   \                     DisplayNumWithDot: (+1)
   \   00000000   0xB57C             PUSH     {R2-R6,LR}
    321              unsigned char i  = DISPLAY_LED_NUM;
   \   00000002   0x2404             MOVS     R4,#+4
    322          	unsigned char digit[8] = {Digit0,Digit1,Digit2,Digit3,Digit4,Digit5,Digit6,Digit7};
   \   00000004   0x4669             MOV      R1,SP
   \   00000006   0x.... 0x....      ADR.W    R2,?_2
   \   0000000A   0xCA28             LDM      R2!,{R3,R5}
   \   0000000C   0xC128             STM      R1!,{R3,R5}
   \   0000000E   0x466E             MOV      R6,SP
    323          
    324          	do
    325          	{ 		
    326          		i--;
   \                     ??DisplayNumWithDot_0: (+1)
   \   00000010   0x1E64             SUBS     R4,R4,#+1
    327          		SentByteTo7219(digit[i],LedNumCode[Unmber % 10] + 0x80);       //从低位到高位显示
   \   00000012   0x210A             MOVS     R1,#+10
   \   00000014   0xFBB0 0xF5F1      UDIV     R5,R0,R1
   \   00000018   0x....             LDR.N    R1,??DataTable18_1
   \   0000001A   0xEB05 0x0285      ADD      R2,R5,R5, LSL #+2
   \   0000001E   0xEBA0 0x0042      SUB      R0,R0,R2, LSL #+1
   \   00000022   0x5C40             LDRB     R0,[R0, R1]
   \   00000024   0xF1A0 0x0180      SUB      R1,R0,#+128
   \   00000028   0xB2C9             UXTB     R1,R1
   \   0000002A   0xB2E4             UXTB     R4,R4
   \   0000002C   0x5DA0             LDRB     R0,[R4, R6]
   \   0000002E   0x.... 0x....      BL       SentByteTo7219
    328          		Unmber /= 10;                       
   \   00000032   0x4628             MOV      R0,R5
    329          	}while(i && Unmber);
   \   00000034   0x2C00             CMP      R4,#+0
   \   00000036   0xD001             BEQ.N    ??DisplayNumWithDot_1
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD1E9             BNE.N    ??DisplayNumWithDot_0
    330          		
    331          	while(i)
   \                     ??DisplayNumWithDot_1: (+1)
   \   0000003C   0x2C00             CMP      R4,#+0
   \   0000003E   0xD006             BEQ.N    ??DisplayNumWithDot_2
    332          	{
    333                  i--;
   \   00000040   0x1E64             SUBS     R4,R4,#+1
    334                  SentByteTo7219(digit[i],0x00);            //将没有用位的显示清除        
   \   00000042   0x2100             MOVS     R1,#+0
   \   00000044   0xB2E4             UXTB     R4,R4
   \   00000046   0x5DA0             LDRB     R0,[R4, R6]
   \   00000048   0x.... 0x....      BL       SentByteTo7219
   \   0000004C   0xE7F6             B.N      ??DisplayNumWithDot_1
    335              }	  
    336          }
   \                     ??DisplayNumWithDot_2: (+1)
   \   0000004E   0xBD73             POP      {R0,R1,R4-R6,PC}  ;; return
    337          
    338          //------------------------------------------------------
    339          //函数名称:     DisplayString ()
    340          //功    能:     用数码管显示字符串代码
    341          //入口参数:     String: 字符代码
    342          //出口参数:     无
    343          //显示内容:     String
    344          //内容代码:	    调用格式  DisplayString("ABCD");
    345          //-------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    346          void DisplayString(char * String)
    347          {
   \                     DisplayString: (+1)
   \   00000000   0xB57C             PUSH     {R2-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
    348          	uint8_t   i = 0;
   \   00000004   0x2500             MOVS     R5,#+0
    349          	uint8_t   digit[8] = {Digit0,Digit1,Digit2,Digit3,Digit4,Digit5,Digit6,Digit7};
   \   00000006   0x4668             MOV      R0,SP
   \   00000008   0x.... 0x....      ADR.W    R1,?_3
   \   0000000C   0xC90C             LDM      R1!,{R2,R3}
   \   0000000E   0xC00C             STM      R0!,{R2,R3}
   \   00000010   0xE005             B.N      ??DisplayString_0
    350          	uint8_t   CharTemp;
    351          	
    352          	while( i < DISPLAY_LED_NUM)
    353          	{
    354                  SentByteTo7219(digit[i],0x00);                      //将没有用位的显示清除  
   \                     ??DisplayString_1: (+1)
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0x4668             MOV      R0,SP
   \   00000016   0x5C28             LDRB     R0,[R5, R0]
   \   00000018   0x.... 0x....      BL       SentByteTo7219
    355                    
    356                  i++;    
   \   0000001C   0x1C6D             ADDS     R5,R5,#+1
    357              }	
   \                     ??DisplayString_0: (+1)
   \   0000001E   0x2D04             CMP      R5,#+4
   \   00000020   0xDBF7             BLT.N    ??DisplayString_1
    358          	
    359          	i = 0;
   \   00000022   0x2500             MOVS     R5,#+0
   \   00000024   0xE00A             B.N      ??DisplayString_2
    360          	while(i < DISPLAY_LED_NUM && strlen((char *)String) - i > 0)
    361          	{ 		
    362          		i++;
    363          		if(String[strlen((char *)String) - i] >= ' ')					//显示字母
    364          		{
    365          			CharTemp = String[strlen((char *)String)- i] - ' ';                       	//求显示字符位置,LedCharCode位置
   \                     ??DisplayString_3: (+1)
   \   00000026   0x.... 0x....      BL       strlen
   \   0000002A   0x1B40             SUBS     R0,R0,R5
   \   0000002C   0x5D00             LDRB     R0,[R0, R4]
   \   0000002E   0x3820             SUBS     R0,R0,#+32
    366          			SentByteTo7219(digit[DISPLAY_LED_NUM - i],LedCharCode[CharTemp]);  	//从低位到高位显示
   \   00000030   0x....             LDR.N    R1,??DataTable18_2
   \   00000032   0xB2C0             UXTB     R0,R0
   \   00000034   0x5C41             LDRB     R1,[R0, R1]
   \   00000036   0x4630             MOV      R0,R6
   \   00000038   0x.... 0x....      BL       SentByteTo7219
    367          //			SentByteTo7219(digit[i],LedCharCode[CharTemp]);  	//从高位到低位显示       
    368          		}   
   \                     ??DisplayString_2: (+1)
   \   0000003C   0x2D04             CMP      R5,#+4
   \   0000003E   0xDA1D             BGE.N    ??DisplayString_4
   \   00000040   0x4620             MOV      R0,R4
   \   00000042   0x.... 0x....      BL       strlen
   \   00000046   0x1B40             SUBS     R0,R0,R5
   \   00000048   0xD018             BEQ.N    ??DisplayString_4
   \   0000004A   0x1C6D             ADDS     R5,R5,#+1
   \   0000004C   0xB2ED             UXTB     R5,R5
   \   0000004E   0x4620             MOV      R0,R4
   \   00000050   0x.... 0x....      BL       strlen
   \   00000054   0x4669             MOV      R1,SP
   \   00000056   0x1B49             SUBS     R1,R1,R5
   \   00000058   0x790E             LDRB     R6,[R1, #+4]
   \   0000005A   0x1B40             SUBS     R0,R0,R5
   \   0000005C   0x5D00             LDRB     R0,[R0, R4]
   \   0000005E   0x2820             CMP      R0,#+32
   \   00000060   0x4620             MOV      R0,R4
   \   00000062   0xDAE0             BGE.N    ??DisplayString_3
    369          		else													//显示数字
    370          		{
    371          			CharTemp = String[strlen((char *)String) - i] - '0';                      	//求显示字符位置,LedCharCode位置
   \   00000064   0x.... 0x....      BL       strlen
   \   00000068   0x1B40             SUBS     R0,R0,R5
   \   0000006A   0x5D00             LDRB     R0,[R0, R4]
   \   0000006C   0x3830             SUBS     R0,R0,#+48
    372          			SentByteTo7219(digit[DISPLAY_LED_NUM - i],LedNumCode[CharTemp]);   	//从低位到高位显示 
   \   0000006E   0x....             LDR.N    R1,??DataTable18_1
   \   00000070   0xB2C0             UXTB     R0,R0
   \   00000072   0x5C41             LDRB     R1,[R0, R1]
   \   00000074   0x4630             MOV      R0,R6
   \   00000076   0x.... 0x....      BL       SentByteTo7219
   \   0000007A   0xE7DF             B.N      ??DisplayString_2
    373          //			SentByteTo7219(digit[i],LedNumCode[CharTemp]);   	//从高位到低位显示     			
    374          		}        
    375          	}
    376          }
   \                     ??DisplayString_4: (+1)
   \   0000007C   0xBD73             POP      {R0,R1,R4-R6,PC}  ;; return
    377          
    378          
    379          //------------------------------------------------------
    380          //函数名称:     DisplayString_WithDot ()
    381          //功    能:     用数码管显示字符串代码,带小数点
    382          //入口参数:     String: 字符代码
    383          //出口参数:     无
    384          //显示内容:     String
    385          //内容代码:	    调用格式  DisplayString("ABCD");
    386          //-------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    387          void DisplayString_WithDot(char * String)
    388          {
   \                     DisplayString_WithDot: (+1)
   \   00000000   0xB57C             PUSH     {R2-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
    389          	uint8_t   i = 0;
   \   00000004   0x2500             MOVS     R5,#+0
    390          	uint8_t   digit[8] = {Digit0,Digit1,Digit2,Digit3,Digit4,Digit5,Digit6,Digit7};
   \   00000006   0x4668             MOV      R0,SP
   \   00000008   0x.... 0x....      ADR.W    R1,?_4
   \   0000000C   0xC90C             LDM      R1!,{R2,R3}
   \   0000000E   0xC00C             STM      R0!,{R2,R3}
   \   00000010   0xE005             B.N      ??DisplayString_WithDot_0
    391          	uint8_t   CharTemp;
    392          	
    393          	while( i < DISPLAY_LED_NUM)
    394          	{
    395                  SentByteTo7219(digit[i],0x00);                      //将没有用位的显示清除  
   \                     ??DisplayString_WithDot_1: (+1)
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0x4668             MOV      R0,SP
   \   00000016   0x5C28             LDRB     R0,[R5, R0]
   \   00000018   0x.... 0x....      BL       SentByteTo7219
    396                    
    397                  i++;    
   \   0000001C   0x1C6D             ADDS     R5,R5,#+1
    398              }	
   \                     ??DisplayString_WithDot_0: (+1)
   \   0000001E   0x2D04             CMP      R5,#+4
   \   00000020   0xDBF7             BLT.N    ??DisplayString_WithDot_1
    399          	
    400          	i = 0;
   \   00000022   0x2500             MOVS     R5,#+0
   \   00000024   0xE00D             B.N      ??DisplayString_WithDot_2
    401          	while(i < DISPLAY_LED_NUM && strlen((char *)String) - i > 0)
    402          	{ 		
    403          		i++;
    404          		if(i == 4)
    405          		{
    406          			if(String[strlen((char *)String) - i] >= ' ')					//显示字母
    407          			{
    408          				CharTemp = String[strlen((char *)String)- i] - ' ';                       	//求显示字符位置,LedCharCode位置
   \                     ??DisplayString_WithDot_3: (+1)
   \   00000026   0x.... 0x....      BL       strlen
   \   0000002A   0x1B40             SUBS     R0,R0,R5
   \   0000002C   0x5D00             LDRB     R0,[R0, R4]
   \   0000002E   0x3820             SUBS     R0,R0,#+32
    409          				SentByteTo7219(digit[DISPLAY_LED_NUM - i],LedCharCode[CharTemp] + 0x80);  	//从低位到高位显示
   \   00000030   0x....             LDR.N    R1,??DataTable18_2
   \   00000032   0xB2C0             UXTB     R0,R0
   \   00000034   0x5C40             LDRB     R0,[R0, R1]
   \   00000036   0xF1A0 0x0180      SUB      R1,R0,#+128
   \   0000003A   0xB2C9             UXTB     R1,R1
   \   0000003C   0x4630             MOV      R0,R6
   \   0000003E   0x.... 0x....      BL       SentByteTo7219
    410          //				SentByteTo7219(digit[i],LedCharCode[CharTemp]);  	//从高位到低位显示       
    411          			}   
   \                     ??DisplayString_WithDot_2: (+1)
   \   00000042   0x2D04             CMP      R5,#+4
   \   00000044   0xDA41             BGE.N    ??DisplayString_WithDot_4
   \   00000046   0x4620             MOV      R0,R4
   \   00000048   0x.... 0x....      BL       strlen
   \   0000004C   0x1B40             SUBS     R0,R0,R5
   \   0000004E   0xD03C             BEQ.N    ??DisplayString_WithDot_4
   \   00000050   0x1C6D             ADDS     R5,R5,#+1
   \   00000052   0xB2ED             UXTB     R5,R5
   \   00000054   0x4668             MOV      R0,SP
   \   00000056   0x1B40             SUBS     R0,R0,R5
   \   00000058   0x7906             LDRB     R6,[R0, #+4]
   \   0000005A   0x2D04             CMP      R5,#+4
   \   0000005C   0x4620             MOV      R0,R4
   \   0000005E   0xD115             BNE.N    ??DisplayString_WithDot_5
   \   00000060   0x.... 0x....      BL       strlen
   \   00000064   0x1B40             SUBS     R0,R0,R5
   \   00000066   0x5D00             LDRB     R0,[R0, R4]
   \   00000068   0x2820             CMP      R0,#+32
   \   0000006A   0x4620             MOV      R0,R4
   \   0000006C   0xDADB             BGE.N    ??DisplayString_WithDot_3
    412          			else													//显示数字
    413          			{
    414          				CharTemp = String[strlen((char *)String) - i] - '0';                      	//求显示字符位置,LedCharCode位置
   \   0000006E   0x.... 0x....      BL       strlen
   \   00000072   0x1B40             SUBS     R0,R0,R5
   \   00000074   0x5D00             LDRB     R0,[R0, R4]
   \   00000076   0x3830             SUBS     R0,R0,#+48
    415          				SentByteTo7219(digit[DISPLAY_LED_NUM - i],LedNumCode[CharTemp] + 0x80);   	//从低位到高位显示 
   \   00000078   0x....             LDR.N    R1,??DataTable18_1
   \   0000007A   0xB2C0             UXTB     R0,R0
   \   0000007C   0x5C40             LDRB     R0,[R0, R1]
   \   0000007E   0xF1A0 0x0180      SUB      R1,R0,#+128
   \   00000082   0xB2C9             UXTB     R1,R1
   \   00000084   0x4630             MOV      R0,R6
   \   00000086   0x.... 0x....      BL       SentByteTo7219
   \   0000008A   0xE7DA             B.N      ??DisplayString_WithDot_2
    416          //				SentByteTo7219(digit[i],LedNumCode[CharTemp]);   	//从高位到低位显示     			
    417          			}
    418          		}
    419          		else
    420          		{
    421          			if(String[strlen((char *)String) - i] >= ' ')					//显示字母
   \                     ??DisplayString_WithDot_5: (+1)
   \   0000008C   0x.... 0x....      BL       strlen
   \   00000090   0x1B40             SUBS     R0,R0,R5
   \   00000092   0x5D00             LDRB     R0,[R0, R4]
   \   00000094   0x2820             CMP      R0,#+32
   \   00000096   0x4620             MOV      R0,R4
   \   00000098   0xDB0B             BLT.N    ??DisplayString_WithDot_6
    422          			{
    423          				CharTemp = String[strlen((char *)String)- i] - ' ';                       	//求显示字符位置,LedCharCode位置
   \   0000009A   0x.... 0x....      BL       strlen
   \   0000009E   0x1B40             SUBS     R0,R0,R5
   \   000000A0   0x5D00             LDRB     R0,[R0, R4]
   \   000000A2   0x3820             SUBS     R0,R0,#+32
    424          				SentByteTo7219(digit[DISPLAY_LED_NUM - i],LedCharCode[CharTemp]);  	//从低位到高位显示
   \   000000A4   0x....             LDR.N    R1,??DataTable18_2
   \   000000A6   0xB2C0             UXTB     R0,R0
   \   000000A8   0x5C41             LDRB     R1,[R0, R1]
   \   000000AA   0x4630             MOV      R0,R6
   \   000000AC   0x.... 0x....      BL       SentByteTo7219
   \   000000B0   0xE7C7             B.N      ??DisplayString_WithDot_2
    425          //				SentByteTo7219(digit[i],LedCharCode[CharTemp]);  	//从高位到低位显示       
    426          			}   
    427          			else													//显示数字
    428          			{
    429          				CharTemp = String[strlen((char *)String) - i] - '0';                      	//求显示字符位置,LedCharCode位置
   \                     ??DisplayString_WithDot_6: (+1)
   \   000000B2   0x.... 0x....      BL       strlen
   \   000000B6   0x1B40             SUBS     R0,R0,R5
   \   000000B8   0x5D00             LDRB     R0,[R0, R4]
   \   000000BA   0x3830             SUBS     R0,R0,#+48
    430          				SentByteTo7219(digit[DISPLAY_LED_NUM - i],LedNumCode[CharTemp]);   	//从低位到高位显示 
   \   000000BC   0x....             LDR.N    R1,??DataTable18_1
   \   000000BE   0xB2C0             UXTB     R0,R0
   \   000000C0   0x5C41             LDRB     R1,[R0, R1]
   \   000000C2   0x4630             MOV      R0,R6
   \   000000C4   0x.... 0x....      BL       SentByteTo7219
   \   000000C8   0xE7BB             B.N      ??DisplayString_WithDot_2
    431          //				SentByteTo7219(digit[i],LedNumCode[CharTemp]);   	//从高位到低位显示     			
    432          			}
    433          		}			        
    434          	}
    435          }
   \                     ??DisplayString_WithDot_4: (+1)
   \   000000CA   0xBD73             POP      {R0,R1,R4-R6,PC}  ;; return
    436          
    437          //------------------------------------------------------
    438          //函数名称:     DisplayABC_2 ()
    439          //功    能:     用数码管显示字符串代码E1、E2、E3、E4
    440          //入口参数:     String: 字符代码
    441          //出口参数:     无
    442          //显示内容:     String
    443          //内容代码:	    调用格式  DisplayString("ABCD");
    444          //-------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    445          void DisplayABC_2(uint_least8_t * String)
    446          {
   \                     DisplayABC_2: (+1)
   \   00000000   0xB57C             PUSH     {R2-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
    447          	uint8_t   i = 0;
   \   00000004   0x2500             MOVS     R5,#+0
    448          	uint8_t   digit[8] = {Digit0,Digit1,Digit2,Digit3,Digit4,Digit5,Digit6,Digit7};
   \   00000006   0x4668             MOV      R0,SP
   \   00000008   0x.... 0x....      ADR.W    R1,?_5
   \   0000000C   0xC90C             LDM      R1!,{R2,R3}
   \   0000000E   0xC00C             STM      R0!,{R2,R3}
   \   00000010   0xE005             B.N      ??DisplayABC_2_0
    449          	uint8_t   CharTemp;
    450          	
    451          	while( i < DISPLAY_LED_NUM)
    452          	{
    453                  SentByteTo7219(digit[i],0x00);                      //将没有用位的显示清除  
   \                     ??DisplayABC_2_1: (+1)
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0x4668             MOV      R0,SP
   \   00000016   0x5C28             LDRB     R0,[R5, R0]
   \   00000018   0x.... 0x....      BL       SentByteTo7219
    454                    
    455                  i++;    
   \   0000001C   0x1C6D             ADDS     R5,R5,#+1
    456              }	
   \                     ??DisplayABC_2_0: (+1)
   \   0000001E   0x2D04             CMP      R5,#+4
   \   00000020   0xDBF7             BLT.N    ??DisplayABC_2_1
    457          	
    458          	i = 0;
   \   00000022   0x2500             MOVS     R5,#+0
   \   00000024   0xE00A             B.N      ??DisplayABC_2_2
    459          	while(i < DISPLAY_LED_NUM && strlen((char *)String) - i > 0)
    460          	{ 		
    461          		i++;
    462          		if(String[strlen((char *)String) - i] >= ' ')					//显示字母
    463          		{
    464          			CharTemp = String[strlen((char *)String)- i] - ' ';                       	//求显示字符位置,LedCharCode位置
   \                     ??DisplayABC_2_3: (+1)
   \   00000026   0x.... 0x....      BL       strlen
   \   0000002A   0x1B40             SUBS     R0,R0,R5
   \   0000002C   0x5D00             LDRB     R0,[R0, R4]
   \   0000002E   0x3820             SUBS     R0,R0,#+32
    465          			SentByteTo7219(digit[i-1],LedCharCode[CharTemp]);  	//从低位到高位显示
   \   00000030   0x....             LDR.N    R1,??DataTable18_2
   \   00000032   0xB2C0             UXTB     R0,R0
   \   00000034   0x5C41             LDRB     R1,[R0, R1]
   \   00000036   0x4630             MOV      R0,R6
   \   00000038   0x.... 0x....      BL       SentByteTo7219
    466          //			SentByteTo7219(digit[i],LedCharCode[CharTemp]);  	//从高位到低位显示       
    467          		}   
   \                     ??DisplayABC_2_2: (+1)
   \   0000003C   0x2D04             CMP      R5,#+4
   \   0000003E   0xDA1E             BGE.N    ??DisplayABC_2_4
   \   00000040   0x4620             MOV      R0,R4
   \   00000042   0x.... 0x....      BL       strlen
   \   00000046   0x1B40             SUBS     R0,R0,R5
   \   00000048   0xD019             BEQ.N    ??DisplayABC_2_4
   \   0000004A   0x1C6D             ADDS     R5,R5,#+1
   \   0000004C   0xB2ED             UXTB     R5,R5
   \   0000004E   0x4620             MOV      R0,R4
   \   00000050   0x.... 0x....      BL       strlen
   \   00000054   0x4669             MOV      R1,SP
   \   00000056   0x1869             ADDS     R1,R5,R1
   \   00000058   0xF811 0x6C01      LDRB     R6,[R1, #-1]
   \   0000005C   0x1B40             SUBS     R0,R0,R5
   \   0000005E   0x5D00             LDRB     R0,[R0, R4]
   \   00000060   0x2820             CMP      R0,#+32
   \   00000062   0x4620             MOV      R0,R4
   \   00000064   0xDADF             BGE.N    ??DisplayABC_2_3
    468          		else													//显示数字
    469          		{
    470          			CharTemp = String[strlen((char *)String) - i] - '0';                      	//求显示字符位置,LedCharCode位置
   \   00000066   0x.... 0x....      BL       strlen
   \   0000006A   0x1B40             SUBS     R0,R0,R5
   \   0000006C   0x5D00             LDRB     R0,[R0, R4]
   \   0000006E   0x3830             SUBS     R0,R0,#+48
    471          			SentByteTo7219(digit[i-1],LedNumCode[CharTemp]);   	//从低位到高位显示 
   \   00000070   0x....             LDR.N    R1,??DataTable18_1
   \   00000072   0xB2C0             UXTB     R0,R0
   \   00000074   0x5C41             LDRB     R1,[R0, R1]
   \   00000076   0x4630             MOV      R0,R6
   \   00000078   0x.... 0x....      BL       SentByteTo7219
   \   0000007C   0xE7DE             B.N      ??DisplayABC_2_2
    472          //			SentByteTo7219(digit[i],LedNumCode[CharTemp]);   	//从高位到低位显示     			
    473          		}        
    474          	}
    475          }
   \                     ??DisplayABC_2_4: (+1)
   \   0000007E   0xBD73             POP      {R0,R1,R4-R6,PC}  ;; return
    476          
    477          
    478          //------------------------------------------------------
    479          //函数名称:MovDisplayChar ()
    480          //功    能:用数码管显示字符即已定字符
    481          //入口参数:character: 字符代码
    482          //出口参数:无
    483          //显示内容:   -   E   H   L   P   Black
    484          //内容代码:	  A	  B	  C	  D	  E	  F	  
    485          //-------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    486          void MovDisplayChar (uint8_t character)
    487          {
   \                     MovDisplayChar: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x4604             MOV      R4,R0
    488          	uint8_t i = DISPLAY_LED_NUM ,j;
    489          	uint8_t digit[8] = {Digit0,Digit1,Digit2,Digit3,Digit4,Digit5,Digit6,Digit7};
   \   00000006   0x4668             MOV      R0,SP
   \   00000008   0x.... 0x....      ADR.W    R1,?_6
   \   0000000C   0xC90C             LDM      R1!,{R2,R3}
   \   0000000E   0xC00C             STM      R0!,{R2,R3}
    490          		
    491          	for(j = 0;j < 12; j++)
   \   00000010   0x2500             MOVS     R5,#+0
   \   00000012   0xE015             B.N      ??MovDisplayChar_0
    492          	{
    493          	 	 i = DISPLAY_LED_NUM;
    494          		 while(i)
    495          		 {
    496                      i--;
   \                     ??MovDisplayChar_1: (+1)
   \   00000014   0x1E76             SUBS     R6,R6,#+1
    497                      SentByteTo7219(digit[i],0x00);            	//将没有用位的显示清除
   \   00000016   0x2100             MOVS     R1,#+0
   \   00000018   0xB2F6             UXTB     R6,R6
   \   0000001A   0x5C30             LDRB     R0,[R6, R0]
   \   0000001C   0x.... 0x....      BL       SentByteTo7219
    498                   }	
   \                     ??MovDisplayChar_2: (+1)
   \   00000020   0x4668             MOV      R0,SP
   \   00000022   0x2E00             CMP      R6,#+0
   \   00000024   0xD1F6             BNE.N    ??MovDisplayChar_1
    499          		 
    500          		SentByteTo7219(digit[j%4],LedNumCode[character%LED_CHAR_NNM]);       //从低位到高位显示   
   \   00000026   0x....             LDR.N    R1,??DataTable18_1
   \   00000028   0xF004 0x020F      AND      R2,R4,#0xF
   \   0000002C   0x5C51             LDRB     R1,[R2, R1]
   \   0000002E   0xF007 0x0203      AND      R2,R7,#0x3
   \   00000032   0x5C10             LDRB     R0,[R2, R0]
   \   00000034   0x.... 0x....      BL       SentByteTo7219
    501          //		DelayX10ms(20);
    502          		Delay(2000000);                
   \   00000038   0x....             LDR.N    R0,??DataTable18_3  ;; 0x1e8480
   \   0000003A   0x.... 0x....      BL       Delay
   \   0000003E   0x1C6D             ADDS     R5,R5,#+1
   \                     ??MovDisplayChar_0: (+1)
   \   00000040   0xB2ED             UXTB     R5,R5
   \   00000042   0x462F             MOV      R7,R5
   \   00000044   0x2F0C             CMP      R7,#+12
   \   00000046   0xDA01             BGE.N    ??MovDisplayChar_3
   \   00000048   0x2604             MOVS     R6,#+4
   \   0000004A   0xE7E9             B.N      ??MovDisplayChar_2
    503          	}
    504          }
   \                     ??MovDisplayChar_3: (+1)
   \   0000004C   0xBDF7             POP      {R0-R2,R4-R7,PC}  ;; return
    505          

   \                                 In section .text, align 2, keep-with-next
    506          void Dis_Test(void)
    507          {
   \                     Dis_Test: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    508          	uint8_t i = 0;
   \   00000002   0x2400             MOVS     R4,#+0
    509          	for(i=0;i<10;i++)
   \   00000004   0xE008             B.N      ??Dis_Test_0
    510          	{
    511          		DisplayNum_WithZero(i*11111111);
   \                     ??Dis_Test_1: (+1)
   \   00000006   0x....             LDR.N    R1,??DataTable18_4  ;; 0xa98ac7
   \   00000008   0x4348             MULS     R0,R1,R0
   \   0000000A   0x.... 0x....      BL       DisplayNum_WithZero
    512          		//Delay(400000);
    513                  BSP_OS_TimeDly(OS_TICKS_PER_SEC/2);
   \   0000000E   0xF44F 0x70FA      MOV      R0,#+500
   \   00000012   0x.... 0x....      BL       BSP_OS_TimeDly
    514          	}
   \   00000016   0x1C64             ADDS     R4,R4,#+1
   \                     ??Dis_Test_0: (+1)
   \   00000018   0xB2E4             UXTB     R4,R4
   \   0000001A   0x4620             MOV      R0,R4
   \   0000001C   0x280A             CMP      R0,#+10
   \   0000001E   0xDBF2             BLT.N    ??Dis_Test_1
    515          }
   \   00000020   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18:
   \   00000000   0x40011400         DC32     0x40011400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_1:
   \   00000000   0x........         DC32     LedNumCode

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_2:
   \   00000000   0x........         DC32     LedCharCode

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_3:
   \   00000000   0x001E8480         DC32     0x1e8480

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_4:
   \   00000000   0x00A98AC7         DC32     0xa98ac7

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x01 0x02          DC8 1, 2, 3, 4, 5, 6, 7, 8
   \              0x03 0x04    
   \              0x05 0x06    
   \              0x07 0x08    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x01 0x02          DC8 1, 2, 3, 4, 5, 6, 7, 8
   \              0x03 0x04    
   \              0x05 0x06    
   \              0x07 0x08    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x01 0x02          DC8 1, 2, 3, 4, 5, 6, 7, 8
   \              0x03 0x04    
   \              0x05 0x06    
   \              0x07 0x08    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x01 0x02          DC8 1, 2, 3, 4, 5, 6, 7, 8
   \              0x03 0x04    
   \              0x05 0x06    
   \              0x07 0x08    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_4:
   \   00000000   0x01 0x02          DC8 1, 2, 3, 4, 5, 6, 7, 8
   \              0x03 0x04    
   \              0x05 0x06    
   \              0x07 0x08    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_5:
   \   00000000   0x01 0x02          DC8 1, 2, 3, 4, 5, 6, 7, 8
   \              0x03 0x04    
   \              0x05 0x06    
   \              0x07 0x08    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_6:
   \   00000000   0x01 0x02          DC8 1, 2, 3, 4, 5, 6, 7, 8
   \              0x03 0x04    
   \              0x05 0x06    
   \              0x07 0x08    
    516          
    517          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   Dis_Test
         8   -> BSP_OS_TimeDly
         8   -> DisplayNum_WithZero
      24   DisplayABC_2
        24   -> SentByteTo7219
        24   -> strlen
      32   DisplayNum
        32   -> Init7219
        32   -> SentByteTo7219
      24   DisplayNumWithDot
        24   -> SentByteTo7219
      32   DisplayNum_WithZero
        32   -> Init7219
        32   -> SentByteTo7219
      24   DisplayString
        24   -> SentByteTo7219
        24   -> strlen
      24   DisplayString_WithDot
        24   -> SentByteTo7219
        24   -> strlen
       8   Init7219
         0   -> SentByteTo7219
         8   -> SentByteTo7219
       8   LED_DIS_Config
         8   -> GPIO_Init
         8   -> RCC_APB2PeriphClockCmd
      32   MovDisplayChar
        32   -> Delay
        32   -> SentByteTo7219
      16   SentByteTo7219
        16   -> SentByte_SPI1
         0   -> WriteCS_DIS
        16   -> WriteCS_DIS
      16   SentByte_SPI1
        16   -> WriteMOSI1
         0   -> WriteSCK1
        16   -> WriteSCK1
       0   WriteCS_DIS
         0   -> GPIO_ResetBits
         0   -> GPIO_SetBits
       0   WriteMOSI1
         0   -> GPIO_ResetBits
         0   -> GPIO_SetBits
       0   WriteSCK1
         0   -> GPIO_ResetBits
         0   -> GPIO_SetBits


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable18
       4  ??DataTable18_1
       4  ??DataTable18_2
       4  ??DataTable18_3
       4  ??DataTable18_4
       8  ?_0
       8  ?_1
       8  ?_2
       8  ?_3
       8  ?_4
       8  ?_5
       8  ?_6
      34  Dis_Test
     128  DisplayABC_2
      82  DisplayNum
      80  DisplayNumWithDot
      78  DisplayNum_WithZero
     126  DisplayString
     204  DisplayString_WithDot
      44  Init7219
      42  LED_DIS_Config
     100  LedCharCode
      16  LedNumCode
      78  MovDisplayChar
      32  SentByteTo7219
      76  SentByte_SPI1
      22  WriteCS_DIS
      22  WriteMOSI1
      22  WriteSCK1

 
   116 bytes in section .data
 1 146 bytes in section .text
 
 1 146 bytes of CODE memory
   116 bytes of DATA memory

Errors: none
Warnings: none

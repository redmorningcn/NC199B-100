###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       23/Nov/2017  13:36:20
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  F:\iar\NC199B-100\Library\Source\BSP\Driver\bsp_ds3231.c
#    Command line =  
#        F:\iar\NC199B-100\Library\Source\BSP\Driver\bsp_ds3231.c -D
#        USE_STDPERIPH_DRIVER -D _STM32F10X_HD -D STM32F10X_CL -D DEBUG -D
#        STM32F103RC -D STM32_FLASH_SIZE=256 -D HSE_VALUE=25000000 -lCN
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\List\
#        -o
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        F:\iar\NC199B-100\Library\Project\IAR\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\User\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\AES\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Config\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\OS\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\User\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Source\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Port\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\OS\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Config\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Protocol\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Iap\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Driver\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\IAR\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\uCOS-III\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\CMSIS\CM3\CoreSupport\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\CMSIS\CM3\DeviceSupport\ST\STM32F10x\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\STM32F10x_StdPeriph_Driver\inc\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-CPU\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-CPU\ARM-Cortex-M3\IAR\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-LIB\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\OSAL\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\OSAL\OS\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\OS\uCOS-III\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\Source\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\Source\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\FatFs\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\FatFs\option\ -Om
#        --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\List\bsp_ds3231.lst
#    Object file  =  
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\Obj\bsp_ds3231.o
#
###############################################################################

F:\iar\NC199B-100\Library\Source\BSP\Driver\bsp_ds3231.c
      1          //#include    "config.h"
      2          //#include    "string.h"
      3          //#include    "CpuDrive.h"
      4          //#include    "HardDrive.h"
      5          
      6          #include    <includes.h>
      7          #include    "bsp_DS3231.h"
      8          #include    "bsp_IIC.h"
      9          
     10          
     11          #define     DS3231_ADDR     		0xd0
     12          #define     DS3231_SEC      		0x00
     13          #define     DS3231_MIN      		0x01
     14          #define     DS3231_HOUR     		0x02
     15          #define     DS3231_DAY      		0x03
     16          #define     DS3231_DATA     		0x04
     17          #define     DS3231_MONTH    		0x05
     18          #define     DS3231_YEAR     		0x06
     19          
     20          #define     DS3231_CONTROL      	0x0E
     21          #define     DS3231_STATUS       	0x0F
     22          #define     DS3231_AGING_OFFSET     0x10
     23          #define     DS3231_TEMP_MSB     	0x11
     24          #define     DS3231_TEMP_LSB     	0x12
     25          
     26          //-------------------------------------------------------------------------------------------------------
     27          //函数名称:         uint8 BCD2HEX(uint8 Bcd)  
     28          //功    能:         将BCD码变为二进制码
     29          //入口参数:         BCD码数据  
     30          //出口参数:         二进行制数
     31          //说明：            
     32          //--------------------------------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
     33          uint8 BCD2HEX(uint8 Bcd)  
     34          {
     35              uint8   Hex;
     36              Hex = (Bcd & 0x0f) + ((Bcd>>4) & 0x0f)*10;
     37              
     38              return Hex;
   \                     BCD2HEX: (+1)
   \   00000000   0xF000 0x010F      AND      R1,R0,#0xF
   \   00000004   0x0900             LSRS     R0,R0,#+4
   \   00000006   0xEB00 0x0280      ADD      R2,R0,R0, LSL #+2
   \   0000000A   0xEB01 0x0042      ADD      R0,R1,R2, LSL #+1
   \   0000000E   0xB2C0             UXTB     R0,R0
   \   00000010   0x4770             BX       LR               ;; return
     39          }
     40          
     41          //-------------------------------------------------------------------------------------------------------
     42          //函数名称:         uint8 BCD2HEX(uint8 Bcd)  
     43          //功    能:         将BCD码变为二进制码
     44          //入口参数:         BCD码数据  
     45          //出口参数:         二进行制数
     46          //说明：            
     47          //--------------------------------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
     48          uint8 HEX2BCD(uint8 Hex)  
     49          {
     50              uint8   Bcd;
     51              
     52              Bcd = Hex %10 + (((Hex/10)%10)<<4);
   \                     HEX2BCD: (+1)
   \   00000000   0x210A             MOVS     R1,#+10
   \   00000002   0xFB90 0xF1F1      SDIV     R1,R0,R1
   \   00000006   0x220A             MOVS     R2,#+10
   \   00000008   0xFB02 0x0011      MLS      R0,R2,R1,R0
   \   0000000C   0x4613             MOV      R3,R2
   \   0000000E   0xFB91 0xF3F3      SDIV     R3,R1,R3
   \   00000012   0xFB02 0x1113      MLS      R1,R2,R3,R1
   \   00000016   0xEB00 0x1001      ADD      R0,R0,R1, LSL #+4
     53              
     54              return Bcd;
   \   0000001A   0xB2C0             UXTB     R0,R0
   \   0000001C   0x4770             BX       LR               ;; return
     55          }
     56          
     57          //-------------------------------------------------------------------------------------------------------
     58          //函数名称:         ReadDS3231Byte()
     59          //功    能:         从DS3231中读出一个字节
     60          //入口参数:         DS3231设备号， 读取数据的地址
     61          //出口参数:         返回读出的值
     62          //说明：            
     63          //--------------------------------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
     64          uint8 ReadDS3231Byte(uint8 addr)  
     65          {
   \                     ReadDS3231Byte: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
     66              uint8   SlaveAddr;
     67              uint8   RecData;	
     68              
     69              SlaveAddr = DS3231_ADDR & (~(0x01));            //从机地址
     70              
     71              StartI2C();                                     //启动IIC总线
   \   00000004   0x.... 0x....      BL       StartI2C
     72             
     73              WriteByteWithI2C(SlaveAddr);                    //写DS3231读取
   \   00000008   0x20D0             MOVS     R0,#+208
   \   0000000A   0x.... 0x....      BL       WriteByteWithI2C
     74              
     75              CheckSlaveAckI2C();                             //读从机应答信号
   \   0000000E   0x.... 0x....      BL       CheckSlaveAckI2C
     76              
     77              WriteByteWithI2C(addr);                         //写DS3231读取
   \   00000012   0x4620             MOV      R0,R4
   \   00000014   0x.... 0x....      BL       WriteByteWithI2C
     78          
     79              CheckSlaveAckI2C();                             //读从机应答信号
   \   00000018   0x.... 0x....      BL       CheckSlaveAckI2C
     80          
     81              StartI2C();                                     //启动IIC总线
   \   0000001C   0x.... 0x....      BL       StartI2C
     82              
     83              SlaveAddr = DS3231_ADDR | 0x01;             	//从机地址
     84          
     85              WriteByteWithI2C(SlaveAddr);                    //写DS3231设备地址
   \   00000020   0x20D1             MOVS     R0,#+209
   \   00000022   0x.... 0x....      BL       WriteByteWithI2C
     86          
     87              CheckSlaveAckI2C();                             //读从机应答信号
   \   00000026   0x.... 0x....      BL       CheckSlaveAckI2C
     88          
     89              RecData = ReadByteWithI2C();                	//接收到的数据
   \   0000002A   0x.... 0x....      BL       ReadByteWithI2C
   \   0000002E   0x4604             MOV      R4,R0
     90              
     91              MasterNoAckI2C();                               //主机应答从机
   \   00000030   0x.... 0x....      BL       MasterNoAckI2C
     92              
     93              StopI2C();                          			//结束IIC总线
   \   00000034   0x.... 0x....      BL       StopI2C
     94              
     95              return  RecData;
   \   00000038   0x4620             MOV      R0,R4
   \   0000003A   0xBD10             POP      {R4,PC}          ;; return
     96          }    
     97          
     98          //-------------------------------------------------------------------------------------------------------
     99          //函数名称:         void WriteDS3231Byte(uint8 addr,uint8   Data)  
    100          //功    能:         写一个字节到DS3231中
    101          //入口参数:         addr:DS3231地址， Data:要写入的数据
    102          //出口参数:         返回读出的值
    103          //--------------------------------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    104          void WriteDS3231Byte(uint8 Addr,uint8   Data)  
    105          {
   \                     WriteDS3231Byte: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    106              uint8   SlaveAddr;
    107              
    108              StartI2C();                                     //启动IIC总线
   \   00000006   0x.... 0x....      BL       StartI2C
    109              
    110              SlaveAddr = DS3231_ADDR & (~(0x01));            //从机地址
    111             
    112              WriteByteWithI2C(SlaveAddr);                    //写DS3231读取
   \   0000000A   0x20D0             MOVS     R0,#+208
   \   0000000C   0x.... 0x....      BL       WriteByteWithI2C
    113              
    114              CheckSlaveAckI2C();                             //读从机应答信号
   \   00000010   0x.... 0x....      BL       CheckSlaveAckI2C
    115              
    116              WriteByteWithI2C(Addr);                         //写DS3231操作地址
   \   00000014   0x4620             MOV      R0,R4
   \   00000016   0x.... 0x....      BL       WriteByteWithI2C
    117              
    118              CheckSlaveAckI2C();                             //读从机应答信号
   \   0000001A   0x.... 0x....      BL       CheckSlaveAckI2C
    119              
    120              WriteByteWithI2C(Data);                         //写DS3231数据
   \   0000001E   0x4628             MOV      R0,R5
   \   00000020   0x.... 0x....      BL       WriteByteWithI2C
    121              
    122              CheckSlaveAckI2C();                             //读从机应答信号
   \   00000024   0x.... 0x....      BL       CheckSlaveAckI2C
    123              
    124              StopI2C();                          			//结束IIC总线
   \   00000028   0xE8BD 0x4031      POP      {R0,R4,R5,LR}
   \   0000002C   0x.... 0x....      B.W      StopI2C
    125          }      
    126          
    127          //-------------------------------------------------------------------------------------------------------
    128          //函数名称:         stcTime     ReadTime(void)  
    129          //功    能:         从DS3231中读出时间
    130          //入口参数:         顾虑读出来的时间数据
    131          //出口参数:         返回读出的时间
    132          //--------------------------------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    133          uint8	ReadTime(stcTime  *  sTime)  
    134          {
   \                     ReadTime: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x4604             MOV      R4,R0
    135              uint8   	Sec;
    136              uint8   	Min;
    137              uint8       Hour;	
    138              uint8       Data;
    139              uint8       Month;
    140              uint8       Year;
    141              	
    142              Sec     = ReadDS3231Byte(DS3231_SEC); 
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x.... 0x....      BL       ReadDS3231Byte
   \   0000000C   0x4605             MOV      R5,R0
    143              Min     = ReadDS3231Byte(DS3231_MIN);  
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0x.... 0x....      BL       ReadDS3231Byte
   \   00000014   0x4606             MOV      R6,R0
    144              Hour    = ReadDS3231Byte(DS3231_HOUR);  
   \   00000016   0x2002             MOVS     R0,#+2
   \   00000018   0x.... 0x....      BL       ReadDS3231Byte
   \   0000001C   0x4607             MOV      R7,R0
    145              Data    = ReadDS3231Byte(DS3231_DATA); 
   \   0000001E   0x2004             MOVS     R0,#+4
   \   00000020   0x.... 0x....      BL       ReadDS3231Byte
   \   00000024   0x4680             MOV      R8,R0
    146              Month   = ReadDS3231Byte(DS3231_MONTH); 
   \   00000026   0x2005             MOVS     R0,#+5
   \   00000028   0x.... 0x....      BL       ReadDS3231Byte
   \   0000002C   0x4681             MOV      R9,R0
    147              Year    = ReadDS3231Byte(DS3231_YEAR);    
   \   0000002E   0x2006             MOVS     R0,#+6
   \   00000030   0x.... 0x....      BL       ReadDS3231Byte
   \   00000034   0x4682             MOV      R10,R0
    148              	
    149          
    150              sTime->Sec   = BCD2HEX(Sec); 				
   \   00000036   0x4628             MOV      R0,R5
   \   00000038   0x.... 0x....      BL       BCD2HEX
   \   0000003C   0x7020             STRB     R0,[R4, #+0]
    151              sTime->Min   = BCD2HEX(Min); 				
   \   0000003E   0x4630             MOV      R0,R6
   \   00000040   0x.... 0x....      BL       BCD2HEX
   \   00000044   0x7060             STRB     R0,[R4, #+1]
    152              sTime->Hour  = BCD2HEX(Hour);    			
   \   00000046   0x4638             MOV      R0,R7
   \   00000048   0x.... 0x....      BL       BCD2HEX
   \   0000004C   0x70A0             STRB     R0,[R4, #+2]
    153              sTime->Date  = BCD2HEX(Data);    			
   \   0000004E   0x4640             MOV      R0,R8
   \   00000050   0x.... 0x....      BL       BCD2HEX
   \   00000054   0x70E0             STRB     R0,[R4, #+3]
    154              sTime->Month = BCD2HEX(Month);   			
   \   00000056   0x4648             MOV      R0,R9
   \   00000058   0x.... 0x....      BL       BCD2HEX
   \   0000005C   0x7120             STRB     R0,[R4, #+4]
    155              sTime->Year  = BCD2HEX(Year);		
   \   0000005E   0x4650             MOV      R0,R10
   \   00000060   0x.... 0x....      BL       BCD2HEX
   \   00000064   0x7160             STRB     R0,[R4, #+5]
    156                  		
    157              return  1;
   \   00000066   0x2001             MOVS     R0,#+1
   \   00000068   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    158          }
    159          
    160          //-------------------------------------------------------------------------------------------------------
    161          //函数名称:         stcTime     ReadTime(void)  
    162          //功    能:         从DS3231中读出时间
    163          //入口参数:         无
    164          //出口参数:         返回读出的时间
    165          //说明：            
    166          //--------------------------------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    167          uint8   ReadTemp(void)  
    168          {
   \                     ReadTemp: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    169              int16       Temp;
    170              int8        TempMsb;
    171              uint8       TempLsb;
    172              	
    173              TempMsb     = ReadDS3231Byte(DS3231_TEMP_MSB);      //读高位
   \   00000002   0x2011             MOVS     R0,#+17
   \   00000004   0x.... 0x....      BL       ReadDS3231Byte
   \   00000008   0x4604             MOV      R4,R0
   \   0000000A   0xB264             SXTB     R4,R4
    174              TempLsb     = ReadDS3231Byte(DS3231_TEMP_LSB);      //读低位
    175              
    176              Temp = TempMsb * 4 + (TempLsb>>6);
    177          
    178              //printfcom0("\r\nTemp = %d,TempMsb = %d,TempLsb = %d,",Temp,TempMsb,TempLsb);
    179              		
    180              return  Temp;
   \   0000000C   0x2012             MOVS     R0,#+18
   \   0000000E   0x.... 0x....      BL       ReadDS3231Byte
   \   00000012   0x0980             LSRS     R0,R0,#+6
   \   00000014   0xEB00 0x0084      ADD      R0,R0,R4, LSL #+2
   \   00000018   0xB2C0             UXTB     R0,R0
   \   0000001A   0xBD10             POP      {R4,PC}          ;; return
    181          }
    182          
    183          //-------------------------------------------------------------------------------------------------------
    184          //函数名称:         stcTime     ReadTime(void)  
    185          //功    能:         写DS3231时间
    186          //入口参数:         写时间
    187          //出口参数:         
    188          //--------------------------------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    189          void    WriteTime(stcTime  sTime)  
    190          {
   \                     WriteTime: (+1)
   \   00000000   0xE92D 0x43F3      PUSH     {R0,R1,R4-R9,LR}
   \   00000004   0xB081             SUB      SP,SP,#+4
    191              uint8   	Sec;
    192              uint8   	Min;
    193              uint8       Hour;	
    194              uint8       Data;
    195              uint8       Month;
    196              uint8       Year;
    197              	
    198              Sec     = HEX2BCD(sTime.Sec);		
   \   00000006   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   0000000A   0x.... 0x....      BL       HEX2BCD
   \   0000000E   0x4604             MOV      R4,R0
    199              Min     = HEX2BCD(sTime.Min);		
   \   00000010   0xF89D 0x0005      LDRB     R0,[SP, #+5]
   \   00000014   0x.... 0x....      BL       HEX2BCD
   \   00000018   0x4605             MOV      R5,R0
    200              Hour    = HEX2BCD(sTime.Hour);	
   \   0000001A   0xF89D 0x0006      LDRB     R0,[SP, #+6]
   \   0000001E   0x.... 0x....      BL       HEX2BCD
   \   00000022   0x4606             MOV      R6,R0
    201              Data    = HEX2BCD(sTime.Date);		
   \   00000024   0xF89D 0x0007      LDRB     R0,[SP, #+7]
   \   00000028   0x.... 0x....      BL       HEX2BCD
   \   0000002C   0x4607             MOV      R7,R0
    202              Month   = HEX2BCD(sTime.Month);		
   \   0000002E   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   00000032   0x.... 0x....      BL       HEX2BCD
   \   00000036   0x4680             MOV      R8,R0
    203              Year    = HEX2BCD(sTime.Year);				
   \   00000038   0xF89D 0x0009      LDRB     R0,[SP, #+9]
   \   0000003C   0x.... 0x....      BL       HEX2BCD
   \   00000040   0x4681             MOV      R9,R0
    204          
    205              WriteDS3231Byte(DS3231_SEC,Sec);     
   \   00000042   0x4621             MOV      R1,R4
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0x.... 0x....      BL       WriteDS3231Byte
    206              WriteDS3231Byte(DS3231_MIN,Min);        
   \   0000004A   0x4629             MOV      R1,R5
   \   0000004C   0x2001             MOVS     R0,#+1
   \   0000004E   0x.... 0x....      BL       WriteDS3231Byte
    207              WriteDS3231Byte(DS3231_HOUR,Hour);
   \   00000052   0x4631             MOV      R1,R6
   \   00000054   0x2002             MOVS     R0,#+2
   \   00000056   0x.... 0x....      BL       WriteDS3231Byte
    208              WriteDS3231Byte(DS3231_DATA,Data);    
   \   0000005A   0x4639             MOV      R1,R7
   \   0000005C   0x2004             MOVS     R0,#+4
   \   0000005E   0x.... 0x....      BL       WriteDS3231Byte
    209              WriteDS3231Byte(DS3231_MONTH,Month);  
   \   00000062   0x4641             MOV      R1,R8
   \   00000064   0x2005             MOVS     R0,#+5
   \   00000066   0x.... 0x....      BL       WriteDS3231Byte
    210              WriteDS3231Byte(DS3231_YEAR,Year);         
   \   0000006A   0x4649             MOV      R1,R9
   \   0000006C   0x2006             MOVS     R0,#+6
   \   0000006E   0xB003             ADD      SP,SP,#+12
   \   00000070   0xE8BD 0x43F0      POP      {R4-R9,LR}
   \   00000074   0x....             B.N      WriteDS3231Byte
    211          }
    212          
    213          //-------------------------------------------------------------------------------------------------------
    214          //函数名称:         void    SetTime(uint8 Year,uint8 Month,uint8 Data,uint8 Hour,uint8 Min,uint8 Sec)   
    215          //功    能:         设置时间
    216          //入口参数:         
    217          //出口参数:         
    218          //说明：            
    219          //--------------------------------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    220          void    SetTime(uint8 Year,uint8 Month,uint8 Date,uint8 Hour,uint8 Min,uint8 Sec)  
    221          {
   \                     SetTime: (+1)
   \   00000000   0xB410             PUSH     {R4}
   \   00000002   0xB083             SUB      SP,SP,#+12
    222              stcTime  sTime;
    223          
    224              sTime.Sec   = Sec;  				
   \   00000004   0x9C05             LDR      R4,[SP, #+20]
   \   00000006   0xF88D 0x4000      STRB     R4,[SP, #+0]
    225              sTime.Min   = Min;  				
   \   0000000A   0x9C04             LDR      R4,[SP, #+16]
   \   0000000C   0xF88D 0x4001      STRB     R4,[SP, #+1]
    226              sTime.Hour  = Hour; 			
   \   00000010   0xF88D 0x3002      STRB     R3,[SP, #+2]
    227              sTime.Date  = Date; 			
   \   00000014   0xF88D 0x2003      STRB     R2,[SP, #+3]
    228              sTime.Month = Month;    			
   \   00000018   0xF88D 0x1004      STRB     R1,[SP, #+4]
    229              sTime.Year  = Year;	
   \   0000001C   0xF88D 0x0005      STRB     R0,[SP, #+5]
    230              
    231              WriteTime(sTime);	
   \   00000020   0xE9DD 0x0100      LDRD     R0,R1,[SP, #+0]
   \   00000024   0xB003             ADD      SP,SP,#+12
   \   00000026   0xBC10             POP      {R4}
   \   00000028   0x....             B.N      WriteTime
    232          }
    233          
    234          
    235          //-------------------------------------------------------------------------------------------------------
    236          //函数名称:         void    InitDS3231(void)  
    237          //功    能:         初始化DS3231设备模式
    238          //入口参数:         无
    239          //出口参数:         无
    240          //--------------------------------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    241          void    InitDS3231(void)  
    242          {
   \                     InitDS3231: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    243          //    InitI2CIO();
    244              
    245              GPIO_Fram_Init();       //初始化IO
   \   00000002   0x.... 0x....      BL       GPIO_Fram_Init
    246              
    247              WriteDS3231Byte(DS3231_CONTROL,0);     
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x200E             MOVS     R0,#+14
   \   0000000A   0x.... 0x....      BL       WriteDS3231Byte
    248              
    249              WriteDS3231Byte(DS3231_STATUS,0);       	
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0x200F             MOVS     R0,#+15
   \   00000012   0xE8BD 0x4004      POP      {R2,LR}
   \   00000016   0x....             B.N      WriteDS3231Byte
    250          }
    251          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   BCD2HEX
       0   HEX2BCD
       8   InitDS3231
         8   -> GPIO_Fram_Init
         0   -> WriteDS3231Byte
         8   -> WriteDS3231Byte
       8   ReadDS3231Byte
         8   -> CheckSlaveAckI2C
         8   -> MasterNoAckI2C
         8   -> ReadByteWithI2C
         8   -> StartI2C
         8   -> StopI2C
         8   -> WriteByteWithI2C
       8   ReadTemp
         8   -> ReadDS3231Byte
      32   ReadTime
        32   -> BCD2HEX
        32   -> ReadDS3231Byte
      16   SetTime
         0   -> WriteTime
      16   WriteDS3231Byte
        16   -> CheckSlaveAckI2C
        16   -> StartI2C
         0   -> StopI2C
        16   -> WriteByteWithI2C
      40   WriteTime
        40   -> HEX2BCD
         0   -> WriteDS3231Byte
        40   -> WriteDS3231Byte


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      18  BCD2HEX
      30  HEX2BCD
      24  InitDS3231
      60  ReadDS3231Byte
      28  ReadTemp
     108  ReadTime
      42  SetTime
      48  WriteDS3231Byte
     118  WriteTime

 
 476 bytes in section .text
 
 476 bytes of CODE memory

Errors: none
Warnings: none

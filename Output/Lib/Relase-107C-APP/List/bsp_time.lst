###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       26/Dec/2017  20:53:47
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  F:\iar\NC199B-100\Library\Source\BSP\Driver\bsp_time.c
#    Command line =  
#        F:\iar\NC199B-100\Library\Source\BSP\Driver\bsp_time.c -D
#        USE_STDPERIPH_DRIVER -D STM32F10X_CL -D RELEASE -D IMAGE_A -D
#        STM32F103RC -D STM32_FLASH_SIZE=256 -D HSE_VALUE=25000000 -lCN
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Relase-107C-APP\List\
#        -o
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Relase-107C-APP\Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        F:\iar\NC199B-100\Library\Project\IAR\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\User\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\AES\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Config\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\OS\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\User\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Source\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Port\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\OS\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Config\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Protocol\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Iap\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Driver\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\IAR\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\uCOS-III\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\CMSIS\CM3\CoreSupport\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\CMSIS\CM3\DeviceSupport\ST\STM32F10x\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\STM32F10x_StdPeriph_Driver\inc\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-CPU\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-CPU\ARM-Cortex-M3\IAR\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-LIB\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\OSAL\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\OSAL\OS\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\OS\uCOS-III\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\Source\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\Source\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\FatFs\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\FatFs\option\ -Om
#        --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Relase-107C-APP\List\bsp_time.lst
#    Object file  =  
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Relase-107C-APP\Obj\bsp_time.o
#
###############################################################################

F:\iar\NC199B-100\Library\Source\BSP\Driver\bsp_time.c
      1          /*******************************************************************************
      2          *   Filename:       bsp_time.C
      3          *   Revised:        $Date: 2014-05-27$
      4          *   Revision:       $V1.0
      5          *	Writer:		    wumingshen.
      6          *
      7          *   Description:
      8          *   本文件实现基于RTC的日期功能，提供年月日的读写。（基于ANSI-C的time.h）
      9          *
     10          *   RTC中保存的时间格式，是UNIX时间戳格式的。即一个32bit的TIME_t变量（实为u32）
     11          *
     12          *   ANSI-C的标准库中，提供了两种表示时间的数据  型：
     13          *   time_t:    UNIX时间戳（从1970-1-1起到某时间经过的秒数）
     14          *   typedef unsigned int time_t;
     15          *
     16          *   struct tm: Calendar格式（年月日形式）
     17          *   tm结构如下：
     18          *   struct tm {
     19          *   int tm_sec;   // 秒   seconds after the minute, 0 to 60
     20          *                 (0 - 60 allows for the occasional leap second)
     21          *   int tm_min;   // 分   minutes after the hour, 0 to 59
     22          *   int tm_hour;  // 时   hours since midnight, 0 to 23
     23          *   int tm_mday;  // 日   day of the month, 1 to 31
     24          *   int tm_mon;   // 月   months since January, 0 to 11
     25          *   int tm_year;  // 年   years since 1900
     26          *   int tm_wday;  // 星期 days since Sunday, 0 to 6
     27          *   int tm_yday;  // 从元旦起的天数 days since January 1, 0 to 365
     28          *   int tm_isdst; // 夏令时         Daylight Savings Time flag
     29          *   ...
     30          * }
     31          *  其中wday，yday可以自动产生，软件直接读取
     32          * ***注意***：
     33          *  tm_year:在time.h库中定义为1900年起的年份，即2008年应表示为2008-1900=108
     34          *  这种表示方法对用户来说不是十分友好，与现实有较大差异。
     35          *  所以在本文件中，屏蔽了这种差异。
     36          *  即外部调用本文件的函数时，tm结构体类型的日期，tm_year即为2008
     37          *  注意：若要调用系统库time.c中的函数，需要自行将tm_year-=1900
     38          *
     39          * 成员函数说明：
     40          * struct tm TIME_ConvUnixToCalendar(time_t t);
     41          * 输入一个Unix时间戳（TIME_t），返回Calendar格式日期
     42          * time_t TIME_ConvCalendarToUnix(struct tm t);
     43          * 输入一个Calendar格式日期，返回Unix时间戳（TIME_t）
     44          * time_t TIME_GetUnixTime(void);
     45          * 从RTC取当前时间的Unix时间戳值
     46          * struct tm TIME_GetCalendarTime(void);
     47          * 从RTC取当前时间的日历时间
     48          * void TIME_SetUnixTime(time_t);
     49          * 输入UNIX时间戳格式时间，设置为当前RTC时间
     50          * void TIME_SetCalendarTime(struct tm t);
     51          * 输入Calendar格式时间，设置为当前RTC时间
     52          *
     53          * 外部调用实例：
     54          * 定义一个Calendar格式的日期变量：
     55          * struct tm now;
     56          * now.tm_year = 2015;
     57          * now.tm_mon  = 05;
     58          * now.tm_mday = 20;
     59          * now.tm_hour = 20;
     60          * now.tm_min  = 12;
     61          * now.tm_sec  = 30;
     62          *
     63          * 获取当前日期时间：
     64          * tm_now = TIME_GetCalendarTime();
     65          * 然后可以直接读tm_now.tm_wday获取星期数
     66          *
     67          * 设置时间：
     68          * Step1. tm_now.xxx = xxxxxxxxx;
     69          * Step2. TIME_SetCalendarTime(tm_now);
     70          *
     71          * 计算两个时间的差
     72          * struct tm t1,t2;
     73          * t1_t = TIME_ConvCalendarToUnix(t1);
     74          * t2_t = TIME_ConvCalendarToUnix(t2);
     75          * dt = t1_t - t2_t;
     76          * dt就是两个时间差的秒数
     77          * dt_tm = mktime(dt); //注意dt的年份匹配，ansi库中函数为相对年份，注意超限
     78          * 另可以参考相关资料，调用ansi-c库的格式化输出等功能，ctime，strftime等
     79          *
     80          * Notes:
     81          *
     82          * All copyrights reserved to wumingshen.
     83          *
     84          *******************************************************************************/
     85          
     86          /*******************************************************************************
     87           * INCLUDES
     88           */
     89          #include <bsp_time.h>
     90          #include "bsp_rtc.h"
     91          #include "bsp_r8025t.h"
     92          
     93          /*******************************************************************************
     94           * GLOBAL VARIABLES
     95           */

   \                                 In section .bss, align 4
     96          struct  tm   tm_now;
   \                     tm_now:
   \   00000000                      DS8 44
     97          
     98          
     99          
    100          //============================================================================//
    101          
    102          /*******************************************************************************
    103           * 名    称： TIME_ConvUnixToCalendar
    104           * 功    能： 转换UNIX时间戳为日历时间
    105           * 入口参数： time_t t 当前日历时间
    106           * 出口参数： UniX时间
    107           * 作　 　者： 无名沈.
    108           * 创建日期： 2015-06-25
    109           * 修    改：
    110           * 修改日期：
    111           * 备    注：
    112           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    113          struct tm TIME_ConvUnixToCalendar(time_t t)
    114          {
   \                     TIME_ConvUnixToCalendar: (+1)
   \   00000000   0xB513             PUSH     {R0,R1,R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    115            struct tm *t_tm;
    116            t_tm = localtime(&t);
   \   00000004   0xA801             ADD      R0,SP,#+4
   \   00000006   0x.... 0x....      BL       __localtime32
   \   0000000A   0x4601             MOV      R1,R0
    117            t_tm->tm_year += 1900; //localtime转换结果的tm_year是相对值，需要转成绝对值
   \   0000000C   0x6948             LDR      R0,[R1, #+20]
   \   0000000E   0xF200 0x706C      ADDW     R0,R0,#+1900
   \   00000012   0x6148             STR      R0,[R1, #+20]
    118            return *t_tm;
   \   00000014   0x4620             MOV      R0,R4
   \   00000016   0x222C             MOVS     R2,#+44
   \   00000018   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000001C   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    119          }
    120          
    121          /*******************************************************************************
    122           * 名    称： TIME_ConvCalendarToUnix
    123           * 功    能： 转换日历时间为UNIX时间戳
    124           * 入口参数： 当前UNIX时间
    125           * 出口参数： 当前日历时间
    126           * 作　 　者： 无名沈.
    127           * 创建日期： 2015-06-25
    128           * 修    改：
    129           * 修改日期：
    130           * 备    注：
    131           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    132          time_t TIME_ConvCalendarToUnix(struct tm t)
    133          {
   \                     TIME_ConvCalendarToUnix: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xB580             PUSH     {R7,LR}
    134            t.tm_year -= 1900;  //外部tm结构体存储的年份为2008格式
   \   00000004   0x9807             LDR      R0,[SP, #+28]
   \   00000006   0xF2A0 0x706C      SUBW     R0,R0,#+1900
   \   0000000A   0x9007             STR      R0,[SP, #+28]
    135                                //而time.h中定义的年份格式为1900年开始的年份
    136                                //所以，在日期转换时要考虑到这个因素。
    137            return mktime(&t);
   \   0000000C   0xA802             ADD      R0,SP,#+8
   \   0000000E   0x.... 0x....      BL       __mktime32
   \   00000012   0xBC02             POP      {R1}
   \   00000014   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
    138          }
    139          
    140          /*******************************************************************************
    141           * 名    称： TIME_GetUnixTime
    142           * 功    能： 从RTC取当前时间的Unix时间戳值
    143           * 入口参数： 无
    144           * 出口参数： time_t t
    145           * 作　 　者： 无名沈.
    146           * 创建日期： 2015-06-25
    147           * 修    改：
    148           * 修改日期：
    149           * 备    注：
    150           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    151          time_t TIME_GetUnixTime(void)
    152          {
    153            return (time_t)RTC_GetCounter();
   \                     TIME_GetUnixTime: (+1)
   \   00000000   0x.... 0x....      B.W      RTC_GetCounter
    154          }
    155          
    156          /*******************************************************************************
    157           * 名    称： is_leap_year
    158           * 功    能： 判断是否是闰年函数
    159           * 入口参数： 现在的年份
    160           * 出口参数： 该年份是不是闰年.1,是.0,不是
    161           * 作　 　者： 无名沈.
    162           * 创建日期： 2015-06-25
    163           * 修    改：
    164           * 修改日期：
    165           * 备    注：
    166           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    167          int is_leap_year( int year )
    168          {
    169              int    iRet = 0;
   \                     is_leap_year: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
    170          
    171              if( 0 == ( year % 400 ) ) {
   \   00000002   0xF44F 0x72C8      MOV      R2,#+400
   \   00000006   0xFB90 0xF2F2      SDIV     R2,R0,R2
   \   0000000A   0xF44F 0x73C8      MOV      R3,#+400
   \   0000000E   0xFB03 0x0212      MLS      R2,R3,R2,R0
   \   00000012   0x2A00             CMP      R2,#+0
   \   00000014   0xD101             BNE.N    ??is_leap_year_0
    172                  iRet = 1;
   \   00000016   0x2101             MOVS     R1,#+1
   \   00000018   0xE00F             B.N      ??is_leap_year_1
    173              } else if( ( 0 == ( year % 4 ) ) && ( 0 != ( year % 100 ) ) ) {
   \                     ??is_leap_year_0: (+1)
   \   0000001A   0x1042             ASRS     R2,R0,#+1
   \   0000001C   0xEB00 0x7292      ADD      R2,R0,R2, LSR #+30
   \   00000020   0x1092             ASRS     R2,R2,#+2
   \   00000022   0xEBB0 0x0282      SUBS     R2,R0,R2, LSL #+2
   \   00000026   0xD108             BNE.N    ??is_leap_year_1
   \   00000028   0x2264             MOVS     R2,#+100
   \   0000002A   0xFB90 0xF2F2      SDIV     R2,R0,R2
   \   0000002E   0x2364             MOVS     R3,#+100
   \   00000030   0xFB03 0x0012      MLS      R0,R3,R2,R0
   \   00000034   0x2800             CMP      R0,#+0
   \   00000036   0xD000             BEQ.N    ??is_leap_year_1
    174                  iRet = 1;
   \   00000038   0x2101             MOVS     R1,#+1
    175              }
    176              return( iRet );
   \                     ??is_leap_year_1: (+1)
   \   0000003A   0x4608             MOV      R0,R1
   \   0000003C   0x4770             BX       LR               ;; return
    177          }
    178          
    179          /*******************************************************************************
    180           * 名    称： RTC_Get_Week
    181           * 功    能： 获得现在是星期几
    182           * 入口参数： 输入公历日期得到星期(只允许1901-2099年)
    183           * 出口参数： tm_wday 星期号(0-6)
    184           * 作　 　者： 无名沈.
    185           * 创建日期： 2015-06-25
    186           * 修    改：
    187           * 修改日期：
    188           * 备    注： 0表示周日，1-6表示周一到周六
    189           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    190          int RTC_Get_Week( int year,int month,int day )
    191          {
   \                     RTC_Get_Week: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB08D             SUB      SP,SP,#+52
   \   00000004   0x4607             MOV      R7,R0
   \   00000006   0x460C             MOV      R4,R1
   \   00000008   0x4615             MOV      R5,R2
    192          
    193              int iWeek, iConst, iYear;
    194              int aiRate[13] = { 0, 0, 3, 3, 6, 1, 4, 6, 2, 5, 0, 3, 5 };
   \   0000000A   0x4668             MOV      R0,SP
   \   0000000C   0x.... 0x....      ADR.W    R1,?_0
   \   00000010   0x2234             MOVS     R2,#+52
   \   00000012   0x.... 0x....      BL       __aeabi_memcpy4
    195          
    196              iYear = year % 400;
   \   00000016   0xF44F 0x70C8      MOV      R0,#+400
   \   0000001A   0xFB97 0xF0F0      SDIV     R0,R7,R0
   \   0000001E   0xF44F 0x71C8      MOV      R1,#+400
   \   00000022   0xFB01 0x7610      MLS      R6,R1,R0,R7
    197          
    198              if(is_leap_year( year ) && ( month < 3 ) ) {
   \   00000026   0x4638             MOV      R0,R7
   \   00000028   0x.... 0x....      BL       is_leap_year
   \   0000002C   0x2800             CMP      R0,#+0
   \   0000002E   0xD003             BEQ.N    ??RTC_Get_Week_0
   \   00000030   0x2C03             CMP      R4,#+3
   \   00000032   0xDA01             BGE.N    ??RTC_Get_Week_0
    199                  iConst = 5;
   \   00000034   0x2005             MOVS     R0,#+5
   \   00000036   0xE000             B.N      ??RTC_Get_Week_1
    200              } else {
    201                  iConst = 6;
   \                     ??RTC_Get_Week_0: (+1)
   \   00000038   0x2006             MOVS     R0,#+6
    202              }
    203              iWeek = ( iYear + iYear / 4 - iYear / 100 + aiRate[month] + day + iConst ) % 7;
   \                     ??RTC_Get_Week_1: (+1)
   \   0000003A   0x1071             ASRS     R1,R6,#+1
   \   0000003C   0xEB06 0x7191      ADD      R1,R6,R1, LSR #+30
   \   00000040   0xEB06 0x01A1      ADD      R1,R6,R1, ASR #+2
   \   00000044   0x2264             MOVS     R2,#+100
   \   00000046   0xFB96 0xF2F2      SDIV     R2,R6,R2
   \   0000004A   0x1A89             SUBS     R1,R1,R2
   \   0000004C   0x466A             MOV      R2,SP
   \   0000004E   0xF852 0x2024      LDR      R2,[R2, R4, LSL #+2]
   \   00000052   0x1851             ADDS     R1,R2,R1
   \   00000054   0x1869             ADDS     R1,R5,R1
   \   00000056   0x1840             ADDS     R0,R0,R1
   \   00000058   0x2107             MOVS     R1,#+7
   \   0000005A   0xFB90 0xF1F1      SDIV     R1,R0,R1
   \   0000005E   0xEBC1 0x01C1      RSB      R1,R1,R1, LSL #+3
   \   00000062   0x1A40             SUBS     R0,R0,R1
    204          
    205              return( iWeek );
   \   00000064   0xB00D             ADD      SP,SP,#+52
   \   00000066   0xBDF0             POP      {R4-R7,PC}       ;; return
    206          }
    207          
    208          /*******************************************************************************
    209           * 名    称： TIME_SetUnixTime
    210           * 功    能： 将给定的Unix时间戳写入RTC
    211           * 入口参数： time_t t 时间结构体
    212           * 出口参数： 无
    213           * 作　 　者： 无名沈.
    214           * 创建日期： 2015-06-25
    215           * 修    改：
    216           * 修改日期：
    217           * 备    注：
    218           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    219          void TIME_SetUnixTime(time_t t)
    220          {
   \                     TIME_SetUnixTime: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    221            PWR_BackupAccessCmd(ENABLE);
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0x.... 0x....      BL       PWR_BackupAccessCmd
    222            RTC_WaitForLastTask();
   \   0000000A   0x.... 0x....      BL       RTC_WaitForLastTask
    223            RTC_SetCounter((u32)t);
   \   0000000E   0x4620             MOV      R0,R4
   \   00000010   0x.... 0x....      BL       RTC_SetCounter
    224            RTC_WaitForLastTask();
   \   00000014   0x.... 0x....      BL       RTC_WaitForLastTask
    225            PWR_BackupAccessCmd(DISABLE);
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0xE8BD 0x4010      POP      {R4,LR}
   \   0000001E   0x.... 0x....      B.W      PWR_BackupAccessCmd
    226          }
    227          
    228          /*******************************************************************************
    229           * 名    称： BSP_TIME_Init
    230           * 功    能： 获取实时时间初始化
    231           * 入口参数： 无
    232           * 出口参数： 无
    233           * 作　 　者： 无名沈.
    234           * 创建日期： 2015-06-25
    235           * 修    改：
    236           * 修改日期：
    237           * 备    注： 初始化RTC
    238           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    239          void BSP_TIME_Init(void)
    240          {
   \                     BSP_TIME_Init: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB08B             SUB      SP,SP,#+44
    241              /***********************************************
    242              * 描述： 初始化内部RTC
    243              */
    244              BSP_RTC_Init();
   \   00000004   0x.... 0x....      BL       BSP_RTC_Init
    245              /***********************************************
    246              * 描述： 读取内部RTC时间
    247              */
    248              tm_now  = TIME_GetCalendarTime();
   \   00000008   0x4668             MOV      R0,SP
   \   0000000A   0x.... 0x....      BL       TIME_GetCalendarTime
   \   0000000E   0x....             LDR.N    R0,??DataTable1
   \   00000010   0x4669             MOV      R1,SP
   \   00000012   0x222C             MOVS     R2,#+44
   \   00000014   0x.... 0x....      BL       __aeabi_memcpy4
    249          
    250          //    //--------------------------------------------//
    251          //    /***********************************************
    252          //    * 描述： 初始化外部RTC
    253          //    */
    254          //    BSP_RX8025T_Init();
    255          //    /***********************************************
    256          //    * 描述： 读取外部RTC时间
    257          //    */
    258          //    BSP_RX8025T_GetTime(&tm_now);
    259          
    260          
    261          }
   \   00000018   0xB00B             ADD      SP,SP,#+44
   \   0000001A   0xBD00             POP      {PC}             ;; return
    262          
    263          /*******************************************************************************
    264           * 名    称： TIME_GetCalendarTime
    265           * 功    能： 从RTC取当前时间的日历时间（struct tm）
    266           * 入口参数： 无
    267           * 出口参数： 当前实时时间
    268           * 作　 　者： 无名沈.
    269           * 创建日期： 2015-06-25
    270           * 修    改：
    271           * 修改日期：
    272           * 备    注：
    273           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    274          struct tm TIME_GetCalendarTime(void)
    275          {
   \                     TIME_GetCalendarTime: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB08C             SUB      SP,SP,#+48
   \   00000004   0x4604             MOV      R4,R0
    276              struct tm t_tm;
    277              /***********************************************
    278              * 描述： 读取内部RTC实时时间
    279              */
    280              time_t    t_t;
    281              t_t   = (time_t)RTC_GetCounter();
   \   00000006   0x.... 0x....      BL       RTC_GetCounter
    282              t_tm  = TIME_ConvUnixToCalendar(t_t);
   \   0000000A   0x4601             MOV      R1,R0
   \   0000000C   0x4668             MOV      R0,SP
   \   0000000E   0x.... 0x....      BL       TIME_ConvUnixToCalendar
    283              t_tm.tm_wday = RTC_Get_Week(t_tm.tm_year,t_tm.tm_mon,t_tm.tm_mday);
   \   00000012   0x9A03             LDR      R2,[SP, #+12]
   \   00000014   0x9904             LDR      R1,[SP, #+16]
   \   00000016   0x9805             LDR      R0,[SP, #+20]
   \   00000018   0x.... 0x....      BL       RTC_Get_Week
   \   0000001C   0x9006             STR      R0,[SP, #+24]
    284          
    285          //    //--------------------------------------------//
    286          //    /***********************************************
    287          //    * 描述： 读取外部RTC实时时间
    288          //    */
    289          //    BSP_RX8025T_GetTime(&t_tm);
    290          
    291              return t_tm;
   \   0000001E   0x4620             MOV      R0,R4
   \   00000020   0x4669             MOV      R1,SP
   \   00000022   0x222C             MOVS     R2,#+44
   \   00000024   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000028   0xB00C             ADD      SP,SP,#+48
   \   0000002A   0xBD10             POP      {R4,PC}          ;; return
    292          }
    293          
    294          /*******************************************************************************
    295           * 名    称： TIME_SetCalendarTime
    296           * 功    能： 将给定的Calendar格式时间转换成UNIX时间戳写入RTC
    297           * 入口参数： 无
    298           * 出口参数： 无
    299           * 作　 　者： 无名沈.
    300           * 创建日期： 2015-06-25
    301           * 修    改：
    302           * 修改日期：
    303           * 备    注：
    304           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    305          void TIME_SetCalendarTime(struct tm t)
    306          {
   \                     TIME_SetCalendarTime: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xB500             PUSH     {LR}
   \   00000004   0xB087             SUB      SP,SP,#+28
    307              /***********************************************
    308              * 描述： 修改内部RTC实时时间
    309              */
    310              TIME_SetUnixTime(TIME_ConvCalendarToUnix(t));
   \   00000006   0xA908             ADD      R1,SP,#+32
   \   00000008   0xB084             SUB      SP,SP,#+16
   \   0000000A   0x4668             MOV      R0,SP
   \   0000000C   0x222C             MOVS     R2,#+44
   \   0000000E   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000012   0xBC0F             POP      {R0-R3}
   \   00000014   0x.... 0x....      BL       TIME_ConvCalendarToUnix
   \   00000018   0x.... 0x....      BL       TIME_SetUnixTime
    311          
    312          //    //--------------------------------------------//
    313          //    /***********************************************
    314          //    * 描述： 修改外部RTC实时时间
    315          //    */
    316          //    BSP_RX8025T_SetDate(t);
    317          
    318          
    319          }
   \   0000001C   0xB007             ADD      SP,SP,#+28
   \   0000001E   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     tm_now

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x00000000         DC32 0, 0, 3, 3, 6, 1, 4, 6, 2, 5, 0, 3, 5
   \              0x00000000   
   \              0x00000003   
   \              0x00000003   
   \              0x00000006   
   \              0x00000001   
   \              0x00000004   
   \              0x00000006   
   \              0x00000002   
   \              0x00000005   
   \              0x00000000   
   \              0x00000003   
   \              0x00000005   
    320          
    321          
    322          /*******************************************************************************
    323           *              end of file                                                    *
    324           *******************************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      48   BSP_TIME_Init
        48   -> BSP_RTC_Init
        48   -> TIME_GetCalendarTime
        48   -> __aeabi_memcpy4
      72   RTC_Get_Week
        72   -> __aeabi_memcpy4
        72   -> is_leap_year
      24   TIME_ConvCalendarToUnix
        24   -> __mktime32
      16   TIME_ConvUnixToCalendar
        16   -> __aeabi_memcpy4
        16   -> __localtime32
      56   TIME_GetCalendarTime
        56   -> RTC_GetCounter
        56   -> RTC_Get_Week
        56   -> TIME_ConvUnixToCalendar
        56   -> __aeabi_memcpy4
       0   TIME_GetUnixTime
         0   -> RTC_GetCounter
      64   TIME_SetCalendarTime
        48   -> TIME_ConvCalendarToUnix
        48   -> TIME_SetUnixTime
        64   -> __aeabi_memcpy4
       8   TIME_SetUnixTime
         0   -> PWR_BackupAccessCmd
         8   -> PWR_BackupAccessCmd
         8   -> RTC_SetCounter
         8   -> RTC_WaitForLastTask
       0   is_leap_year


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
      52  ?_0
      28  BSP_TIME_Init
     104  RTC_Get_Week
      24  TIME_ConvCalendarToUnix
      30  TIME_ConvUnixToCalendar
      44  TIME_GetCalendarTime
       4  TIME_GetUnixTime
      34  TIME_SetCalendarTime
      34  TIME_SetUnixTime
      62  is_leap_year
      44  tm_now

 
  44 bytes in section .bss
 420 bytes in section .text
 
 420 bytes of CODE memory
  44 bytes of DATA memory

Errors: none
Warnings: none

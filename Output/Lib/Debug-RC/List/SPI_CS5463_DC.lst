###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       16/Nov/2017  10:20:05
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\iar\NC199B-100\Library\Source\BSP\Driver\SPI_CS5463_DC.c
#    Command line =  
#        F:\iar\NC199B-100\Library\Source\BSP\Driver\SPI_CS5463_DC.c -D
#        USE_STDPERIPH_DRIVER -D _STM32F10X_HD -D STM32F10X_CL -D DEBUG -D
#        STM32F103RC -D STM32_FLASH_SIZE=256 -D HSE_VALUE=25000000 -lCN
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\List\
#        -o
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        F:\iar\NC199B-100\Library\Project\IAR\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\User\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\AES\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Config\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\OS\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\User\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Source\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Port\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\OS\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Config\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Protocol\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Iap\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Driver\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\IAR\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\uCOS-III\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\CMSIS\CM3\CoreSupport\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\CMSIS\CM3\DeviceSupport\ST\STM32F10x\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\STM32F10x_StdPeriph_Driver\inc\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-CPU\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-CPU\ARM-Cortex-M3\IAR\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-LIB\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\OSAL\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\OSAL\OS\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\OS\uCOS-III\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\Source\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\Source\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\FatFs\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\FatFs\option\ -Om
#        --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\List\SPI_CS5463_DC.lst
#    Object file  =  
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\Obj\SPI_CS5463_DC.o
#
###############################################################################

F:\iar\NC199B-100\Library\Source\BSP\Driver\SPI_CS5463_DC.c
      1          /******************** (C) COPYRIGHT 2013 www.armjishu.com  ********************
      2           * 文件名  ：SPI_CS5463_DC.c
      3           * 描述    ：实现CS5463的底层函数
      4           * 实验平台：STM32神舟开发板
      5           * 标准库  ：STM32F10x_StdPeriph_Driver V3.5.0
      6           * 作者    ：zw
      7          *******************************************************************************/
      8          
      9          /* Includes ------------------------------------------------------------------*/
     10          #include "SPI_CS5463_DC.h"
     11          #include "SZ_STM32F107VC_LIB.h"
     12          #include "DELAY.h"
     13          #include "POWER_MACRO.h"
     14          
     15          
     16          #define SPI_CS5463_DC                   SPI1
     17          
     18          #define SPI_CS5463_DC_CLK               RCC_APB2Periph_SPI1
     19          #define SPI_CS5463_DC_SCK_PIN           GPIO_Pin_5              /* PA.05 */
     20          #define SPI_CS5463_DC_SCK_GPIO_PORT     GPIOA
     21          #define SPI_CS5463_DC_SCK_GPIO_CLK      RCC_APB2Periph_GPIOA
     22          
     23          #define SPI_CS5463_DC_MISO_PIN          GPIO_Pin_6              /* PA.06 */
     24          #define SPI_CS5463_DC_MISO_GPIO_PORT    GPIOA
     25          #define SPI_CS5463_DC_MISO_GPIO_CLK     RCC_APB2Periph_GPIOA
     26          
     27          #define SPI_CS5463_DC_MOSI_PIN          GPIO_Pin_7              /* PA.07 */
     28          #define SPI_CS5463_DC_MOSI_GPIO_PORT    GPIOA
     29          #define SPI_CS5463_DC_MOSI_GPIO_CLK     RCC_APB2Periph_GPIOA
     30          
     31          #define SPI_CS5463_DC_CS_PIN_NUM        4                       /* PA.04 */
     32          #define SPI_CS5463_DC_CS_PIN            GPIO_Pin_4  
     33          #define SPI_CS5463_DC_CS_GPIO_PORT      GPIOA
     34          #define SPI_CS5463_DC_CS_GPIO_CLK       RCC_APB2Periph_GPIOA
     35          
     36          #define SPI_RST_DC_PIN_NUM              0
     37          #define SPI_RST_DC_PIN                  GPIO_Pin_0   		    /* PB.00 */
     38          #define SPI_RST_DC_GPIO_PORT            GPIOB
     39          #define SPI_RST_DC_GPIO_CLK             RCC_APB2Periph_GPIOB
     40          
     41          #define E1_DC_PIN_NUM                   0
     42          #define E1_DC_PIN                       GPIO_Pin_0
     43          #define E1_DC_TIMER_PORT                GPIOA
     44          #define E1_DC_TIMER_CLK                 RCC_APB2Periph_GPIOA
     45          //#define E1_DC_TIMER_CLK                 RCC_APB1Periph_TIM5
     46          
     47          #define E2_DC_PIN_NUM                   9
     48          #define E2_DC_PIN                       GPIO_Pin_9
     49          #define E2_DC_TIMER_PORT                GPIOE
     50          #define E2_DC_GPIO_CLK                  RCC_APB2Periph_GPIOE
     51          
     52          
     53          /*寄存器读写*/
     54          
     55          #define CONFIG_DATA_DC                  0x000001
     56          #define STATUS_DATA_DC                  0x800000
     57          #define INTMASK_DATA_DC                 0x000000
     58          #define CTRL_DATA_DC                    0x000005
     59          #define CYCLE_COUNT_DATA_DC             0x000FA0
     60          #define PULSE_RATE_DATA_DC              0x00BE95
     61          #define MODE_DATA_DC                    0x000000
     62          

   \                                 In section .bss, align 4
     63          CONFIGSFR   configsfr_DC;
   \                     configsfr_DC:
   \   00000000                      DS8 160
     64          
     65          /* Private macro -------------------------------------------------------------*/
     66          /* Select SPI FLASH: Chip Select pin low  */
     67          
     68          //#define SPI_CS5463_DC_CS_LOW()   SPI_SSOutputCmd(SPI1, ENABLE)		   //NSS输出使能
     69          //#define SPI_CS5463_DC_CS_HIGH()  SPI_SSOutputCmd(SPI1, DISABLE)		   //NSS输出禁止
     70          #define SPI_CS5463_DC_CS_LOW()   (Periph_BB((uint32_t) & SPI_CS5463_DC_CS_GPIO_PORT->ODR, SPI_CS5463_DC_CS_PIN_NUM) = 0)
     71          #define SPI_CS5463_DC_CS_HIGH()  (Periph_BB((uint32_t) & SPI_CS5463_DC_CS_GPIO_PORT->ODR, SPI_CS5463_DC_CS_PIN_NUM) = 1)
     72          
     73          #define SPI_RST_DC_LOW()         GPIO_ResetBits(SPI_RST_DC_GPIO_PORT, SPI_RST_DC_PIN)
     74          #define SPI_RST_DC_HIGH()        GPIO_SetBits(SPI_RST_DC_GPIO_PORT, SPI_RST_DC_PIN)
     75          
     76          
     77          
     78          /* Private variables ---------------------------------------------------------*/
     79          /* Private function prototypes -----------------------------------------------*/
     80          /* Private functions ---------------------------------------------------------*/
     81          
     82          
     83          /**-----------------------------------------------------------------
     84            * @函数名 SPI_DC_INIT
     85            * @功能   初始化与CS5463接口的驱动函数
     86            * @参数   无
     87            * @返回值 无
     88          ***----------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
     89          void SPI_DC_INIT(void)
     90          {
   \                     SPI_DC_INIT: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
     91              SPI_InitTypeDef  SPI_InitStructure;
     92              GPIO_InitTypeDef GPIO_InitStructure;
     93          
     94              /* Enable SPI1 and GPIO clocks */
     95              /*!< SPI_CS5463_DC_CS_GPIO, SPI_CS5463_DC_MOSI_GPIO, 
     96                 SPI_CS5463_DC_MISO_GPIO, SPI_CS5463_DC_DETECT_GPIO 
     97                 and SPI_CS5463_DC_SCK_GPIO Periph clock enable */
     98              RCC_APB2PeriphClockCmd(SPI_CS5463_DC_CS_GPIO_CLK | SPI_CS5463_DC_MOSI_GPIO_CLK |
     99                                   SPI_CS5463_DC_MISO_GPIO_CLK | SPI_CS5463_DC_SCK_GPIO_CLK, ENABLE);
   \   00000004   0x2101             MOVS     R1,#+1
   \   00000006   0x2004             MOVS     R0,#+4
   \   00000008   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
    100          
    101              /*!< SPI_CS5463_AC Periph clock enable */
    102              RCC_APB2PeriphClockCmd(SPI_CS5463_DC_CLK, ENABLE);
   \   0000000C   0x2101             MOVS     R1,#+1
   \   0000000E   0xF44F 0x5080      MOV      R0,#+4096
   \   00000012   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
    103              
    104              /*!< AFIO Periph clock enable */
    105              RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
   \   00000016   0x2101             MOVS     R1,#+1
   \   00000018   0x4608             MOV      R0,R1
   \   0000001A   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
    106          
    107              /*!< Configure SPI_CS5463_AC pins: SCK */
    108              GPIO_InitStructure.GPIO_Pin = SPI_CS5463_DC_SCK_PIN;
   \   0000001E   0x2020             MOVS     R0,#+32
   \   00000020   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    109              GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   00000024   0x2003             MOVS     R0,#+3
   \   00000026   0xF88D 0x0002      STRB     R0,[SP, #+2]
    110              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   \   0000002A   0x2018             MOVS     R0,#+24
   \   0000002C   0xF88D 0x0003      STRB     R0,[SP, #+3]
    111              GPIO_Init(SPI_CS5463_DC_SCK_GPIO_PORT, &GPIO_InitStructure);
   \   00000030   0x.... 0x....      LDR.W    R4,??DataTable16  ;; 0x40010800
   \   00000034   0x4669             MOV      R1,SP
   \   00000036   0x4620             MOV      R0,R4
   \   00000038   0x.... 0x....      BL       GPIO_Init
    112          
    113              /*!< Configure SPI_CS5463_DC pins: MOSI */
    114              GPIO_InitStructure.GPIO_Pin = SPI_CS5463_DC_MOSI_PIN;			//speed和mode无需修改，故无重新赋值
   \   0000003C   0x2080             MOVS     R0,#+128
   \   0000003E   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    115              GPIO_Init(SPI_CS5463_DC_MOSI_GPIO_PORT, &GPIO_InitStructure);
   \   00000042   0x4669             MOV      R1,SP
   \   00000044   0x4620             MOV      R0,R4
   \   00000046   0x.... 0x....      BL       GPIO_Init
    116          
    117              /*!< Configure SPI_CS5463_DC pins: MISO */
    118              GPIO_InitStructure.GPIO_Pin = SPI_CS5463_DC_MISO_PIN;
   \   0000004A   0x2040             MOVS     R0,#+64
   \   0000004C   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    119              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;//GPIO_Mode_IN_FLOATING;//
   \   00000050   0x2048             MOVS     R0,#+72
   \   00000052   0xF88D 0x0003      STRB     R0,[SP, #+3]
    120          	//GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_OD;
    121              GPIO_Init(SPI_CS5463_DC_MISO_GPIO_PORT, &GPIO_InitStructure);
   \   00000056   0x4669             MOV      R1,SP
   \   00000058   0x4620             MOV      R0,R4
   \   0000005A   0x.... 0x....      BL       GPIO_Init
    122          
    123              /*!< Configure SPI_CS5463_AC_CS_PIN pin: CS5463 Chip CS pin */
    124              GPIO_InitStructure.GPIO_Pin = SPI_CS5463_DC_CS_PIN;
   \   0000005E   0x2010             MOVS     R0,#+16
   \   00000060   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    125              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   \   00000064   0xF88D 0x0003      STRB     R0,[SP, #+3]
    126          	//GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    127              GPIO_Init(SPI_CS5463_DC_CS_GPIO_PORT, &GPIO_InitStructure);
   \   00000068   0x4669             MOV      R1,SP
   \   0000006A   0x4620             MOV      R0,R4
   \   0000006C   0x.... 0x....      BL       GPIO_Init
    128          
    129          	/*!< Configure SPI_CS5463_AC pins: RST */
    130              RCC_APB2PeriphClockCmd(SPI_RST_DC_GPIO_CLK, ENABLE);
   \   00000070   0x2101             MOVS     R1,#+1
   \   00000072   0x2008             MOVS     R0,#+8
   \   00000074   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
    131          	GPIO_InitStructure.GPIO_Pin = SPI_RST_DC_PIN;
   \   00000078   0x2001             MOVS     R0,#+1
   \   0000007A   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    132              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   \   0000007E   0x2010             MOVS     R0,#+16
   \   00000080   0xF88D 0x0003      STRB     R0,[SP, #+3]
    133              GPIO_Init(SPI_RST_DC_GPIO_PORT, &GPIO_InitStructure);
   \   00000084   0x4669             MOV      R1,SP
   \   00000086   0x.... 0x....      LDR.W    R0,??DataTable16_1  ;; 0x40010c00
   \   0000008A   0x.... 0x....      BL       GPIO_Init
    134          
    135          	RCC_APB1PeriphClockCmd(E1_DC_TIMER_CLK | E2_DC_GPIO_CLK , ENABLE);
   \   0000008E   0x2101             MOVS     R1,#+1
   \   00000090   0x2044             MOVS     R0,#+68
   \   00000092   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
    136          	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
   \   00000096   0x2101             MOVS     R1,#+1
   \   00000098   0x4608             MOV      R0,R1
   \   0000009A   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
    137          	GPIO_InitStructure.GPIO_Pin = E1_DC_PIN;
   \   0000009E   0x2001             MOVS     R0,#+1
   \   000000A0   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    138          //    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    139              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;
   \   000000A4   0x2028             MOVS     R0,#+40
   \   000000A6   0xF88D 0x0003      STRB     R0,[SP, #+3]
    140              GPIO_Init(E1_DC_TIMER_PORT , &GPIO_InitStructure);
   \   000000AA   0x4669             MOV      R1,SP
   \   000000AC   0x4620             MOV      R0,R4
   \   000000AE   0x.... 0x....      BL       GPIO_Init
    141          //	GPIO_Init(E2_DC_TIMER_PORT , &GPIO_InitStructure);          //E1、E2为同一个PORT，此处屏蔽
    142          
    143              /* Deselect the FLASH: Chip Select high */
    144              SPI_CS5463_DC_CS_HIGH();
   \   000000B2   0x2001             MOVS     R0,#+1
   \   000000B4   0x.... 0x....      LDR.W    R1,??DataTable16_2  ;; 0x42210190
   \   000000B8   0x6008             STR      R0,[R1, #+0]
    145          
    146          	/* SPI1 configuration */
    147              // data input on the DIO pin is sampled on the rising edge of the CLK. 
    148              // Data on the DO and DIO pins are clocked out on the falling edge of CLK.
    149              SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
   \   000000BA   0x2000             MOVS     R0,#+0
   \   000000BC   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    150              SPI_InitStructure.SPI_Mode = SPI_Mode_Master;		 //设置SSI为1，即SPI为主模式，
   \   000000C0   0xF44F 0x7082      MOV      R0,#+260
   \   000000C4   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    151              SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
   \   000000C8   0x2000             MOVS     R0,#+0
   \   000000CA   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    152              SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;			 //CPOL = 1,时钟极性为1，上升沿数据锁存
   \   000000CE   0x2002             MOVS     R0,#+2
   \   000000D0   0xF8AD 0x000A      STRH     R0,[SP, #+10]
    153              SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;		 //CPHA = 1,相位为1，第2个边沿锁存
   \   000000D4   0x2001             MOVS     R0,#+1
   \   000000D6   0xF8AD 0x000C      STRH     R0,[SP, #+12]
    154              SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;			 //设置SSM为1，启用软件从设备管理
   \   000000DA   0xF44F 0x7000      MOV      R0,#+512
   \   000000DE   0xF8AD 0x000E      STRH     R0,[SP, #+14]
    155              SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_4;
   \   000000E2   0x2008             MOVS     R0,#+8
   \   000000E4   0xF8AD 0x0010      STRH     R0,[SP, #+16]
    156              SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
   \   000000E8   0x2000             MOVS     R0,#+0
   \   000000EA   0xF8AD 0x0012      STRH     R0,[SP, #+18]
    157              SPI_InitStructure.SPI_CRCPolynomial = 7;
   \   000000EE   0x2007             MOVS     R0,#+7
   \   000000F0   0xF8AD 0x0014      STRH     R0,[SP, #+20]
    158              SPI_Init(SPI1, &SPI_InitStructure);
   \   000000F4   0x.... 0x....      LDR.W    R4,??DataTable16_3  ;; 0x40013000
   \   000000F8   0xA901             ADD      R1,SP,#+4
   \   000000FA   0x4620             MOV      R0,R4
   \   000000FC   0x.... 0x....      BL       SPI_Init
    159          
    160          //	SPI_SSOutputCmd(SPI1, ENABLE);      //使能SPI1的NSS输出
    161              /* Enable SPI1  */
    162              SPI_Cmd(SPI1, ENABLE);
   \   00000100   0x2101             MOVS     R1,#+1
   \   00000102   0x4620             MOV      R0,R4
   \   00000104   0x.... 0x....      BL       SPI_Cmd
    163          
    164          //  SPI_CS5463_DC_SOFT_RESET();
    165          }
   \   00000108   0xB006             ADD      SP,SP,#+24
   \   0000010A   0xBD10             POP      {R4,PC}          ;; return
    166          
    167          /**-----------------------------------------------------------------
    168            * @函数名 CS5463_DC_INIT
    169            * @功能   CS5463初始化
    170            *         
    171            * @参数   无
    172            * @返回值 无
    173          ***----------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    174          void CS5463_DC_INIT(void)
    175          {
   \                     CS5463_DC_INIT: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    176          	uint32_t STATUS_VALUE = 0;
    177          	SPI_RST_DC_LOW();
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable16_1  ;; 0x40010c00
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x4620             MOV      R0,R4
   \   0000000A   0x.... 0x....      BL       GPIO_ResetBits
    178          	SPI_RST_DC_LOW();
   \   0000000E   0x2101             MOVS     R1,#+1
   \   00000010   0x4620             MOV      R0,R4
   \   00000012   0x.... 0x....      BL       GPIO_ResetBits
    179          	SPI_RST_DC_LOW();
   \   00000016   0x2101             MOVS     R1,#+1
   \   00000018   0x4620             MOV      R0,R4
   \   0000001A   0x.... 0x....      BL       GPIO_ResetBits
    180          	Delay(1);
   \   0000001E   0x2001             MOVS     R0,#+1
   \   00000020   0x.... 0x....      BL       Delay
    181          	SPI_RST_DC_HIGH() ;
   \   00000024   0x2101             MOVS     R1,#+1
   \   00000026   0x4620             MOV      R0,R4
   \   00000028   0x.... 0x....      BL       GPIO_SetBits
    182          	SPI_RST_DC_HIGH();
   \   0000002C   0x2101             MOVS     R1,#+1
   \   0000002E   0x4620             MOV      R0,R4
   \   00000030   0x.... 0x....      BL       GPIO_SetBits
    183          	SPI_RST_DC_HIGH();
   \   00000034   0x2101             MOVS     R1,#+1
   \   00000036   0x4620             MOV      R0,R4
   \   00000038   0x.... 0x....      BL       GPIO_SetBits
    184          	Delay(1000);
   \   0000003C   0xF44F 0x707A      MOV      R0,#+1000
   \   00000040   0x.... 0x....      BL       Delay
    185          
    186          //	SPI_CS5463_DC_CS_LOW();
    187          
    188            /* Send  instruction */
    189            	SPI_CS5463_DC_SendByte(SYNC1);
   \   00000044   0x20FF             MOVS     R0,#+255
   \   00000046   0x.... 0x....      BL       SPI_CS5463_DC_SendByte
    190          	SPI_CS5463_DC_SendByte(SYNC1);
   \   0000004A   0x20FF             MOVS     R0,#+255
   \   0000004C   0x.... 0x....      BL       SPI_CS5463_DC_SendByte
    191          	SPI_CS5463_DC_SendByte(SYNC1);
   \   00000050   0x20FF             MOVS     R0,#+255
   \   00000052   0x.... 0x....      BL       SPI_CS5463_DC_SendByte
    192            	SPI_CS5463_DC_SendByte(SYNC0);
   \   00000056   0x20FE             MOVS     R0,#+254
   \   00000058   0x.... 0x....      BL       SPI_CS5463_DC_SendByte
    193          
    194          	SPI_CS5463_DC_WriteRegister(CONFIG , CONFIG_DATA_DC);
   \   0000005C   0x2101             MOVS     R1,#+1
   \   0000005E   0x2000             MOVS     R0,#+0
   \   00000060   0x.... 0x....      BL       SPI_CS5463_DC_WriteRegister
    195          
    196          /*   以下为150V 和 1A情况下校准，芯片输入引脚对地直接短接  */
    197          	SPI_CS5463_DC_WriteRegister(IG , 0x488C31);
   \   00000064   0x.... 0x....      LDR.W    R1,??DataTable16_4  ;; 0x488c31
   \   00000068   0x2004             MOVS     R0,#+4
   \   0000006A   0x.... 0x....      BL       SPI_CS5463_DC_WriteRegister
    198          	SPI_CS5463_DC_WriteRegister(VG , 0x682E94);
   \   0000006E   0x.... 0x....      LDR.W    R1,??DataTable16_5  ;; 0x682e94
   \   00000072   0x2008             MOVS     R0,#+8
   \   00000074   0x.... 0x....      BL       SPI_CS5463_DC_WriteRegister
    199          	SPI_CS5463_DC_WriteRegister(IDCOFF , 0xFE396B);
   \   00000078   0x.... 0x....      LDR.W    R1,??DataTable16_6  ;; 0xfe396b
   \   0000007C   0x2002             MOVS     R0,#+2
   \   0000007E   0x.... 0x....      BL       SPI_CS5463_DC_WriteRegister
    200          	SPI_CS5463_DC_WriteRegister(VDCOFF , 0x072C2E);
   \   00000082   0x.... 0x....      LDR.W    R1,??DataTable16_7  ;; 0x72c2e
   \   00000086   0x2006             MOVS     R0,#+6
   \   00000088   0x.... 0x....      BL       SPI_CS5463_DC_WriteRegister
    201          	SPI_CS5463_DC_WriteRegister(IACOFF , 0xFFFC8A);
   \   0000008C   0x.... 0x....      LDR.W    R1,??DataTable16_8  ;; 0xfffc8a
   \   00000090   0x2020             MOVS     R0,#+32
   \   00000092   0x.... 0x....      BL       SPI_CS5463_DC_WriteRegister
    202          	SPI_CS5463_DC_WriteRegister(VACOFF , 0xFFF800);
   \   00000096   0x.... 0x....      LDR.W    R1,??DataTable16_9  ;; 0xfff800
   \   0000009A   0x2022             MOVS     R0,#+34
   \   0000009C   0x.... 0x....      BL       SPI_CS5463_DC_WriteRegister
    203          
    204          
    205          /*   以下为187.5V 和 1.2A情况下校准，且只短接了输入线对地  */
    206          //	SPI_CS5463_DC_WriteRegister(IDCOFF , 0xFE4F47);
    207          //	SPI_CS5463_DC_WriteRegister(VDCOFF , 0x075074);
    208          //	SPI_CS5463_DC_WriteRegister(IACOFF , 0xFFF100);
    209          //	SPI_CS5463_DC_WriteRegister(VACOFF , 0xFFF100);
    210          //	SPI_CS5463_DC_WriteRegister(IG , 0x3C764F);
    211          //	SPI_CS5463_DC_WriteRegister(VG , 0x531018);
    212          
    213          	STATUS_VALUE = SPI_CS5463_DC_ReadRegister_INT32(STATUS);		    //读取状态寄存器
   \   000000A0   0x201E             MOVS     R0,#+30
   \   000000A2   0x.... 0x....      BL       SPI_CS5463_DC_ReadRegister_INT32
   \   000000A6   0x4601             MOV      R1,R0
    214          	SPI_CS5463_DC_WriteRegister(STATUS , STATUS_VALUE);					//写状态寄存器
   \   000000A8   0x201E             MOVS     R0,#+30
   \   000000AA   0x.... 0x....      BL       SPI_CS5463_DC_WriteRegister
    215          
    216          	SPI_CS5463_DC_WriteRegister(INTMASK , INTMASK_DATA_DC);				//屏蔽中断
   \   000000AE   0x2100             MOVS     R1,#+0
   \   000000B0   0x2034             MOVS     R0,#+52
   \   000000B2   0x.... 0x....      BL       SPI_CS5463_DC_WriteRegister
    217          
    218          	SPI_CS5463_DC_WriteRegister(CTRL , CTRL_DATA_DC);		  			//写控制寄存器
   \   000000B6   0x2105             MOVS     R1,#+5
   \   000000B8   0x2038             MOVS     R0,#+56
   \   000000BA   0x.... 0x....      BL       SPI_CS5463_DC_WriteRegister
    219          
    220          	SPI_CS5463_DC_WriteRegister(CYCLE_COUNT , CYCLE_COUNT_DATA_DC);		//A/D转换周期数
   \   000000BE   0xF44F 0x617A      MOV      R1,#+4000
   \   000000C2   0x200A             MOVS     R0,#+10
   \   000000C4   0x.... 0x....      BL       SPI_CS5463_DC_WriteRegister
    221          
    222          	SPI_CS5463_DC_WriteRegister(PULSE_RATE , PULSE_RATE_DATA_DC);			//能量脉冲速率
   \   000000C8   0xF64B 0x6195      MOVW     R1,#+48789
   \   000000CC   0x200C             MOVS     R0,#+12
   \   000000CE   0x.... 0x....      BL       SPI_CS5463_DC_WriteRegister
    223          
    224          	SPI_CS5463_DC_WriteRegister(PAGE , PAGE_1);						//写寄存器1页
   \   000000D2   0x2101             MOVS     R1,#+1
   \   000000D4   0x203E             MOVS     R0,#+62
   \   000000D6   0x.... 0x....      BL       SPI_CS5463_DC_WriteRegister
    225          	SPI_CS5463_DC_WriteRegister(PULSE_WIDTH , 0x000002);			//设置脉冲宽度，10ms
   \   000000DA   0x2102             MOVS     R1,#+2
   \   000000DC   0x2000             MOVS     R0,#+0
   \   000000DE   0x.... 0x....      BL       SPI_CS5463_DC_WriteRegister
    226          	SPI_CS5463_DC_WriteRegister(PAGE , PAGE_0);						//恢复对寄存器0页操作
   \   000000E2   0x2100             MOVS     R1,#+0
   \   000000E4   0x203E             MOVS     R0,#+62
   \   000000E6   0x.... 0x....      BL       SPI_CS5463_DC_WriteRegister
    227          
    228          	STATUS_VALUE = SPI_CS5463_DC_ReadRegister_INT32(STATUS);		    //读取状态寄存器
   \   000000EA   0x201E             MOVS     R0,#+30
   \   000000EC   0x.... 0x....      BL       SPI_CS5463_DC_ReadRegister_INT32
    229          	SPI_CS5463_DC_WriteRegister(STATUS , STATUS_VALUE);					//写状态寄存器
   \   000000F0   0x4601             MOV      R1,R0
   \   000000F2   0x201E             MOVS     R0,#+30
   \   000000F4   0x.... 0x....      BL       SPI_CS5463_DC_WriteRegister
    230          
    231          	SPI_CS5463_DC_SendByte(CONTINUOUS_CYCLE);				            //启动连续计算周期
   \   000000F8   0x20E8             MOVS     R0,#+232
   \   000000FA   0x.... 0x....      BL       SPI_CS5463_DC_SendByte
    232          
    233              /* Deselect the CS5463: Chip Select high */
    234              SPI_CS5463_DC_CS_HIGH();
   \   000000FE   0x2001             MOVS     R0,#+1
   \   00000100   0x.... 0x....      LDR.W    R1,??DataTable16_2  ;; 0x42210190
   \   00000104   0x6008             STR      R0,[R1, #+0]
    235          	Delay(10);
   \   00000106   0x200A             MOVS     R0,#+10
   \   00000108   0xE8BD 0x4010      POP      {R4,LR}
   \   0000010C   0x.... 0x....      B.W      Delay
    236          }
    237          
    238          /**-----------------------------------------------------------------
    239            * @函数名 CS5463_DC_Adjust
    240            * @功能   CS5463校准
    241            *         
    242            * @参数   无
    243            * @返回值 无
    244          ***----------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    245          void CS5463_DC_Adjust(void)						//5463校准
    246          {
   \                     CS5463_DC_Adjust: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    247          	uint32_t i;
    248          	float x;
    249          	uint8_t mode;
    250              SPI_CS5463_DC_SendByte(SYNC1);
   \   00000002   0x20FF             MOVS     R0,#+255
   \   00000004   0x.... 0x....      BL       SPI_CS5463_DC_SendByte
    251          	SPI_CS5463_DC_SendByte(SYNC1);
   \   00000008   0x20FF             MOVS     R0,#+255
   \   0000000A   0x.... 0x....      BL       SPI_CS5463_DC_SendByte
    252          	SPI_CS5463_DC_SendByte(SYNC1);
   \   0000000E   0x20FF             MOVS     R0,#+255
   \   00000010   0x.... 0x....      BL       SPI_CS5463_DC_SendByte
    253          	SPI_CS5463_DC_SendByte(SYNC0);   										
   \   00000014   0x20FE             MOVS     R0,#+254
   \   00000016   0x.... 0x....      BL       SPI_CS5463_DC_SendByte
    254           	SPI_CS5463_DC_ClearDrdy();    
   \   0000001A   0x.... 0x....      BL       SPI_CS5463_DC_ClearDrdy
    255           	SPI_CS5463_DC_WaitDrdy();  
   \   0000001E   0x.... 0x....      BL       SPI_CS5463_DC_WaitDrdy
    256              SPI_CS5463_DC_SendCommand(STOP); 									//发送POWER_HALT 命令
   \   00000022   0x20A0             MOVS     R0,#+160
   \   00000024   0x.... 0x....      BL       SPI_CS5463_DC_SendCommand
    257             
    258              mode = IACGAINC;
    259              //电流  交流偏置校准：
    260           	SPI_CS5463_DC_ClearDrdy();    
   \   00000028   0x.... 0x....      BL       SPI_CS5463_DC_ClearDrdy
    261              switch(mode)
    262              {
    263              case IDCOFFC:														//直流零点校准
    264          	 	SPI_CS5463_DC_ClearDrdy();        								 
    265              	SPI_CS5463_DC_WriteRegister(IDCOFF , 0x000000);				    //电压增益校准寄存器**
    266          		SPI_CS5463_DC_SendCommand(IDCOFFC);								//写校准命令寄存器
    267          		for(i=0;i<100000000;i++);
    268              	SPI_CS5463_DC_WaitDrdy();     									//等待校准完成 										
    269              	configsfr_DC.Idcoff = SPI_CS5463_DC_ReadRegister_INT32(IDCOFF)|0xAA000000;	//读Idcoff 寄存器
    270              	printf("\r\n 直流电流偏移 = %x\n", configsfr_DC.Idcoff);
    271          		break;
    272              case VDCOFFC:														//直流零点校准
    273          	 	SPI_CS5463_DC_ClearDrdy();    
    274                  SPI_CS5463_DC_WriteRegister(VDCOFF , 0x000000); 				//电压增益校准寄存器** 
    275             		SPI_CS5463_DC_SendCommand(VDCOFFC);								//写校准命令寄存器
    276              	for(i=0;i<100000000;i++);
    277          		SPI_CS5463_DC_WaitDrdy();     									//等待校准完成
    278              	configsfr_DC.Vdcoff = SPI_CS5463_DC_ReadRegister_INT32(VDCOFF)|0xAA000000;	//读Idcoff 寄存器
    279              	printf("\r\n 直流电压偏移 = %x\n", configsfr_DC.Vdcoff);
    280          		break;
    281              case IACOFFC:														//交流零点校准
    282          	 	SPI_CS5463_DC_ClearDrdy();    
    283                  SPI_CS5463_DC_WriteRegister(IACOFF , 0x000000); 				//电压增益校准寄存器** 
    284            		SPI_CS5463_DC_SendCommand(IACOFFC);								//写校准命令寄存器
    285              	for(i=0;i<100000000;i++);
    286          		SPI_CS5463_DC_WaitDrdy();     									//等待校准完成
    287          		configsfr_DC.Iacoff = SPI_CS5463_DC_ReadRegister_INT32(IACOFF)|0xAA000000;	//读Iacoff 寄存器
    288              	printf("\r\n 交流电流偏移 = %x\n", configsfr_DC.Iacoff);
    289          		break;
    290              case VACOFFC:														//交流零点校准
    291          		SPI_CS5463_DC_ClearDrdy();    
    292                  SPI_CS5463_DC_WriteRegister(VACOFF , 0x000000); 				//电压增益校准寄存器** 
    293              	SPI_CS5463_DC_SendCommand(VACOFFC);								//写校准命令寄存器
    294              	for(i=0;i<100000000;i++);
    295          		SPI_CS5463_DC_WaitDrdy();     									//等待校准完成
    296          		configsfr_DC.Vacoff = SPI_CS5463_DC_ReadRegister_INT32(VACOFF)|0xAA000000; //读Idcoff 寄存器
    297              	printf("\r\n 交流电压偏移 = %x\n", configsfr_DC.Vacoff);
    298          		break;
    299          	case VACGAINC:														//电压增益校准
    300          		SPI_CS5463_DC_ClearDrdy();    
    301                	SPI_CS5463_DC_WriteRegister(VG , 0x400000); 					//电压增益校准寄存器** 
    302          		SPI_CS5463_DC_SendCommand(VACGAINC);								//写校准命令寄存器
    303              	for(i=0;i<50000000;i++);
    304          		SPI_CS5463_DC_WaitDrdy();     									  //等待校准完成
    305          		configsfr_DC.Vgain = SPI_CS5463_DC_ReadRegister_INT32(VG)|0xAA000000; //读Igain 寄存器
    306          //    	x = SPI_CS5463_DC_Read_VIgain_FLOAT(VG);
    307          		SPI_CS5463_DC_ClearDrdy();
    308          		SPI_CS5463_DC_SendByte(CONTINUOUS_CYCLE);
    309          		SPI_CS5463_DC_WaitDrdy();
    310          		x = SPI_CS5463_DC_Read_VIrms_FLOAT(VRMS);
    311          		printf("\r\n 交流电压增益 = %x\n", configsfr_DC.Vgain);
    312          		printf("\r\n 交流电压有效值 = %f\n", x);
    313          		break;
    314          	case IACGAINC:														//电流增益校准
    315          		SPI_CS5463_DC_ClearDrdy();    
   \   0000002C   0x.... 0x....      BL       SPI_CS5463_DC_ClearDrdy
    316          	    SPI_CS5463_DC_WriteRegister(IG , 0x400000); 					//电流增益校准寄存器** 
   \   00000030   0xF44F 0x0180      MOV      R1,#+4194304
   \   00000034   0x2004             MOVS     R0,#+4
   \   00000036   0x.... 0x....      BL       SPI_CS5463_DC_WriteRegister
    317              	SPI_CS5463_DC_SendCommand(IACGAINC);								//写校准命令寄存器
   \   0000003A   0x20CE             MOVS     R0,#+206
   \   0000003C   0x.... 0x....      BL       SPI_CS5463_DC_SendCommand
    318              	for(i=0;i<50000000;i++);
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0x.... 0x....      LDR.W    R1,??DataTable16_10  ;; 0x2faf080
   \   00000046   0xE000             B.N      ??CS5463_DC_Adjust_0
   \                     ??CS5463_DC_Adjust_1: (+1)
   \   00000048   0x1C40             ADDS     R0,R0,#+1
   \                     ??CS5463_DC_Adjust_0: (+1)
   \   0000004A   0x4288             CMP      R0,R1
   \   0000004C   0xD3FC             BCC.N    ??CS5463_DC_Adjust_1
    319          		SPI_CS5463_DC_WaitDrdy();     									  //等待校准完成
   \   0000004E   0x.... 0x....      BL       SPI_CS5463_DC_WaitDrdy
    320          		configsfr_DC.Igain = SPI_CS5463_DC_ReadRegister_INT32(IG)|0xAA000000; //读Igain 寄存器
   \   00000052   0x.... 0x....      LDR.W    R4,??DataTable16_11
   \   00000056   0x2004             MOVS     R0,#+4
   \   00000058   0x.... 0x....      BL       SPI_CS5463_DC_ReadRegister_INT32
   \   0000005C   0xF040 0x402A      ORR      R0,R0,#0xAA000000
   \   00000060   0x6120             STR      R0,[R4, #+16]
    321          //    	x = SPI_CS5463_DC_Read_VIgain_FLOAT(VG);
    322          		SPI_CS5463_DC_ClearDrdy();
   \   00000062   0x.... 0x....      BL       SPI_CS5463_DC_ClearDrdy
    323          		SPI_CS5463_DC_SendByte(CONTINUOUS_CYCLE);
   \   00000066   0x20E8             MOVS     R0,#+232
   \   00000068   0x.... 0x....      BL       SPI_CS5463_DC_SendByte
    324          		SPI_CS5463_DC_WaitDrdy();
   \   0000006C   0x.... 0x....      BL       SPI_CS5463_DC_WaitDrdy
    325          		x = SPI_CS5463_DC_Read_VIrms_FLOAT(IRMS);
   \   00000070   0x2016             MOVS     R0,#+22
   \   00000072   0x.... 0x....      BL       SPI_CS5463_DC_Read_VIrms_FLOAT
   \   00000076   0x4605             MOV      R5,R0
    326          		printf("\r\n 交流电流增益 = %x\n", configsfr_DC.Igain);
   \   00000078   0x6921             LDR      R1,[R4, #+16]
   \   0000007A   0x.... 0x....      ADR.W    R0,?_0
   \   0000007E   0x.... 0x....      BL       printf
    327          		printf("\r\n 交流电流有效值 = %f\n", x);
   \   00000082   0x4628             MOV      R0,R5
   \   00000084   0x.... 0x....      BL       __aeabi_f2d
   \   00000088   0x4602             MOV      R2,R0
   \   0000008A   0x460B             MOV      R3,R1
   \   0000008C   0x.... 0x....      ADR.W    R0,?_1
   \   00000090   0x.... 0x....      BL       printf
    328          		break;   
    329              }
    330          	CS5463_DC_INIT();			 												//启动测量
   \   00000094   0xE8BD 0x4031      POP      {R0,R4,R5,LR}
   \   00000098   0x....             B.N      CS5463_DC_INIT
    331          }
    332          
    333          /**-----------------------------------------------------------------
    334            * @函数名 SPI_CS5463_AC_SendByte
    335            * @功能   通过SPI总线发送一个字节数据(同时接收一个字节数据)
    336            *         Sends a byte through the SPI interface and return the byte
    337            *         received from the SPI bus.
    338            * @参数   要写入的一个字节数据
    339            * @返回值 在发数据时，MISO信号线上接收的一个字节
    340          ***----------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    341          uint8_t SPI_CS5463_DC_SendByte(uint8_t byte)
    342          {
   \                     SPI_CS5463_DC_SendByte: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    343              SPI_CS5463_DC_CS_LOW();
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x....             LDR.N    R1,??DataTable16_2  ;; 0x42210190
   \   00000008   0x6008             STR      R0,[R1, #+0]
   \   0000000A   0x....             LDR.N    R5,??DataTable16_3  ;; 0x40013000
    344          //	Delay(10);
    345              /* Loop while DR register in not emplty */
    346              while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET);
   \                     ??SPI_CS5463_DC_SendByte_0: (+1)
   \   0000000C   0x2102             MOVS     R1,#+2
   \   0000000E   0x4628             MOV      R0,R5
   \   00000010   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD0F9             BEQ.N    ??SPI_CS5463_DC_SendByte_0
    347          
    348              /* Send byte through the SPI1 peripheral */
    349              SPI_I2S_SendData(SPI1, byte);
   \   00000018   0x4621             MOV      R1,R4
   \   0000001A   0x4628             MOV      R0,R5
   \   0000001C   0x.... 0x....      BL       SPI_I2S_SendData
    350          
    351              /* Wait to receive a byte */
    352              while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET);
   \                     ??SPI_CS5463_DC_SendByte_1: (+1)
   \   00000020   0x2101             MOVS     R1,#+1
   \   00000022   0x4628             MOV      R0,R5
   \   00000024   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   00000028   0x2800             CMP      R0,#+0
   \   0000002A   0xD0F9             BEQ.N    ??SPI_CS5463_DC_SendByte_1
    353          
    354          //    SPI_CS5463_DC_CS_HIGH();
    355          		/* Return the byte read from the SPI bus */
    356              return SPI_I2S_ReceiveData(SPI1);	
   \   0000002C   0x4628             MOV      R0,R5
   \   0000002E   0x.... 0x....      BL       SPI_I2S_ReceiveData
   \   00000032   0xB2C0             UXTB     R0,R0
   \   00000034   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    357          //	Delay(10);
    358          }
    359          
    360          /**-----------------------------------------------------------------
    361            * @函数名 SPI_CS5463_DC_ReadByte
    362            * @功能   读取CS5463的一个字节，未包含发送读命令和起始地址
    363            * @参数   无
    364            * @返回值 从CS5463读取的一个字节
    365          ***----------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    366          uint8_t SPI_CS5463_DC_ReadByte(void)
    367          {
    368              return (SPI_CS5463_DC_SendByte(Dummy_Byte));
   \                     SPI_CS5463_DC_ReadByte: (+1)
   \   00000000   0x20FE             MOVS     R0,#+254
   \   00000002   0x....             B.N      SPI_CS5463_DC_SendByte
    369          }
    370          
    371          /**-----------------------------------------------------------------
    372            * @函数名 SPI_CS5463_DC_SendCommand
    373            * @功能   通过SPI总线发送一个字节命令
    374            *         Sends a byte through the SPI interface
    375            * @参数   要写入的一个字节命令
    376            * @返回值 无
    377          ***----------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    378          void SPI_CS5463_DC_SendCommand(uint8_t Command)
    379          {
   \                     SPI_CS5463_DC_SendCommand: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    380          	SPI_CS5463_DC_CS_LOW();
   \   00000004   0x....             LDR.N    R5,??DataTable16_2  ;; 0x42210190
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x6028             STR      R0,[R5, #+0]
    381          	Delay(5);
   \   0000000A   0x2005             MOVS     R0,#+5
   \   0000000C   0x.... 0x....      BL       Delay
    382          	SPI_CS5463_DC_SendByte(Command);
   \   00000010   0x4620             MOV      R0,R4
   \   00000012   0x.... 0x....      BL       SPI_CS5463_DC_SendByte
    383          	SPI_CS5463_DC_CS_HIGH();
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0x6028             STR      R0,[R5, #+0]
    384          	Delay(5);
   \   0000001A   0x2005             MOVS     R0,#+5
   \   0000001C   0xE8BD 0x4032      POP      {R1,R4,R5,LR}
   \   00000020   0x.... 0x....      B.W      Delay
    385          }
    386          
    387          /**-----------------------------------------------------------------
    388            * @函数名 SPI_CS5463_DC_Write
    389            * @功能   往CS5463中写任意长度数据
    390            * @参数   *buf 数组，len 数组长度(以字节为最小单位)
    391          ***----------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    392          void SPI_CS5463_DC_Write(uint8_t *buf , uint8_t len)
    393          {
   \                     SPI_CS5463_DC_Write: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    394          	uint8_t i;
    395          	/* Select the CS5463: Chip Select low */
    396          	SPI_CS5463_DC_CS_LOW();
   \   00000006   0x....             LDR.N    R6,??DataTable16_2  ;; 0x42210190
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x6030             STR      R0,[R6, #+0]
    397          	Delay(2);
   \   0000000C   0x2002             MOVS     R0,#+2
   \   0000000E   0x.... 0x....      BL       Delay
    398          	buf[0]|=0x40;
   \   00000012   0x7820             LDRB     R0,[R4, #+0]
   \   00000014   0xF040 0x0040      ORR      R0,R0,#0x40
   \   00000018   0x7020             STRB     R0,[R4, #+0]
    399          	for(i=0;i<len;i++)
   \   0000001A   0x2700             MOVS     R7,#+0
   \   0000001C   0xE003             B.N      ??SPI_CS5463_DC_Write_0
    400          		SPI_CS5463_DC_SendByte(buf[i]);
   \                     ??SPI_CS5463_DC_Write_1: (+1)
   \   0000001E   0x5D38             LDRB     R0,[R7, R4]
   \   00000020   0x.... 0x....      BL       SPI_CS5463_DC_SendByte
   \   00000024   0x1C7F             ADDS     R7,R7,#+1
   \                     ??SPI_CS5463_DC_Write_0: (+1)
   \   00000026   0xB2FF             UXTB     R7,R7
   \   00000028   0x42AF             CMP      R7,R5
   \   0000002A   0xD3F8             BCC.N    ??SPI_CS5463_DC_Write_1
    401          	Delay(1);
   \   0000002C   0x2001             MOVS     R0,#+1
   \   0000002E   0x.... 0x....      BL       Delay
    402          	SPI_CS5463_DC_CS_HIGH();
   \   00000032   0x2001             MOVS     R0,#+1
   \   00000034   0x6030             STR      R0,[R6, #+0]
    403          	Delay(1);
   \   00000036   0xE8BD 0x40F2      POP      {R1,R4-R7,LR}
   \   0000003A   0x.... 0x....      B.W      Delay
    404          }
    405          
    406          /**-----------------------------------------------------------------
    407            * @函数名 SPI_CS5463_DC_WriteRegister
    408            * @功能   写CS5463的寄存器
    409            * @参数   Command为命令，DATA为数据
    410          ***----------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    411          void SPI_CS5463_DC_WriteRegister(uint8_t Command , uint32_t DATA)
    412          {
   \                     SPI_CS5463_DC_WriteRegister: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    413          	uint8_t buf[4];
    414          	/* Select the CS5463: Chip Select low */
    415          	buf[0] = Command;
   \   00000002   0xF88D 0x0000      STRB     R0,[SP, #+0]
    416          	buf[1] = (DATA >> 16) & 0xFF;
   \   00000006   0x0C08             LSRS     R0,R1,#+16
   \   00000008   0xF88D 0x0001      STRB     R0,[SP, #+1]
    417          	buf[2] = (DATA >> 8) & 0xFF;
   \   0000000C   0x0A08             LSRS     R0,R1,#+8
   \   0000000E   0xF88D 0x0002      STRB     R0,[SP, #+2]
    418          	buf[3] = DATA & 0xFF;
   \   00000012   0xF88D 0x1003      STRB     R1,[SP, #+3]
    419          	SPI_CS5463_DC_Write(buf , 4);
   \   00000016   0x2104             MOVS     R1,#+4
   \   00000018   0x4668             MOV      R0,SP
   \   0000001A   0x.... 0x....      BL       SPI_CS5463_DC_Write
    420          }
   \   0000001E   0xBD01             POP      {R0,PC}          ;; return
    421          
    422          /**-----------------------------------------------------------------
    423            * @函数名 SPI_CS5463_DC_Read
    424            * @功能   读取CS5463的寄存器
    425            * @参数   Command：单字节命令,buf为读取到的数组
    426          ***----------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    427          void SPI_CS5463_DC_Read(uint8_t Command , uint8_t *buf)
    428          {
   \                     SPI_CS5463_DC_Read: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
    429          	uint8_t i;
    430            /* Select the CS5463: Chip Select low */
    431              SPI_CS5463_DC_CS_LOW();
   \   00000008   0x....             LDR.N    R6,??DataTable16_2  ;; 0x42210190
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x6030             STR      R0,[R6, #+0]
    432          	Delay(2);
   \   0000000E   0x2002             MOVS     R0,#+2
   \   00000010   0x.... 0x....      BL       Delay
    433            /* Send  instruction */
    434              SPI_CS5463_DC_SendByte(Command);
   \   00000014   0x4620             MOV      R0,R4
   \   00000016   0x.... 0x....      BL       SPI_CS5463_DC_SendByte
    435          	for(i=1;i<4;i++)
   \   0000001A   0x2701             MOVS     R7,#+1
   \   0000001C   0xE005             B.N      ??SPI_CS5463_DC_Read_0
    436          		buf[i] = SPI_CS5463_DC_SendByte(0xFE);
   \                     ??SPI_CS5463_DC_Read_1: (+1)
   \   0000001E   0x20FE             MOVS     R0,#+254
   \   00000020   0x.... 0x....      BL       SPI_CS5463_DC_SendByte
   \   00000024   0xF808 0x0005      STRB     R0,[R8, R5]
   \   00000028   0x1C7F             ADDS     R7,R7,#+1
   \                     ??SPI_CS5463_DC_Read_0: (+1)
   \   0000002A   0xB2FF             UXTB     R7,R7
   \   0000002C   0x46B8             MOV      R8,R7
   \   0000002E   0xF1B8 0x0F04      CMP      R8,#+4
   \   00000032   0xDBF4             BLT.N    ??SPI_CS5463_DC_Read_1
    437          	buf[0] = Command;
   \   00000034   0x702C             STRB     R4,[R5, #+0]
    438          	Delay(1);
   \   00000036   0x2001             MOVS     R0,#+1
   \   00000038   0x.... 0x....      BL       Delay
    439          	SPI_CS5463_DC_CS_HIGH();
   \   0000003C   0x2001             MOVS     R0,#+1
   \   0000003E   0x6030             STR      R0,[R6, #+0]
    440          	Delay(2);
   \   00000040   0x2002             MOVS     R0,#+2
   \   00000042   0xE8BD 0x41F0      POP      {R4-R8,LR}
   \   00000046   0x.... 0x....      B.W      Delay
    441          }
    442          
    443          /**-----------------------------------------------------------------
    444            * @函数名 SPI_CS5463_DC_ReadRegister_INT32
    445            * @功能   读取CS5463的寄存器，得到1个3字节数据
    446            * @参数   Command：单字节命令
    447            * @返回   Data，3字节数据
    448          ***----------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    449          uint32_t SPI_CS5463_DC_ReadRegister_INT32(uint8_t Command)
    450          {
   \                     SPI_CS5463_DC_ReadRegister_INT32: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
    451          	uint32_t Data = 0;
    452          	uint8_t Data0 = 0,Data1 = 0,Data2 = 0;
    453            /* Select the CS5463: Chip Select low */
    454            	SPI_CS5463_DC_CS_LOW();
   \   00000004   0x....             LDR.N    R5,??DataTable16_2  ;; 0x42210190
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x6028             STR      R0,[R5, #+0]
    455          	Delay(1);
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0x.... 0x....      BL       Delay
    456            /* Send  instruction */
    457            	SPI_CS5463_DC_SendByte(Command);
   \   00000010   0x4620             MOV      R0,R4
   \   00000012   0x.... 0x....      BL       SPI_CS5463_DC_SendByte
    458          
    459          	Data0 = SPI_CS5463_DC_SendByte(0xFE);
   \   00000016   0x20FE             MOVS     R0,#+254
   \   00000018   0x.... 0x....      BL       SPI_CS5463_DC_SendByte
   \   0000001C   0x4604             MOV      R4,R0
    460          	Data1 = SPI_CS5463_DC_SendByte(0xFE);
   \   0000001E   0x20FE             MOVS     R0,#+254
   \   00000020   0x.... 0x....      BL       SPI_CS5463_DC_SendByte
   \   00000024   0x4606             MOV      R6,R0
    461          	Data2 = SPI_CS5463_DC_SendByte(0xFE);
   \   00000026   0x20FE             MOVS     R0,#+254
   \   00000028   0x.... 0x....      BL       SPI_CS5463_DC_SendByte
   \   0000002C   0x4607             MOV      R7,R0
    462          	Data = Data0<<16 | Data1<<8 | Data2;
    463          	SPI_CS5463_DC_CS_HIGH();
   \   0000002E   0x2001             MOVS     R0,#+1
   \   00000030   0x6028             STR      R0,[R5, #+0]
    464          	Delay(5);
   \   00000032   0x2005             MOVS     R0,#+5
   \   00000034   0x.... 0x....      BL       Delay
    465          	return Data;
   \   00000038   0x0230             LSLS     R0,R6,#+8
   \   0000003A   0xEA40 0x4004      ORR      R0,R0,R4, LSL #+16
   \   0000003E   0x4338             ORRS     R0,R7,R0
   \   00000040   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    466          }
    467          
    468          /**-----------------------------------------------------------------
    469            * @函数名 SPI_CS5463_DC_Read_Temp_FLOAT
    470            * @功能   读取CS5463的寄存器，得到1个浮点型数据
    471            * @参数   Command：单字节命令
    472            * @返回   Data，浮点型数据
    473            * @备注   返回的的字节为-2^7,2^6到2^-16
    474          ***----------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    475          float SPI_CS5463_DC_Read_Temp_FLOAT(uint8_t Command)
    476          {
   \                     SPI_CS5463_DC_Read_Temp_FLOAT: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
    477          	float Data = 0;
    478          	uint8_t Data0 = 0,Data1 = 0,Data2 = 0;
    479            /* Select the CS5463: Chip Select low */
    480            	SPI_CS5463_DC_CS_LOW();
   \   00000004   0x....             LDR.N    R5,??DataTable16_2  ;; 0x42210190
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x6028             STR      R0,[R5, #+0]
    481          	Delay(1);
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0x.... 0x....      BL       Delay
    482            /* Send  instruction */
    483            	SPI_CS5463_DC_SendByte(Command);
   \   00000010   0x4620             MOV      R0,R4
   \   00000012   0x.... 0x....      BL       SPI_CS5463_DC_SendByte
    484          	
    485          	Data0 = SPI_CS5463_DC_SendByte(0xFE);
   \   00000016   0x20FE             MOVS     R0,#+254
   \   00000018   0x.... 0x....      BL       SPI_CS5463_DC_SendByte
   \   0000001C   0x4606             MOV      R6,R0
    486          	Data1 = SPI_CS5463_DC_SendByte(0xFE);
   \   0000001E   0x20FE             MOVS     R0,#+254
   \   00000020   0x.... 0x....      BL       SPI_CS5463_DC_SendByte
   \   00000024   0x4607             MOV      R7,R0
    487          	Data2 = SPI_CS5463_DC_SendByte(0xFE);
   \   00000026   0x20FE             MOVS     R0,#+254
   \   00000028   0x.... 0x....      BL       SPI_CS5463_DC_SendByte
   \   0000002C   0x4604             MOV      R4,R0
    488          	Data = ((uint8_t)((Data0>>7) & 0x01))*(-128) + (Data0 & 0x7F) + (float)Data1/256 + (float)Data2/65536;
    489          	SPI_CS5463_DC_CS_HIGH();
   \   0000002E   0x2001             MOVS     R0,#+1
   \   00000030   0x6028             STR      R0,[R5, #+0]
    490          	Delay(5);
   \   00000032   0x2005             MOVS     R0,#+5
   \   00000034   0x.... 0x....      BL       Delay
    491          	return Data;
   \   00000038   0xF006 0x007F      AND      R0,R6,#0x7F
   \   0000003C   0x09F1             LSRS     R1,R6,#+7
   \   0000003E   0xEBA0 0x10C1      SUB      R0,R0,R1, LSL #+7
   \   00000042   0x.... 0x....      BL       __aeabi_i2f
   \   00000046   0x4605             MOV      R5,R0
   \   00000048   0x4638             MOV      R0,R7
   \   0000004A   0x.... 0x....      BL       __aeabi_ui2f
   \   0000004E   0xF04F 0x516E      MOV      R1,#+998244352
   \   00000052   0x.... 0x....      BL       __aeabi_fmul
   \   00000056   0x4629             MOV      R1,R5
   \   00000058   0x.... 0x....      BL       __aeabi_fadd
   \   0000005C   0x4605             MOV      R5,R0
   \   0000005E   0x4620             MOV      R0,R4
   \   00000060   0x.... 0x....      BL       __aeabi_ui2f
   \   00000064   0xF04F 0x515E      MOV      R1,#+931135488
   \   00000068   0x.... 0x....      BL       __aeabi_fmul
   \   0000006C   0x4629             MOV      R1,R5
   \   0000006E   0xE8BD 0x40F4      POP      {R2,R4-R7,LR}
   \   00000072   0x.... 0x....      B.W      __aeabi_fadd
    492          }
    493          
    494          /**-----------------------------------------------------------------
    495            * @函数名 SPI_CS5463_DC_Read_VIrms_FLOAT
    496            * @功能   读取CS5463的电压/电流有效值，得到1个浮点型数据
    497            * @参数   Command：单字节命令
    498            * @返回   Data，浮点型数据				  
    499            * @备注   返回的的字节为2^-1到2^-24
    500          ***----------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    501          float SPI_CS5463_DC_Read_VIrms_FLOAT(uint8_t Command)
    502          {
   \                     SPI_CS5463_DC_Read_VIrms_FLOAT: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
    503          	float Data = 0;
    504          	uint8_t Data0 = 0,Data1 = 0,Data2 = 0;
    505            /* Select the CS5463: Chip Select low */
    506            	SPI_CS5463_DC_CS_LOW();
   \   00000004   0x....             LDR.N    R5,??DataTable16_2  ;; 0x42210190
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x6028             STR      R0,[R5, #+0]
    507          	Delay(1);
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0x.... 0x....      BL       Delay
    508            /* Send  instruction */
    509            	SPI_CS5463_DC_SendByte(Command);
   \   00000010   0x4620             MOV      R0,R4
   \   00000012   0x.... 0x....      BL       SPI_CS5463_DC_SendByte
    510          	
    511          	Data0 = SPI_CS5463_DC_SendByte(0xFE);
   \   00000016   0x20FE             MOVS     R0,#+254
   \   00000018   0x.... 0x....      BL       SPI_CS5463_DC_SendByte
   \   0000001C   0x4604             MOV      R4,R0
    512          	Data1 = SPI_CS5463_DC_SendByte(0xFE);
   \   0000001E   0x20FE             MOVS     R0,#+254
   \   00000020   0x.... 0x....      BL       SPI_CS5463_DC_SendByte
   \   00000024   0x4606             MOV      R6,R0
    513          	Data2 = SPI_CS5463_DC_SendByte(0xFE);
   \   00000026   0x20FE             MOVS     R0,#+254
   \   00000028   0x.... 0x....      BL       SPI_CS5463_DC_SendByte
   \   0000002C   0x4607             MOV      R7,R0
    514          	Data = (float)(Data0)/256 + (float)Data1/256/256 + (float)Data2/256/256/256;
    515          	SPI_CS5463_DC_CS_HIGH();
   \   0000002E   0x2001             MOVS     R0,#+1
   \   00000030   0x6028             STR      R0,[R5, #+0]
    516          	Delay(5);
   \   00000032   0x2005             MOVS     R0,#+5
   \   00000034   0x.... 0x....      BL       Delay
    517          	return Data;
   \   00000038   0x4620             MOV      R0,R4
   \   0000003A   0x.... 0x....      BL       __aeabi_ui2f
   \   0000003E   0xF04F 0x516E      MOV      R1,#+998244352
   \   00000042   0x.... 0x....      BL       __aeabi_fmul
   \   00000046   0x4604             MOV      R4,R0
   \   00000048   0x4630             MOV      R0,R6
   \   0000004A   0x.... 0x....      BL       __aeabi_ui2f
   \   0000004E   0xF04F 0x515E      MOV      R1,#+931135488
   \   00000052   0x.... 0x....      BL       __aeabi_fmul
   \   00000056   0x4621             MOV      R1,R4
   \   00000058   0x.... 0x....      BL       __aeabi_fadd
   \   0000005C   0x4604             MOV      R4,R0
   \   0000005E   0x4638             MOV      R0,R7
   \   00000060   0x.... 0x....      BL       __aeabi_ui2f
   \   00000064   0xF04F 0x514E      MOV      R1,#+864026624
   \   00000068   0x.... 0x....      BL       __aeabi_fmul
   \   0000006C   0x4621             MOV      R1,R4
   \   0000006E   0xE8BD 0x40F4      POP      {R2,R4-R7,LR}
   \   00000072   0x.... 0x....      B.W      __aeabi_fadd
    518          }
    519          
    520          /**-----------------------------------------------------------------
    521            * @函数名 SPI_CS5463_DC_Read_VIgain_FLOAT
    522            * @功能   读取CS5463的电压/电流增益，得到1个浮点型数据
    523            * @参数   Command：单字节命令
    524            * @返回   Data，浮点型数据
    525            * @备注   返回的的字节为2^1到2^0 + 2^-1到2^-22 (2^1到2^-22)
    526          ***----------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    527          float SPI_CS5463_DC_Read_VIgain_FLOAT(uint8_t Command)
    528          {
   \                     SPI_CS5463_DC_Read_VIgain_FLOAT: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
    529          	float Data = 0;
    530          	uint8_t Data0 = 0,Data1 = 0,Data2 = 0;
    531            /* Select the CS5463: Chip Select low */
    532            	SPI_CS5463_DC_CS_LOW();
   \   00000004   0x....             LDR.N    R5,??DataTable16_2  ;; 0x42210190
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x6028             STR      R0,[R5, #+0]
    533          	Delay(1);
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0x.... 0x....      BL       Delay
    534            /* Send  instruction */
    535            	SPI_CS5463_DC_SendByte(Command);
   \   00000010   0x4620             MOV      R0,R4
   \   00000012   0x.... 0x....      BL       SPI_CS5463_DC_SendByte
    536          	
    537          	Data0 = SPI_CS5463_DC_SendByte(0xFE);
   \   00000016   0x20FE             MOVS     R0,#+254
   \   00000018   0x.... 0x....      BL       SPI_CS5463_DC_SendByte
   \   0000001C   0x4606             MOV      R6,R0
    538          	Data1 = SPI_CS5463_DC_SendByte(0xFE);
   \   0000001E   0x20FE             MOVS     R0,#+254
   \   00000020   0x.... 0x....      BL       SPI_CS5463_DC_SendByte
   \   00000024   0x4607             MOV      R7,R0
    539          	Data2 = SPI_CS5463_DC_SendByte(0xFE);
   \   00000026   0x20FE             MOVS     R0,#+254
   \   00000028   0x.... 0x....      BL       SPI_CS5463_DC_SendByte
   \   0000002C   0x4604             MOV      R4,R0
    540          	Data = ((Data0>>6)&0x03)+(float)(Data0&0x3F)/64 + (float)Data1/64/256 + (float)Data2/64/256/256;
    541          	SPI_CS5463_DC_CS_HIGH();
   \   0000002E   0x2001             MOVS     R0,#+1
   \   00000030   0x6028             STR      R0,[R5, #+0]
    542          	Delay(5);
   \   00000032   0x2005             MOVS     R0,#+5
   \   00000034   0x.... 0x....      BL       Delay
    543          	return Data;
   \   00000038   0x4630             MOV      R0,R6
   \   0000003A   0x0980             LSRS     R0,R0,#+6
   \   0000003C   0x.... 0x....      BL       __aeabi_ui2f
   \   00000040   0x4605             MOV      R5,R0
   \   00000042   0xF006 0x003F      AND      R0,R6,#0x3F
   \   00000046   0x.... 0x....      BL       __aeabi_i2f
   \   0000004A   0xF04F 0x5172      MOV      R1,#+1015021568
   \   0000004E   0x.... 0x....      BL       __aeabi_fmul
   \   00000052   0x4629             MOV      R1,R5
   \   00000054   0x.... 0x....      BL       __aeabi_fadd
   \   00000058   0x4605             MOV      R5,R0
   \   0000005A   0x4638             MOV      R0,R7
   \   0000005C   0x.... 0x....      BL       __aeabi_ui2f
   \   00000060   0xF04F 0x5162      MOV      R1,#+947912704
   \   00000064   0x.... 0x....      BL       __aeabi_fmul
   \   00000068   0x4629             MOV      R1,R5
   \   0000006A   0x.... 0x....      BL       __aeabi_fadd
   \   0000006E   0x4605             MOV      R5,R0
   \   00000070   0x4620             MOV      R0,R4
   \   00000072   0x.... 0x....      BL       __aeabi_ui2f
   \   00000076   0xF04F 0x5152      MOV      R1,#+880803840
   \   0000007A   0x.... 0x....      BL       __aeabi_fmul
   \   0000007E   0x4629             MOV      R1,R5
   \   00000080   0xE8BD 0x40F4      POP      {R2,R4-R7,LR}
   \   00000084   0x.... 0x....      B.W      __aeabi_fadd
    544          }
    545          
    546          /**-----------------------------------------------------------------
    547            * @函数名 SPI_CS5463_DC_Read_Else_FLOAT
    548            * @功能   读取CS5463的电压电流DC偏移，得到1个浮点型数据
    549            * @参数   Command：单字节命令
    550            * @返回   Data，浮点型数据
    551            * @备注   返回的的字节为2^-1到2^-23，再加上最高位负值-2^0
    552          ***----------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    553          float SPI_CS5463_DC_Read_Else_FLOAT(uint8_t Command)
    554          {
   \                     SPI_CS5463_DC_Read_Else_FLOAT: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
    555          	float Data = 0;
    556          	uint8_t Data0 = 0,Data1 = 0,Data2 = 0;
    557            /* Select the CS5463: Chip Select low */
    558            	SPI_CS5463_DC_CS_LOW();
   \   00000004   0x....             LDR.N    R5,??DataTable16_2  ;; 0x42210190
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x6028             STR      R0,[R5, #+0]
    559          	Delay(1);
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0x.... 0x....      BL       Delay
    560            /* Send  instruction */
    561            	SPI_CS5463_DC_SendByte(Command);
   \   00000010   0x4620             MOV      R0,R4
   \   00000012   0x.... 0x....      BL       SPI_CS5463_DC_SendByte
    562          	
    563          	Data0 = SPI_CS5463_DC_SendByte(0xFE);
   \   00000016   0x20FE             MOVS     R0,#+254
   \   00000018   0x.... 0x....      BL       SPI_CS5463_DC_SendByte
   \   0000001C   0x4606             MOV      R6,R0
    564          	Data1 = SPI_CS5463_DC_SendByte(0xFE);
   \   0000001E   0x20FE             MOVS     R0,#+254
   \   00000020   0x.... 0x....      BL       SPI_CS5463_DC_SendByte
   \   00000024   0x4607             MOV      R7,R0
    565          	Data2 = SPI_CS5463_DC_SendByte(0xFE);
   \   00000026   0x20FE             MOVS     R0,#+254
   \   00000028   0x.... 0x....      BL       SPI_CS5463_DC_SendByte
   \   0000002C   0x4604             MOV      R4,R0
    566          	Data = (float)((Data0>>7)&0x01)*(-1)+(float)(Data0&0x7F)/128 + (float)Data1/32768 + (float)Data2/256/32768;
    567          	SPI_CS5463_DC_CS_HIGH();
   \   0000002E   0x2001             MOVS     R0,#+1
   \   00000030   0x6028             STR      R0,[R5, #+0]
    568          	Delay(5);
   \   00000032   0x2005             MOVS     R0,#+5
   \   00000034   0x.... 0x....      BL       Delay
    569          	return Data;
   \   00000038   0x4630             MOV      R0,R6
   \   0000003A   0x09C0             LSRS     R0,R0,#+7
   \   0000003C   0x.... 0x....      BL       __aeabi_ui2f
   \   00000040   0x....             LDR.N    R1,??DataTable16_12  ;; 0xbf800000
   \   00000042   0x.... 0x....      BL       __aeabi_fmul
   \   00000046   0x4605             MOV      R5,R0
   \   00000048   0xF006 0x007F      AND      R0,R6,#0x7F
   \   0000004C   0x.... 0x....      BL       __aeabi_i2f
   \   00000050   0xF04F 0x5170      MOV      R1,#+1006632960
   \   00000054   0x.... 0x....      BL       __aeabi_fmul
   \   00000058   0x4629             MOV      R1,R5
   \   0000005A   0x.... 0x....      BL       __aeabi_fadd
   \   0000005E   0x4605             MOV      R5,R0
   \   00000060   0x4638             MOV      R0,R7
   \   00000062   0x.... 0x....      BL       __aeabi_ui2f
   \   00000066   0xF04F 0x5160      MOV      R1,#+939524096
   \   0000006A   0x.... 0x....      BL       __aeabi_fmul
   \   0000006E   0x4629             MOV      R1,R5
   \   00000070   0x.... 0x....      BL       __aeabi_fadd
   \   00000074   0x4605             MOV      R5,R0
   \   00000076   0x4620             MOV      R0,R4
   \   00000078   0x.... 0x....      BL       __aeabi_ui2f
   \   0000007C   0xF04F 0x5150      MOV      R1,#+872415232
   \   00000080   0x.... 0x....      BL       __aeabi_fmul
   \   00000084   0x4629             MOV      R1,R5
   \   00000086   0xE8BD 0x40F4      POP      {R2,R4-R7,LR}
   \   0000008A   0x.... 0x....      B.W      __aeabi_fadd
    570          }
    571          
    572          /**-----------------------------------------------------------------
    573            * @函数名 SPI_CS5463_DC_ClearDrdy
    574            * @功能   CS5463进入清除数据就绪状态位
    575            * @参数   无
    576            * @返回值 无
    577          ***----------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    578          void SPI_CS5463_DC_ClearDrdy(void)
    579          {
    580          	SPI_CS5463_DC_WriteRegister(STATUS , 0xFFFFFF);
   \                     SPI_CS5463_DC_ClearDrdy: (+1)
   \   00000000   0xF06F 0x417F      MVN      R1,#-16777216
   \   00000004   0x201E             MOVS     R0,#+30
   \   00000006   0x....             B.N      SPI_CS5463_DC_WriteRegister
    581          }
    582          
    583          /**-----------------------------------------------------------------
    584            * @函数名 SPI_CS5463_AC_WaitDrdy
    585            * @功能   CS5463等待数据就绪状态位
    586            * @参数   无
    587            * @返回值 无
    588          ***----------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    589          void SPI_CS5463_DC_WaitDrdy(void)
    590          {
    591          	while (SPI_CS5463_DC_ReadRegister_INT32(STATUS) & 0x800000 == 0); 	
   \                     SPI_CS5463_DC_WaitDrdy: (+1)
   \   00000000   0x201E             MOVS     R0,#+30
   \   00000002   0x....             B.N      SPI_CS5463_DC_ReadRegister_INT32
    592          }
    593          
    594          
    595          /**-----------------------------------------------------------------
    596            * @函数名 SPI_SPI_CS5463_DC_SLEEP
    597            * @功能   CS5463进入睡眠模式
    598            * @参数   无
    599            * @返回值 无
    600          ***----------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    601          void SPI_CS5463_DC_SLEEP(void)   
    602          { 
   \                     SPI_CS5463_DC_SLEEP: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    603          	/* Select the CS5463: Chip Select low */
    604          	SPI_CS5463_DC_CS_LOW();
   \   00000002   0x....             LDR.N    R4,??DataTable16_2  ;; 0x42210190
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x6020             STR      R0,[R4, #+0]
    605          	//  Delay(10);
    606          	/* Send "WAIT" instruction */
    607          	SPI_CS5463_DC_SendByte(SLEEP);
   \   00000008   0x2010             MOVS     R0,#+16
   \   0000000A   0x.... 0x....      BL       SPI_CS5463_DC_SendByte
    608          	
    609          	/* Deselect the CS5463: Chip Select high */
    610          	SPI_CS5463_DC_CS_HIGH();
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0x6020             STR      R0,[R4, #+0]
    611          	//  Delay(10);
    612          }   
   \   00000012   0xBD10             POP      {R4,PC}          ;; return
    613          
    614          /**-----------------------------------------------------------------
    615            * @函数名 SPI_SPI_CS5463_DC_Wait
    616            * @功能   CS5463进入等待模式
    617            * @参数   无
    618            * @返回值 无
    619          ***----------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    620          void SPI_CS5463_DC_WAIT(void)   
    621          { 
   \                     SPI_CS5463_DC_WAIT: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    622          	/* Select the CS5463: Chip Select low */
    623          	SPI_CS5463_DC_CS_LOW();
   \   00000002   0x....             LDR.N    R4,??DataTable16_2  ;; 0x42210190
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x6020             STR      R0,[R4, #+0]
    624          	Delay(5);
   \   00000008   0x2005             MOVS     R0,#+5
   \   0000000A   0x.... 0x....      BL       Delay
    625          	/* Send "WAIT" instruction */
    626          	SPI_CS5463_DC_SendByte(WAIT);
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0x.... 0x....      BL       SPI_CS5463_DC_SendByte
    627          	
    628          	/* Deselect the CS5463: Chip Select high */
    629          	SPI_CS5463_DC_CS_HIGH();
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x6020             STR      R0,[R4, #+0]
    630          	Delay(5);
   \   00000018   0x2005             MOVS     R0,#+5
   \   0000001A   0xE8BD 0x4010      POP      {R4,LR}
   \   0000001E   0x.... 0x....      B.W      Delay
    631          }   
    632          
    633          /**-----------------------------------------------------------------
    634            * @函数名 SPI_CS5463_DC_SOFT_RESET
    635            * @功能   软件复位CS5463
    636            * @参数   无
    637            * @返回值 无
    638          ***----------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    639          void SPI_CS5463_DC_SOFT_RESET(void)   
    640          {
   \                     SPI_CS5463_DC_SOFT_RESET: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    641            /* Select the CS5463: Chip Select low */
    642            SPI_CS5463_DC_CS_LOW();
   \   00000002   0x....             LDR.N    R4,??DataTable16_2  ;; 0x42210190
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x6020             STR      R0,[R4, #+0]
    643            Delay(100);
   \   00000008   0x2064             MOVS     R0,#+100
   \   0000000A   0x.... 0x....      BL       Delay
    644            /* Send "SOFT_RESET" instruction */
    645            SPI_CS5463_DC_SendByte(SOFT_RESET);
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x.... 0x....      BL       SPI_CS5463_DC_SendByte
    646          
    647            /* Deselect the CS5463: Chip Select high */
    648            SPI_CS5463_DC_CS_HIGH();
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x6020             STR      R0,[R4, #+0]
    649            Delay(100);
   \   00000018   0x2064             MOVS     R0,#+100
   \   0000001A   0xE8BD 0x4010      POP      {R4,LR}
   \   0000001E   0x.... 0x....      B.W      Delay
    650          }   

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   0x40010800         DC32     0x40010800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_1:
   \   00000000   0x40010C00         DC32     0x40010c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_2:
   \   00000000   0x42210190         DC32     0x42210190

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_3:
   \   00000000   0x40013000         DC32     0x40013000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_4:
   \   00000000   0x00488C31         DC32     0x488c31

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_5:
   \   00000000   0x00682E94         DC32     0x682e94

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_6:
   \   00000000   0x00FE396B         DC32     0xfe396b

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_7:
   \   00000000   0x00072C2E         DC32     0x72c2e

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_8:
   \   00000000   0x00FFFC8A         DC32     0xfffc8a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_9:
   \   00000000   0x00FFF800         DC32     0xfff800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_10:
   \   00000000   0x02FAF080         DC32     0x2faf080

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_11:
   \   00000000   0x........         DC32     configsfr_DC

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_12:
   \   00000000   0xBF800000         DC32     0xbf800000

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x0D 0x0A          DC8 "\015\012 \275\273\301\367\265\347\301\367\324\366\322\346 = %x\012"
   \              0x20 0xBD    
   \              0xBB 0xC1    
   \              0xF7 0xB5    
   \              0xE7 0xC1    
   \              0xF7 0xD4    
   \              0xF6 0xD2    
   \              0xE6 0x20    
   \              0x3D 0x20    
   \              0x25 0x78    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x0D 0x0A          DC8 "\015\012 \275\273\301\367\265\347\301\367\323\320\320\247\326\265 = %f\012"
   \              0x20 0xBD    
   \              0xBB 0xC1    
   \              0xF7 0xB5    
   \              0xE7 0xC1    
   \              0xF7 0xD3    
   \              0xD0 0xD0    
   \              0xA7 0xD6    
   \              0xB5 0x20    
   \              0x3D 0x20    
   \              0x25 0x66    
   \              0x0A 0x00    
    651          
    652          /******************* (C) COPYRIGHT 2010 www.armjishu.com *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   CS5463_DC_Adjust
         0   -> CS5463_DC_INIT
        16   -> SPI_CS5463_DC_ClearDrdy
        16   -> SPI_CS5463_DC_ReadRegister_INT32
        16   -> SPI_CS5463_DC_Read_VIrms_FLOAT
        16   -> SPI_CS5463_DC_SendByte
        16   -> SPI_CS5463_DC_SendCommand
        16   -> SPI_CS5463_DC_WaitDrdy
        16   -> SPI_CS5463_DC_WriteRegister
        16   -> __aeabi_f2d
        16   -> printf
       8   CS5463_DC_INIT
         0   -> Delay
         8   -> Delay
         8   -> GPIO_ResetBits
         8   -> GPIO_SetBits
         8   -> SPI_CS5463_DC_ReadRegister_INT32
         8   -> SPI_CS5463_DC_SendByte
         8   -> SPI_CS5463_DC_WriteRegister
       0   SPI_CS5463_DC_ClearDrdy
         0   -> SPI_CS5463_DC_WriteRegister
      24   SPI_CS5463_DC_Read
         0   -> Delay
        24   -> Delay
        24   -> SPI_CS5463_DC_SendByte
       0   SPI_CS5463_DC_ReadByte
         0   -> SPI_CS5463_DC_SendByte
      24   SPI_CS5463_DC_ReadRegister_INT32
        24   -> Delay
        24   -> SPI_CS5463_DC_SendByte
      24   SPI_CS5463_DC_Read_Else_FLOAT
        24   -> Delay
        24   -> SPI_CS5463_DC_SendByte
         0   -> __aeabi_fadd
        24   -> __aeabi_fadd
        24   -> __aeabi_fmul
        24   -> __aeabi_i2f
        24   -> __aeabi_ui2f
      24   SPI_CS5463_DC_Read_Temp_FLOAT
        24   -> Delay
        24   -> SPI_CS5463_DC_SendByte
         0   -> __aeabi_fadd
        24   -> __aeabi_fadd
        24   -> __aeabi_fmul
        24   -> __aeabi_i2f
        24   -> __aeabi_ui2f
      24   SPI_CS5463_DC_Read_VIgain_FLOAT
        24   -> Delay
        24   -> SPI_CS5463_DC_SendByte
         0   -> __aeabi_fadd
        24   -> __aeabi_fadd
        24   -> __aeabi_fmul
        24   -> __aeabi_i2f
        24   -> __aeabi_ui2f
      24   SPI_CS5463_DC_Read_VIrms_FLOAT
        24   -> Delay
        24   -> SPI_CS5463_DC_SendByte
         0   -> __aeabi_fadd
        24   -> __aeabi_fadd
        24   -> __aeabi_fmul
        24   -> __aeabi_ui2f
       8   SPI_CS5463_DC_SLEEP
         8   -> SPI_CS5463_DC_SendByte
       8   SPI_CS5463_DC_SOFT_RESET
         0   -> Delay
         8   -> Delay
         8   -> SPI_CS5463_DC_SendByte
      16   SPI_CS5463_DC_SendByte
        16   -> SPI_I2S_GetFlagStatus
        16   -> SPI_I2S_ReceiveData
        16   -> SPI_I2S_SendData
      16   SPI_CS5463_DC_SendCommand
         0   -> Delay
        16   -> Delay
        16   -> SPI_CS5463_DC_SendByte
       8   SPI_CS5463_DC_WAIT
         0   -> Delay
         8   -> Delay
         8   -> SPI_CS5463_DC_SendByte
       0   SPI_CS5463_DC_WaitDrdy
         0   -> SPI_CS5463_DC_ReadRegister_INT32
      24   SPI_CS5463_DC_Write
         0   -> Delay
        24   -> Delay
        24   -> SPI_CS5463_DC_SendByte
       8   SPI_CS5463_DC_WriteRegister
         8   -> SPI_CS5463_DC_Write
      32   SPI_DC_INIT
        32   -> GPIO_Init
        32   -> RCC_APB1PeriphClockCmd
        32   -> RCC_APB2PeriphClockCmd
        32   -> SPI_Cmd
        32   -> SPI_Init


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable16
       4  ??DataTable16_1
       4  ??DataTable16_10
       4  ??DataTable16_11
       4  ??DataTable16_12
       4  ??DataTable16_2
       4  ??DataTable16_3
       4  ??DataTable16_4
       4  ??DataTable16_5
       4  ??DataTable16_6
       4  ??DataTable16_7
       4  ??DataTable16_8
       4  ??DataTable16_9
      24  ?_0
      24  ?_1
     154  CS5463_DC_Adjust
     272  CS5463_DC_INIT
       8  SPI_CS5463_DC_ClearDrdy
      74  SPI_CS5463_DC_Read
       4  SPI_CS5463_DC_ReadByte
      66  SPI_CS5463_DC_ReadRegister_INT32
     142  SPI_CS5463_DC_Read_Else_FLOAT
     118  SPI_CS5463_DC_Read_Temp_FLOAT
     136  SPI_CS5463_DC_Read_VIgain_FLOAT
     118  SPI_CS5463_DC_Read_VIrms_FLOAT
      20  SPI_CS5463_DC_SLEEP
      34  SPI_CS5463_DC_SOFT_RESET
      54  SPI_CS5463_DC_SendByte
      36  SPI_CS5463_DC_SendCommand
      34  SPI_CS5463_DC_WAIT
       4  SPI_CS5463_DC_WaitDrdy
      62  SPI_CS5463_DC_Write
      32  SPI_CS5463_DC_WriteRegister
     268  SPI_DC_INIT
     160  configsfr_DC

 
   160 bytes in section .bss
 1 736 bytes in section .text
 
 1 736 bytes of CODE memory
   160 bytes of DATA memory

Errors: none
Warnings: none

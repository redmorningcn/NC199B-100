###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       26/Dec/2017  15:40:23
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\iar\NC199B-100\Library\Source\Micrium\uC-MB\OS\uCOS-III\MB_OS.C
#    Command line =  
#        F:\iar\NC199B-100\Library\Source\Micrium\uC-MB\OS\uCOS-III\MB_OS.C -D
#        USE_STDPERIPH_DRIVER -D _STM32F10X_HD -D STM32F10X_CL -D DEBUG -D
#        STM32F103RC -D STM32_FLASH_SIZE=256 -D HSE_VALUE=25000000 -lCN
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\List\
#        -o
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        F:\iar\NC199B-100\Library\Project\IAR\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\User\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\AES\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Config\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\OS\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\User\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Source\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Port\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\OS\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Config\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Protocol\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Iap\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Driver\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\IAR\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\uCOS-III\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\CMSIS\CM3\CoreSupport\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\CMSIS\CM3\DeviceSupport\ST\STM32F10x\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\STM32F10x_StdPeriph_Driver\inc\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-CPU\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-CPU\ARM-Cortex-M3\IAR\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-LIB\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\OSAL\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\OSAL\OS\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\OS\uCOS-III\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\Source\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\Source\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\FatFs\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\FatFs\option\ -Om
#        --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\List\MB_OS.lst
#    Object file  =  
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\Obj\MB_OS.o
#
###############################################################################

F:\iar\NC199B-100\Library\Source\Micrium\uC-MB\OS\uCOS-III\MB_OS.C
      1          /*
      2          *********************************************************************************************************
      3          *                                               uC/MODBUS
      4          *                                         Embedded Modbus Stack
      5          *
      6          *                          (c) Copyright 2004-2009; Micrium, Inc.; Weston, FL
      7          *
      8          *               All rights reserved.  Protected by international copyright laws.
      9          *
     10          *               uC/Modbus is provided in source form for FREE evaluation, for educational
     11          *               use or peaceful research.  If you plan on using uC/Modbus in a commercial
     12          *               product you need to contact Micrium to properly license its use in your
     13          *               product.  We provide ALL the source code for your convenience and to
     14          *               help you experience uC/Modbus.  The fact that the source code is provided
     15          *               does NOT mean that you can use it without paying a licensing fee.
     16          *
     17          *               Knowledge of the source code may NOT be used to develop a similar product.
     18          *
     19          *               Please help us continue to provide the Embedded community with the finest
     20          *               software available.  Your honesty is greatly appreciated.
     21          *********************************************************************************************************
     22          */
     23          
     24          /*
     25          *********************************************************************************************************
     26          *
     27          *                                     MODBUS uC/OS-II LAYER INTERFACE
     28          *
     29          * Filename      : mb_os.c
     30          * Version       : V2.12
     31          * Programmer(s) : JJL
     32          *********************************************************************************************************
     33          * Note(s)       :
     34          *********************************************************************************************************
     35          */
     36          
     37          /*
     38          *********************************************************************************************************
     39          *                                             INCLUDE FILES
     40          *********************************************************************************************************
     41          */
     42          
     43          #include <mb_os.h>
     44          #include <app_cfg.h>
     45          #include <os_cfg_app.h>
     46          #if OS_VERSION > 30000U
     47          #include <bsp_os.h>
     48          #endif
     49          
     50          /*
     51          *********************************************************************************************************
     52          *                                               CONSTANTS
     53          *********************************************************************************************************
     54          */
     55          
     56          /*$PAGE*/
     57          /*
     58          *********************************************************************************************************
     59          *                                            LOCAL ERRORS
     60          *********************************************************************************************************
     61          */
     62          
     63          
     64          /*
     65          *********************************************************************************************************
     66          *                                        LOCAL GLOBAL VARIABLES
     67          *********************************************************************************************************
     68          */
     69          
     70          #if (MODBUS_CFG_SLAVE_EN  == DEF_ENABLED)

   \                                 In section .bss, align 4
     71          static  CPU_STK             MB_OS_RxTaskStk[MB_OS_CFG_RX_TASK_STK_SIZE];
   \                     MB_OS_RxTaskStk:
   \   00000000                      DS8 2048
   \   00000800                      DS8 184
   \   000008B8                      DS8 36
     72          #if OS_VERSION > 30000u
     73          static  OS_TCB              MB_OS_RxTaskTCB;
     74          static  OS_Q                MB_OS_RxQ;
     75          //static  void               *MB_OS_RxQTbl[MODBUS_CFG_MAX_CH];
     76          #else
     77          static  OS_Q               *MB_OS_RxQ;
     78          static  void               *MB_OS_RxQTbl[MODBUS_CFG_MAX_CH];
     79          #endif
     80          #endif
     81          
     82          /*
     83          *********************************************************************************************************
     84          *                                              PROTOTYPES
     85          *********************************************************************************************************
     86          */
     87          
     88          #if (MODBUS_CFG_MASTER_EN == DEF_ENABLED)
     89          static  void                 MB_OS_InitMaster  (void);
     90          static  void                 MB_OS_ExitMaster  (void);
     91          #endif
     92          
     93          #if (MODBUS_CFG_SLAVE_EN == DEF_ENABLED)
     94          static  void                 MB_OS_InitSlave   (void);
     95          static  void                 MB_OS_ExitSlave   (void);
     96          static  void                 MB_OS_RxTask      (void *p_arg);
     97          #endif
     98          
     99          
    100          /*$PAGE*/
    101          /*
    102          *********************************************************************************************************
    103          *                                              MB_OS_Init()
    104          *
    105          * Description : This function initializes the RTOS interface.  This function creates the following:
    106          *
    107          *               1) A message queue to signal the reception of a packet.
    108          *
    109          *               2) A task that waits for packets to be received.
    110          *
    111          * Argument(s) : none
    112          *
    113          * Return(s)   : none.
    114          *
    115          * Caller(s)   : MB_Init()
    116          *
    117          * Note(s)     : none.
    118          *********************************************************************************************************
    119          */
    120          

   \                                 In section .text, align 2, keep-with-next
    121          void  MB_OS_Init (void)
    122          {
   \                     MB_OS_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    123          #if (MODBUS_CFG_MASTER_EN == DEF_ENABLED)
    124              MB_OS_InitMaster();
   \   00000002   0x.... 0x....      BL       MB_OS_InitMaster
    125          #endif
    126          
    127          #if (MODBUS_CFG_SLAVE_EN == DEF_ENABLED)
    128              MB_OS_InitSlave();
   \   00000006   0xE8BD 0x4001      POP      {R0,LR}
   \   0000000A   0x....             B.N      MB_OS_InitSlave
    129          #endif
    130          }
    131          
    132          /*$PAGE*/
    133          /*
    134          *********************************************************************************************************
    135          *                                          MB_OS_InitMaster()
    136          *
    137          * Description : This function initializes and creates the kernel objectes needed for Modbus Master
    138          *
    139          * Argument(s) : none
    140          *
    141          * Return(s)   : none.
    142          *
    143          * Caller(s)   : MB_OS_Init()
    144          *
    145          * Note(s)     : none.
    146          *********************************************************************************************************
    147          */
    148          
    149          #if (MODBUS_CFG_MASTER_EN == DEF_ENABLED)

   \                                 In section .text, align 2, keep-with-next
    150          static  void  MB_OS_InitMaster (void)
    151          {
   \                     MB_OS_InitMaster: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    152          #if OS_VERSION > 30000U
    153          #else
    154              OS_EVENT    *pevent;
    155          #endif
    156              CPU_INT08U   i;
    157          #if (OS_VERSION         < 287)
    158          #if (OS_EVENT_NAME_EN > 0) && (OS_EVENT_NAME_SIZE >  16)
    159              CPU_INT08U   err;
    160          #endif
    161          #endif
    162          
    163              for (i = 0; i < MODBUS_CFG_MAX_CH; i++) {                             /* Create a semaphore for each channel   */
   \   00000002   0x2400             MOVS     R4,#+0
   \   00000004   0xE011             B.N      ??MB_OS_InitMaster_0
    164          #if OS_VERSION > 30000U
    165                  BSP_OS_SemCreate(&MB_OS_RxSemTbl[i], 0, "uC/Modbus Rx Sem");
   \                     ??MB_OS_InitMaster_1: (+1)
   \   00000006   0xEBC4 0x00C4      RSB      R0,R4,R4, LSL #+3
   \   0000000A   0x0085             LSLS     R5,R0,#+2
   \   0000000C   0x.... 0x....      ADR.W    R2,?_0
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x....             LDR.N    R0,??DataTable9_1
   \   00000014   0x1828             ADDS     R0,R5,R0
   \   00000016   0x.... 0x....      BL       BSP_OS_SemCreate
    166          #else
    167                  pevent = OSSemCreate(0);
    168                  if (pevent != (OS_EVENT *)0) {                                    /* Assign a name to the semaphore        */
    169          #endif
    170          #if (OS_VERSION         < 287)
    171          #if (OS_EVENT_NAME_EN > 0) && (OS_EVENT_NAME_SIZE >  16)
    172                      OSEventNameSet((OS_EVENT *)pevent,
    173                                     (INT8U    *)"uC/Modbus Rx Sem",
    174                                     (INT8U    *)&err);
    175                      (void)&err;
    176          #endif
    177                      MB_OS_RxSemTbl[i] = pevent;
    178                  }
    179          #endif
    180          #if OS_VERSION > 30000U
    181                  BSP_OS_SemCreate(&MB_OS_TxSemTbl[i], 1, "uC/Modbus Tx Sem");
   \   0000001A   0x.... 0x....      ADR.W    R2,?_1
   \   0000001E   0x2101             MOVS     R1,#+1
   \   00000020   0x....             LDR.N    R0,??DataTable9_2
   \   00000022   0x1828             ADDS     R0,R5,R0
   \   00000024   0x.... 0x....      BL       BSP_OS_SemCreate
    182          
    183          #else
    184                  pevent = OSSemCreate(1);
    185                  if (pevent != (OS_EVENT *)0) {                                    /* Assign a name to the semaphore        */
    186          #endif
    187          #if (OS_VERSION         < 287)
    188          #if (OS_EVENT_NAME_EN > 0) && (OS_EVENT_NAME_SIZE >  16)
    189                      OSEventNameSet((OS_EVENT *)pevent,
    190                                     (INT8U    *)"uC/Modbus Tx Sem",
    191                                     (INT8U    *)&err);
    192                      (void)&err;
    193          #endif
    194                      MB_OS_TxSemTbl[i] = pevent;
    195                  }
    196          #endif
    197              }
   \   00000028   0x1C64             ADDS     R4,R4,#+1
   \                     ??MB_OS_InitMaster_0: (+1)
   \   0000002A   0x2C04             CMP      R4,#+4
   \   0000002C   0xDBEB             BLT.N    ??MB_OS_InitMaster_1
    198          }
   \   0000002E   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    199          #endif
    200          
    201          /*$PAGE*/
    202          /*
    203          *********************************************************************************************************
    204          *                                          MB_OS_InitSlave()
    205          *
    206          * Description : This function initializes and creates the kernel objectes needed for Modbus Salve
    207          *
    208          * Argument(s) : none
    209          *
    210          * Return(s)   : none.
    211          *
    212          * Caller(s)   : MB_OS_Init()
    213          *
    214          * Note(s)     : none.
    215          *********************************************************************************************************
    216          */
    217          
    218          #if (MODBUS_CFG_SLAVE_EN == DEF_ENABLED)

   \                                 In section .text, align 2, keep-with-next
    219          static  void  MB_OS_InitSlave (void)
    220          {
   \                     MB_OS_InitSlave: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB08A             SUB      SP,SP,#+40
    221          #if OS_VERSION > 30000u
    222              OS_ERR      err;
    223              OSQCreate ( (OS_Q        *)&MB_OS_RxQ,
    224                          (CPU_CHAR    *)"RxQ",
    225                          (OS_MSG_QTY   )OS_CFG_INT_Q_SIZE,
    226                          (OS_ERR      *)&err);
   \   00000004   0x....             LDR.N    R4,??DataTable9_3
   \   00000006   0xAB09             ADD      R3,SP,#+36
   \   00000008   0x2264             MOVS     R2,#+100
   \   0000000A   0x....             ADR.N    R1,??DataTable9  ;; "RxQ"
   \   0000000C   0xF604 0x00B8      ADDW     R0,R4,#+2232
   \   00000010   0x.... 0x....      BL       OSQCreate
    227          #else
    228              CPU_INT08U  err;
    229              MB_OS_RxQ = OSQCreate(&MB_OS_RxQTbl[0],                              /* Create Rx Task message queue           */
    230                                    MODBUS_CFG_MAX_CH);
    231          #endif
    232          
    233          #if (OS_VERSION         < 287)
    234          #if (OS_EVENT_NAME_EN   > 0) && (OS_EVENT_NAME_SIZE >  14)
    235              if (MB_OS_RxQ != (OS_EVENT *)0) {                                    /* Assign a name to the message queue     */
    236                  OSEventNameSet((OS_EVENT *)MB_OS_RxQ,
    237                                 (INT8U    *)"uC/Modbus Rx Q",
    238                                 (INT8U    *)&err);
    239                 (void)&err;
    240              }
    241          #endif
    242          #endif
    243          #if OS_VERSION         > 30000u
    244              (void)OSTaskCreate((OS_TCB     *)&MB_OS_RxTaskTCB,                /* Create the start task                                */
    245                                 (CPU_CHAR   *)"App Task Start",
    246                                 (OS_TASK_PTR ) MB_OS_RxTask,
    247                                 (void       *) 0,
    248                                 (OS_PRIO     ) MB_OS_CFG_RX_TASK_PRIO,
    249                                 (CPU_STK    *)&MB_OS_RxTaskStk[0],
    250                                 (CPU_STK_SIZE) MB_OS_CFG_RX_TASK_STK_SIZE / 10,
    251                                 (CPU_STK_SIZE) MB_OS_CFG_RX_TASK_STK_SIZE,
    252                                 (OS_MSG_QTY  ) 0u,
    253                                 (OS_TICK     ) 0u,
    254                                 (void       *) 0,
    255                                 (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
    256                                 (OS_ERR     *)&err);
   \   00000014   0xA809             ADD      R0,SP,#+36
   \   00000016   0x9008             STR      R0,[SP, #+32]
   \   00000018   0x2003             MOVS     R0,#+3
   \   0000001A   0x9007             STR      R0,[SP, #+28]
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x9006             STR      R0,[SP, #+24]
   \   00000020   0x9005             STR      R0,[SP, #+20]
   \   00000022   0x9004             STR      R0,[SP, #+16]
   \   00000024   0xF44F 0x7000      MOV      R0,#+512
   \   00000028   0x9003             STR      R0,[SP, #+12]
   \   0000002A   0x2033             MOVS     R0,#+51
   \   0000002C   0x9002             STR      R0,[SP, #+8]
   \   0000002E   0x9401             STR      R4,[SP, #+4]
   \   00000030   0x2013             MOVS     R0,#+19
   \   00000032   0x9000             STR      R0,[SP, #+0]
   \   00000034   0x2300             MOVS     R3,#+0
   \   00000036   0x.... 0x....      ADR.W    R2,MB_OS_RxTask
   \   0000003A   0x.... 0x....      ADR.W    R1,?_3
   \   0000003E   0xF504 0x6000      ADD      R0,R4,#+2048
   \   00000042   0x.... 0x....      BL       OSTaskCreate
    257          #else
    258          #if (OS_TASK_CREATE_EXT_EN > 0)
    259              #if (OS_STK_GROWTH == 1)
    260              (void)OSTaskCreateExt((void (*)(void *)) MB_OS_RxTask,
    261                                    (void           *) 0,
    262                                    (OS_STK         *)&MB_OS_RxTaskStk[MB_OS_CFG_RX_TASK_STK_SIZE - 1],
    263                                    (INT8U           ) MB_OS_CFG_RX_TASK_PRIO,
    264                                    (INT16U          ) MB_OS_CFG_RX_TASK_ID,
    265                                    (OS_STK         *)&MB_OS_RxTaskStk[0],
    266                                    (INT32U          ) MB_OS_CFG_RX_TASK_STK_SIZE,
    267                                    (void           *) 0,
    268                                    (INT16U          )(OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));
    269              #else
    270              (void)OSTaskCreateExt((void (*)(void *)) MB_OS_RxTask,
    271                                    (void           *) 0,
    272                                    (OS_STK         *)&MB_OS_RxTaskStk[0],
    273                                    (INT8U           ) MB_OS_CFG_RX_TASK_PRIO,
    274                                    (INT16U          ) MB_OS_CFG_RX_TASK_ID,
    275                                    (OS_STK         *)&MB_OS_RxTaskStk[MB_OS_CFG_RX_TASK_STK_SIZE - 1],
    276                                    (INT32U          ) MB_OS_CFG_RX_TASK_STK_SIZE,
    277                                    (void           *) 0,
    278                                    (INT16U          )(OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));
    279              #endif
    280          #else
    281              #if OS_STK_GROWTH == 1
    282              (void)OSTaskCreate((void (*)(void *)) MB_OS_RxTask,
    283                                 (void           *) 0,
    284                                 (OS_STK         *)&MB_OS_RxTaskStk[MB_OS_CFG_RX_TASK_STK_SIZE - 1],
    285                                 (INT8U           ) MB_OS_CFG_RX_TASK_PRIO);
    286              #else
    287              (void)OSTaskCreate((void (*)(void *)) MB_OS_RxTask,
    288                                 (void           *) 0,
    289                                 (OS_STK         *)&MB_OS_RxTaskStk[0],
    290                                 (INT8U           ) MB_OS_CFG_RX_TASK_PRIO);
    291              #endif
    292          #endif
    293          #endif
    294          
    295          #if (OS_VERSION         < 287)
    296          #if (OS_EVENT_NAME_SIZE >  12)
    297          
    298              OSTaskNameSet((INT8U  )MB_OS_CFG_RX_TASK_PRIO,                       /* Assign a name to the event flag group  */
    299                            (INT8U *)"uC/Modbus Rx",
    300                            (INT8U *)&err);
    301          #endif
    302          #else
    303          #if (OS_EVENT_NAME_EN   > 0)
    304              OSTaskNameSet((INT8U  )MB_OS_CFG_RX_TASK_PRIO,
    305                            (INT8U *)"uC/Modbus Rx",
    306                            (INT8U *)&err);
    307          
    308          #endif
    309          #endif
    310          
    311          
    312          }
   \   00000046   0xB00A             ADD      SP,SP,#+40
   \   00000048   0xBD10             POP      {R4,PC}          ;; return
    313          #endif
    314          
    315          /*
    316          *********************************************************************************************************
    317          *                                             MB_OS_Exit()
    318          *
    319          * Description : This function is called to terminate the RTOS interface for Modbus channels.  We delete
    320          *               the following uC/OS-II objects:
    321          *
    322          *               1) An event flag group to signal the reception of a packet.
    323          *               2) A task that waits for packets to be received.
    324          *
    325          * Argument(s) : none
    326          *
    327          * Return(s)   : none.
    328          *
    329          * Caller(s)   : MB_Exit()
    330          *
    331          * Note(s)     : none.
    332          *********************************************************************************************************
    333          */
    334          

   \                                 In section .text, align 2, keep-with-next
    335          void  MB_OS_Exit (void)
    336          {
   \                     MB_OS_Exit: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    337          #if (MODBUS_CFG_MASTER_EN == DEF_ENABLED)
    338              MB_OS_ExitMaster();
   \   00000002   0x.... 0x....      BL       MB_OS_ExitMaster
    339          #endif
    340          
    341          #if (MODBUS_CFG_SLAVE_EN == DEF_ENABLED)
    342              MB_OS_ExitSlave();
   \   00000006   0xE8BD 0x4001      POP      {R0,LR}
   \   0000000A   0x....             B.N      MB_OS_ExitSlave
    343          #endif
    344          }
    345          
    346          /*
    347          *********************************************************************************************************
    348          *                                          MB_OS_ExitMaster()
    349          *
    350          * Description : This function is called to terminate the RTOS interface for Modbus Master channels.  The
    351          *               Following objects are deleted.
    352          *
    353          *               (1) An event flag group to signal the reception of a packet.
    354          *
    355          * Argument(s) : none
    356          *
    357          * Return(s)   : none.
    358          *
    359          * Caller(s)   : MB_OS_Exit()
    360          *
    361          * Note(s)     : none.
    362          *********************************************************************************************************
    363          */
    364          
    365          #if (MODBUS_CFG_MASTER_EN == DEF_ENABLED)

   \                                 In section .text, align 2, keep-with-next
    366          static  void  MB_OS_ExitMaster (void)
    367          {
   \                     MB_OS_ExitMaster: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    368              CPU_INT08U  i;
    369              CPU_INT08U  err;
    370          
    371          
    372              for (i = 0; i < MODBUS_CFG_MAX_CH; i++) {                 /* Create a semaphore for each channel   */
   \   00000002   0x2400             MOVS     R4,#+0
   \   00000004   0xE009             B.N      ??MB_OS_ExitMaster_0
    373          #if OS_VERSION > 30000U
    374                  OSSemDel((OS_SEM *)&MB_OS_RxSemTbl[i],
    375                           (OS_OPT  )OS_OPT_DEL_ALWAYS,
    376                           (OS_ERR *)&err);
   \                     ??MB_OS_ExitMaster_1: (+1)
   \   00000006   0x466A             MOV      R2,SP
   \   00000008   0x2101             MOVS     R1,#+1
   \   0000000A   0x....             LDR.N    R3,??DataTable9_1
   \   0000000C   0xEBC0 0x05C0      RSB      R5,R0,R0, LSL #+3
   \   00000010   0xEB03 0x0085      ADD      R0,R3,R5, LSL #+2
   \   00000014   0x.... 0x....      BL       OSSemDel
    377          #else
    378                  OSSemDel(MB_OS_RxSemTbl[i],
    379                           OS_DEL_ALWAYS,
    380                           &err);
    381                  OSSemDel(MB_OS_TxSemTbl[i],
    382                           OS_DEL_ALWAYS,
    383                           &err);
    384          #endif
    385              }
   \   00000018   0x1C64             ADDS     R4,R4,#+1
   \                     ??MB_OS_ExitMaster_0: (+1)
   \   0000001A   0xB2E4             UXTB     R4,R4
   \   0000001C   0x4620             MOV      R0,R4
   \   0000001E   0x2804             CMP      R0,#+4
   \   00000020   0xDBF1             BLT.N    ??MB_OS_ExitMaster_1
    386          }
   \   00000022   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    387          #endif
    388          
    389          /*
    390          *********************************************************************************************************
    391          *                                          MB_OS_ExitSlave()
    392          *
    393          * Description : This function is called to terminate the RTOS interface for Modbus Salve channels.
    394          *               The following objects are deleted.
    395          *
    396          *               (1) A task that waits for packets to be received.
    397          *               (2) A message queue to signal the reception of a packet.
    398          *
    399          * Argument(s) : none
    400          *
    401          * Return(s)   : none.
    402          *
    403          * Caller(s)   : MB_OS_Exit()
    404          *
    405          * Note(s)     : none.
    406          *********************************************************************************************************
    407          */
    408          
    409          #if (MODBUS_CFG_SLAVE_EN == DEF_ENABLED)

   \                                 In section .text, align 2, keep-with-next
    410          void  MB_OS_ExitSlave (void)
    411          {
   \                     MB_OS_ExitSlave: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    412              CPU_INT08U  err;
    413          
    414          #if OS_VERSION  > 30000u
    415              OSTaskDel   ( (OS_TCB  *)&MB_OS_RxTaskTCB,
    416                            (OS_ERR  *)&err);                           /* Delete Modbus Rx Task                 */
   \   00000004   0x....             LDR.N    R4,??DataTable9_3
   \   00000006   0x4669             MOV      R1,SP
   \   00000008   0xF504 0x6000      ADD      R0,R4,#+2048
   \   0000000C   0x.... 0x....      BL       OSTaskDel
    417              OSQDel      ( (OS_Q    *)&MB_OS_RxQ,
    418                            (OS_OPT   )OS_OPT_DEL_ALWAYS,
    419                            (OS_ERR  *)&err);                           /* Delete the Queue                      */
   \   00000010   0x466A             MOV      R2,SP
   \   00000012   0x2101             MOVS     R1,#+1
   \   00000014   0xF604 0x00B8      ADDW     R0,R4,#+2232
   \   00000018   0x.... 0x....      BL       OSQDel
    420          #else
    421              OSTaskDel(MB_OS_CFG_RX_TASK_PRIO);                        /* Delete Modbus Rx Task                 */
    422              OSQDel(MB_OS_RxQ, OS_DEL_ALWAYS,                          /* Delete the Queue                      */
    423                     &err);
    424          #endif
    425          }
   \   0000001C   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    426          #endif
    427          
    428          
    429          /*$PAGE*/
    430          /*
    431          *********************************************************************************************************
    432          *                                              MB_OS_RxSignal()
    433          *
    434          * Description : This function signals the reception of a packet either from the Rx ISR(s) or the RTU timeout
    435          *               timer(s) to indicate that a received packet needs to be processed.
    436          *
    437          * Argument(s) : pch     specifies the Modbus channel data structure in which a packet was received.
    438          *
    439          * Return(s)   : none.
    440          *
    441          * Caller(s)   : MB_ASCII_RxByte()
    442          *               MB_RTU_TmrUpdate()
    443          *
    444          * Note(s)     : none.
    445          *********************************************************************************************************
    446          */
    447          

   \                                 In section .text, align 2, keep-with-next
    448          void  MB_OS_RxSignal (MODBUS_CH *pch)
    449          {
    450              OS_ERR  err;
    451          
    452              if (pch != (MODBUS_CH *)0) {
   \                     MB_OS_RxSignal: (+1)
   \   00000000   0x2800             CMP      R0,#+0
   \   00000002   0xD100             BNE.N    ??MB_OS_RxSignal_0
   \   00000004   0x4770             BX       LR
    453                  switch (pch->MasterSlave) {
   \                     ??MB_OS_RxSignal_0: (+1)
   \   00000006   0xB500             PUSH     {LR}
   \   00000008   0xB083             SUB      SP,SP,#+12
   \   0000000A   0x7D01             LDRB     R1,[R0, #+20]
   \   0000000C   0x2901             CMP      R1,#+1
   \   0000000E   0xD104             BNE.N    ??MB_OS_RxSignal_1
    454          #if (MODBUS_CFG_MASTER_EN == DEF_ENABLED)
    455                      case MODBUS_MASTER:
    456          #if OS_VERSION > 30000U
    457                           BSP_OS_SemPost (pch->RxSem);
   \   00000010   0xF8D0 0x0454      LDR      R0,[R0, #+1108]
   \   00000014   0x.... 0x....      BL       BSP_OS_SemPost
    458          #else
    459                           (void)OSSemPost(pch->RxSem);
    460          #endif
    461                           break;
   \   00000018   0xBD07             POP      {R0-R2,PC}
    462          #endif
    463          
    464          #if (MODBUS_CFG_SLAVE_EN == DEF_ENABLED)
    465                      case MODBUS_SLAVE:
    466                      default:
    467          #if OS_VERSION  > 30000u
    468                           (void)OSQPost ( (OS_Q         *)&MB_OS_RxQ,
    469                                           (void         *)pch,
    470                                           (OS_MSG_SIZE   )1,
    471                                           (OS_OPT        )OS_OPT_POST_FIFO,
    472                                           (OS_ERR       *)&err);
   \                     ??MB_OS_RxSignal_1: (+1)
   \   0000001A   0xA901             ADD      R1,SP,#+4
   \   0000001C   0x9100             STR      R1,[SP, #+0]
   \   0000001E   0x2300             MOVS     R3,#+0
   \   00000020   0x2201             MOVS     R2,#+1
   \   00000022   0x4601             MOV      R1,R0
   \   00000024   0x....             LDR.N    R0,??DataTable9_4
   \   00000026   0x.... 0x....      BL       OSQPost
    473          #else
    474                           (void)OSQPost(MB_OS_RxQ,
    475                                         (void *)pch);
    476          #endif
    477                           break;
    478          #endif
    479                  }
    480              }
    481          }
   \   0000002A   0xBD07             POP      {R0-R2,PC}       ;; return
    482          
    483          /*$PAGE*/
    484          /*
    485          *********************************************************************************************************
    486          *                                              MB_OS_RxWait()
    487          *
    488          * Description : This function waits for a response from a slave.
    489          *
    490          * Argument(s) : pch     specifies the Modbus channel data structure to wait on.
    491          *
    492          *               perr    is a pointer to a variable that will receive an error code.  Possible errors are:
    493          *
    494          *                       MODBUS_ERR_NONE        the call was successful and a packet was received
    495          *                       MODBUS_ERR_TIMED_OUT   a packet was not received within the specified timeout
    496          *                       MODBUS_ERR_NOT_MASTER  the channel is not a Master
    497          *                       MODBUS_ERR_INVALID     an invalid error was detected
    498          *
    499          * Caller(s)    : MBM_FCxx()  Modbus Master Functions
    500          *
    501          * Return(s)   : none
    502          *********************************************************************************************************
    503          */
    504          

   \                                 In section .text, align 2, keep-with-next
    505          void  MB_OS_RxWait (MODBUS_CH   *pch,
    506                              CPU_INT16U  *perr)
    507          {
   \                     MB_OS_RxWait: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x460D             MOV      R5,R1
    508          #if (MODBUS_CFG_MASTER_EN == DEF_ENABLED)
    509              CPU_INT08U  err;
    510          
    511              if (pch != (MODBUS_CH *)0) {
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD035             BEQ.N    ??MB_OS_RxWait_0
    512                  if (pch->MasterSlave == MODBUS_MASTER) {
   \   0000000A   0xF100 0x0114      ADD      R1,R0,#+20
   \   0000000E   0x780A             LDRB     R2,[R1, #+0]
   \   00000010   0x2A01             CMP      R2,#+1
   \   00000012   0xD12C             BNE.N    ??MB_OS_RxWait_1
    513          #if OS_VERSION > 30000U
    514                      OSSemPend((OS_SEM *)pch->RxSem,
    515                                (OS_TICK )pch->RxTimeout,
    516                                (OS_OPT  )OS_OPT_PEND_BLOCKING,
    517                                (CPU_TS  )0,
    518                                (OS_ERR *)&err);
   \   00000014   0xF200 0x4454      ADDW     R4,R0,#+1108
   \   00000018   0xA801             ADD      R0,SP,#+4
   \   0000001A   0x9000             STR      R0,[SP, #+0]
   \   0000001C   0x2300             MOVS     R3,#+0
   \   0000001E   0x461A             MOV      R2,R3
   \   00000020   0x6949             LDR      R1,[R1, #+20]
   \   00000022   0x6820             LDR      R0,[R4, #+0]
   \   00000024   0x.... 0x....      BL       OSSemPend
    519          #else
    520                      OSSemPend(pch->RxSem,
    521                                pch->RxTimeout,
    522                                &err);
    523          #endif
    524                      switch (err) {
   \   00000028   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   0000002C   0x2800             CMP      R0,#+0
   \   0000002E   0xD102             BNE.N    ??MB_OS_RxWait_2
    525                          //case OS_ERR_EVENT_TYPE:
    526                          case OS_ERR_PEND_ISR:
    527                          case OS_ERR_PEND_LOCKED:
    528                               *perr = MODBUS_ERR_INVALID;
    529                               break;
    530          
    531                          case OS_ERR_TIMEOUT:
    532                               *perr = MODBUS_ERR_TIMED_OUT;
    533                               break;
    534          
    535                          case OS_ERR_NONE:
    536                               *perr = MODBUS_ERR_NONE;
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x8028             STRH     R0,[R5, #+0]
    537                               break;
   \   00000034   0xE002             B.N      ??MB_OS_RxWait_3
    538                          default:
    539                               *perr = MODBUS_ERR_INVALID;
   \                     ??MB_OS_RxWait_2: (+1)
   \   00000036   0xF640 0x30BA      MOVW     R0,#+3002
   \   0000003A   0x8028             STRH     R0,[R5, #+0]
    540                      }
    541          
    542                      if ( err == OS_ERR_NONE ) {
   \                     ??MB_OS_RxWait_3: (+1)
   \   0000003C   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   00000040   0x2800             CMP      R0,#+0
   \   00000042   0xD107             BNE.N    ??MB_OS_RxWait_4
    543                          pch->RxFaildCtr     = 0;
   \   00000044   0x7A20             LDRB     R0,[R4, #+8]
   \   00000046   0xF000 0x000F      AND      R0,R0,#0xF
   \   0000004A   0x7220             STRB     R0,[R4, #+8]
    544                          pch->RxFaildFlag    = 0;
   \   0000004C   0xF000 0x00F7      AND      R0,R0,#0xF7
   \   00000050   0x7220             STRB     R0,[R4, #+8]
   \   00000052   0xBD37             POP      {R0-R2,R4,R5,PC}
    545                      } else {
    546                        if (pch->RxFaildCtr < MODBUS_CFG_FAILD_MAX) {
   \                     ??MB_OS_RxWait_4: (+1)
   \   00000054   0x7A21             LDRB     R1,[R4, #+8]
   \   00000056   0x4608             MOV      R0,R1
   \   00000058   0x0900             LSRS     R0,R0,#+4
   \   0000005A   0x2805             CMP      R0,#+5
   \   0000005C   0xDA03             BGE.N    ??MB_OS_RxWait_5
    547                          pch->RxFaildCtr++;
   \   0000005E   0xF101 0x0010      ADD      R0,R1,#+16
   \   00000062   0x7220             STRB     R0,[R4, #+8]
   \   00000064   0xBD37             POP      {R0-R2,R4,R5,PC}
    548                        } else {
    549                          pch->RxFaildFlag    = 1;
   \                     ??MB_OS_RxWait_5: (+1)
   \   00000066   0xF041 0x0008      ORR      R0,R1,#0x8
   \   0000006A   0x7220             STRB     R0,[R4, #+8]
   \   0000006C   0xBD37             POP      {R0-R2,R4,R5,PC}
    550                        }
    551                      }
    552                  } else {
    553                      *perr = MODBUS_ERR_NOT_MASTER;
   \                     ??MB_OS_RxWait_1: (+1)
   \   0000006E   0xF640 0x30B9      MOVW     R0,#+3001
   \   00000072   0x8028             STRH     R0,[R5, #+0]
   \   00000074   0xBD37             POP      {R0-R2,R4,R5,PC}
    554                  }
    555              } else {
    556                  *perr = MODBUS_ERR_NULLPTR;
   \                     ??MB_OS_RxWait_0: (+1)
   \   00000076   0xF640 0x30BB      MOVW     R0,#+3003
   \   0000007A   0x8028             STRH     R0,[R5, #+0]
    557              }
    558          #else
    559              *perr = MODBUS_ERR_INVALID;
    560          #endif
    561          }
   \   0000007C   0xBD37             POP      {R0-R2,R4,R5,PC}  ;; return
    562          

   \                                 In section .text, align 2, keep-with-next
    563          void  MB_OS_TxWait (MODBUS_CH   *pch,
    564                              CPU_INT16U  *perr)
    565          {
   \                     MB_OS_TxWait: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x460C             MOV      R4,R1
    566          #if (MODBUS_CFG_MASTER_EN == DEF_ENABLED)
    567              CPU_INT08U  err;
    568          
    569              if (pch != (MODBUS_CH *)0) {
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xD01C             BEQ.N    ??MB_OS_TxWait_0
    570                  if (pch->MasterSlave == MODBUS_MASTER) {
   \   00000008   0xF100 0x0114      ADD      R1,R0,#+20
   \   0000000C   0x780A             LDRB     R2,[R1, #+0]
   \   0000000E   0x2A01             CMP      R2,#+1
   \   00000010   0xD113             BNE.N    ??MB_OS_TxWait_1
    571          #if OS_VERSION > 30000U
    572                      OSSemPend((OS_SEM *)pch->TxSem,
    573                                (OS_TICK )pch->RxTimeout,
    574                                (OS_OPT  )OS_OPT_PEND_BLOCKING,
    575                                (CPU_TS  )0,
    576                                (OS_ERR *)&err);
   \   00000012   0xAA01             ADD      R2,SP,#+4
   \   00000014   0x9200             STR      R2,[SP, #+0]
   \   00000016   0x2300             MOVS     R3,#+0
   \   00000018   0x461A             MOV      R2,R3
   \   0000001A   0x6949             LDR      R1,[R1, #+20]
   \   0000001C   0xF8D0 0x0458      LDR      R0,[R0, #+1112]
   \   00000020   0x.... 0x....      BL       OSSemPend
    577          #else
    578                      OSSemPend(pch->TxSem,
    579                                pch->RxTimeout,
    580                                &err);
    581          #endif
    582                      switch (err) {
   \   00000024   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   00000028   0x2800             CMP      R0,#+0
   \   0000002A   0xD102             BNE.N    ??MB_OS_TxWait_2
    583                          //case OS_ERR_EVENT_TYPE:
    584                          case OS_ERR_PEND_ISR:
    585                          case OS_ERR_PEND_LOCKED:
    586                               *perr = MODBUS_ERR_INVALID;
    587                               break;
    588          
    589                          case OS_ERR_TIMEOUT:
    590                               *perr = MODBUS_ERR_TIMED_OUT;
    591                               break;
    592          
    593                          case OS_ERR_NONE:
    594                               *perr = MODBUS_ERR_NONE;
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x8020             STRH     R0,[R4, #+0]
    595                               break;
   \   00000030   0xBD13             POP      {R0,R1,R4,PC}
    596                          default:
    597                            *perr = MODBUS_ERR_INVALID;
   \                     ??MB_OS_TxWait_2: (+1)
   \   00000032   0xF640 0x30BA      MOVW     R0,#+3002
   \   00000036   0x8020             STRH     R0,[R4, #+0]
   \   00000038   0xBD13             POP      {R0,R1,R4,PC}
    598                      }
    599                  } else {
    600                      *perr = MODBUS_ERR_NOT_MASTER;
   \                     ??MB_OS_TxWait_1: (+1)
   \   0000003A   0xF640 0x30B9      MOVW     R0,#+3001
   \   0000003E   0x8020             STRH     R0,[R4, #+0]
   \   00000040   0xBD13             POP      {R0,R1,R4,PC}
    601                  }
    602              } else {
    603                  *perr = MODBUS_ERR_NULLPTR;
   \                     ??MB_OS_TxWait_0: (+1)
   \   00000042   0xF640 0x30BB      MOVW     R0,#+3003
   \   00000046   0x8020             STRH     R0,[R4, #+0]
    604              }
    605          #else
    606              *perr = MODBUS_ERR_INVALID;
    607          #endif
    608          }
   \   00000048   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    609          

   \                                 In section .text, align 2, keep-with-next
    610          void  MB_OS_TxOver (MODBUS_CH   *pch )
    611          {
   \                     MB_OS_TxOver: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    612          #if OS_VERSION  > 30000u
    613            OS_ERR    err;
    614            OSSemPost((OS_SEM  *)pch->TxSem,
    615                      (OS_OPT   )OS_OPT_POST_1,
    616                      (OS_ERR  *)&err);
   \   00000002   0x466A             MOV      R2,SP
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0xF8D0 0x0458      LDR      R0,[R0, #+1112]
   \   0000000A   0x.... 0x....      BL       OSSemPost
    617          #else
    618            OSSemPost(pch->TxSem);
    619          #endif
    620          
    621          }
   \   0000000E   0xBD01             POP      {R0,PC}          ;; return
    622          /*$PAGE*/
    623          /*
    624          *********************************************************************************************************
    625          *                                            MB_OS_RxTask()
    626          *
    627          * Description : This task is created by MB_OS_Init() and waits for signals from either the Rx ISR(s) or
    628          *               the RTU timeout timer(s) to indicate that a packet needs to be processed.
    629          *
    630          * Argument(s) : p_arg       is a pointer to an optional argument that is passed by uC/OS-II to the task.
    631          *                           This argument is not used.
    632          *
    633          * Caller(s)   : This is a Task.
    634          *
    635          * Return(s)   : none.
    636          *********************************************************************************************************
    637          */
    638          
    639          #if (MODBUS_CFG_SLAVE_EN == DEF_ENABLED)

   \                                 In section .text, align 4, keep-with-next
    640          static  void  MB_OS_RxTask (void *p_arg)
    641          {
   \                     MB_OS_RxTask: (+1)
   \   00000000   0xB5E0             PUSH     {R5-R7,LR}
    642              CPU_INT08U  err;
    643              MODBUS_CH  *pch;
    644          #if OS_VERSION  > 30000u
    645              OS_MSG_SIZE p_msg_size;
    646          #endif
    647              (void)p_arg;
    648          
    649              while (DEF_TRUE) {
    650          #if OS_VERSION  > 30000u
    651                  pch = (MODBUS_CH *)OSQPend ((OS_Q         *)&MB_OS_RxQ,
    652                                              (OS_TICK       )0,
    653                                              (OS_OPT        )OS_OPT_PEND_BLOCKING,//OS_OPT_PEND_NON_BLOCKING,
    654                                              (OS_MSG_SIZE  *)&p_msg_size,
    655                                              (CPU_TS       *)0,
    656                                              (OS_ERR       *)&err);
   \                     ??MB_OS_RxTask_0: (+1)
   \   00000002   0xA802             ADD      R0,SP,#+8
   \   00000004   0x9001             STR      R0,[SP, #+4]
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x9000             STR      R0,[SP, #+0]
   \   0000000A   0xF10D 0x030A      ADD      R3,SP,#+10
   \   0000000E   0x4602             MOV      R2,R0
   \   00000010   0x4601             MOV      R1,R0
   \   00000012   0x....             LDR.N    R0,??DataTable9_4
   \   00000014   0x.... 0x....      BL       OSQPend
    657          #else
    658                  pch = (MODBUS_CH *)OSQPend(MB_OS_RxQ,    /* Wait for a packet to be received                   */
    659                                             0,
    660                                             &err);
    661          #endif
    662                  MB_RxTask(pch);                          /* Process the packet received                        */
   \   00000018   0x.... 0x....      BL       MB_RxTask
   \   0000001C   0xE7F1             B.N      ??MB_OS_RxTask_0
    663              }
    664          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   0x52 0x78          DC8      "RxQ"
   \              0x51 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_1:
   \   00000000   0x........         DC32     MB_OS_RxSemTbl

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_2:
   \   00000000   0x........         DC32     MB_OS_TxSemTbl

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_3:
   \   00000000   0x........         DC32     MB_OS_RxTaskStk

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_4:
   \   00000000   0x........         DC32     MB_OS_RxTaskStk+0x8B8

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x52 0x78          DC8 "RxQ"
   \              0x51 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x75 0x43          DC8 "uC/Modbus Rx Sem"
   \              0x2F 0x4D    
   \              0x6F 0x64    
   \              0x62 0x75    
   \              0x73 0x20    
   \              0x52 0x78    
   \              0x20 0x53    
   \              0x65 0x6D    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x75 0x43          DC8 "uC/Modbus Tx Sem"
   \              0x2F 0x4D    
   \              0x6F 0x64    
   \              0x62 0x75    
   \              0x73 0x20    
   \              0x54 0x78    
   \              0x20 0x53    
   \              0x65 0x6D    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x41 0x70          DC8 "App Task Start"
   \              0x70 0x20    
   \              0x54 0x61    
   \              0x73 0x6B    
   \              0x20 0x53    
   \              0x74 0x61    
   \              0x72 0x74    
   \              0x00         
   \   0000000F   0x00               DC8 0
    665          #endif
    666          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   MB_OS_Exit
         8   -> MB_OS_ExitMaster
         0   -> MB_OS_ExitSlave
      16   MB_OS_ExitMaster
        16   -> OSSemDel
      16   MB_OS_ExitSlave
        16   -> OSQDel
        16   -> OSTaskDel
       8   MB_OS_Init
         8   -> MB_OS_InitMaster
         0   -> MB_OS_InitSlave
      16   MB_OS_InitMaster
        16   -> BSP_OS_SemCreate
      48   MB_OS_InitSlave
        48   -> OSQCreate
        48   -> OSTaskCreate
      16   MB_OS_RxSignal
        16   -> BSP_OS_SemPost
        16   -> OSQPost
      16   MB_OS_RxTask
        16   -> MB_RxTask
        16   -> OSQPend
      24   MB_OS_RxWait
        24   -> OSSemPend
       8   MB_OS_TxOver
         8   -> OSSemPost
      16   MB_OS_TxWait
        16   -> OSSemPend


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable9
       4  ??DataTable9_1
       4  ??DataTable9_2
       4  ??DataTable9_3
       4  ??DataTable9_4
      20  ?_0
      20  ?_1
       4  ?_2
      16  ?_3
      12  MB_OS_Exit
      36  MB_OS_ExitMaster
      30  MB_OS_ExitSlave
      12  MB_OS_Init
      48  MB_OS_InitMaster
      74  MB_OS_InitSlave
      44  MB_OS_RxSignal
      30  MB_OS_RxTask
    2268  MB_OS_RxTaskStk
          MB_OS_RxTaskTCB
          MB_OS_RxQ
     126  MB_OS_RxWait
      16  MB_OS_TxOver
      74  MB_OS_TxWait

 
 2 268 bytes in section .bss
     4 bytes in section .rodata
   578 bytes in section .text
 
   578 bytes of CODE  memory
     4 bytes of CONST memory
 2 268 bytes of DATA  memory

Errors: none
Warnings: none

###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       30/Nov/2017  11:25:12
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\iar\NC199B-200 主板\Software\APP\comm\app_comm_dtu_otr_deal.c
#    Command line =  
#        "F:\iar\NC199B-200 主板\Software\APP\comm\app_comm_dtu_otr_deal.c" -D
#        USE_STDPERIPH_DRIVER -D _STM32F10X_HD -D STM32F10X_CL -D DEBUG -D
#        STM32F103RC -D STM32_FLASH_SIZE=256 -D HSE_VALUE=25000000 -lCN
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\List\
#        -o
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        F:\iar\NC199B-100\Library\Project\IAR\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\User\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\AES\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Config\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\OS\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\User\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Source\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Port\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\OS\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Config\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Protocol\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Iap\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Driver\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\IAR\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\uCOS-III\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\CMSIS\CM3\CoreSupport\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\CMSIS\CM3\DeviceSupport\ST\STM32F10x\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\STM32F10x_StdPeriph_Driver\inc\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-CPU\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-CPU\ARM-Cortex-M3\IAR\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-LIB\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\OSAL\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\OSAL\OS\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\OS\uCOS-III\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\Source\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\Source\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\FatFs\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\FatFs\option\ -Om
#        --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\List\app_comm_dtu_otr_deal.lst
#    Object file  =  
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\Obj\app_comm_dtu_otr_deal.o
#
###############################################################################

F:\iar\NC199B-200 主板\Software\APP\comm\app_comm_dtu_otr_deal.c
      1          /*******************************************************************************
      2          *   Filename:       app_comm_dtu_otr_deal.c
      3          *   Revised:        All copyrights reserved to redmorningcn.
      4          *   Revision:       v1.0
      5          *   Writer:	        redmorningcn.
      6          *
      7          *   Description:    双击选中 dtu 按 Ctrl + H, 钩选 Match the case, Replace with
      8          *                   输入您要的名字，点击 Replace All
      9          *                   双击选中 Dtu 按 Ctrl + H, 钩选 Match the case, Replace with
     10          *                   输入您要的名字，点击 Replace All
     11          *                   双击选中 DTU 按 Ctrl + H, 钩选 Match the case, Replace with
     12          *                   输入您要的名字，点击 Replace All
     13          *                   在 app_cfg.h 中指定本任务的 优先级  （ APP_TASK_COMM_PRIO     ）
     14          *                                            和 任务堆栈（ APP_TASK_COMM_STK_SIZE ）大小
     15          *
     16          *   Notes:
     17          *     				E-mail: redmorningcn@qq.com
     18          *
     19          *******************************************************************************/
     20          
     21          /*******************************************************************************
     22          * INCLUDES
     23          */
     24          #define  SNL_APP_SOURCE
     25          #include <includes.h>
     26          #include <app_comm_protocol.h>
     27          #include <app_ctrl.h>
     28          #include <app.h>
     29          #include <os_cfg_app.h>
     30          #include <bsp_FRAM.h>
     31          #include <bsp_DS3231.h>
     32          #include  <global.h>
     33          
     34          
     35          
     36          #ifdef VSC_INCLUDE_SOURCE_FILE_NAMES
     37          const  CPU_CHAR  *app_comm_dtu_otr__c = "$Id: $";
     38          #endif
     39          
     40          #define APP_TASK_COMM_EN     DEF_ENABLED
     41          #if APP_TASK_COMM_EN == DEF_ENABLED
     42          /*******************************************************************************
     43          * CONSTANTS
     44          */
     45          
     46          /*******************************************************************************
     47          * MACROS
     48          */
     49          #define CYCLE_TIME_TICKS            (OS_TICKS_PER_SEC * 1)
     50          
     51          /*******************************************************************************
     52          * TYPEDEFS
     53          */
     54          
     55          #define		DATA_CARD           0x0001			//数据卡-----暂时未用
     56          //#define		DENSITY_CARD		0x0020			//密度卡
     57          #define		AIR_PARA_SET        0x00000020      //空气运算参数设置
     58          
     59          #define		MODEL_CARD			0x0040			//模型卡-----暂时未用
     60          #define		TIME_CARD           0x00000100			//时间卡-----
     61          #define		COM_MODEL_CARD	    0x0100		    //串口模型卡-暂时未用
     62          //#define		HIGHT_CARD			0x0200			//高度卡-----
     63          #define		MEASURE_ONCE        0x00000200      //启动一次测试
     64          
     65          #define		COPY_CARD           0x0400			//复制卡-----暂时未用
     66          #define		MODEL_SELECT_CARD	0x1000			//模型选择卡-
     67          #define		FIX_CARD            0x00002000		//装车卡-----
     68          #define		COPY_FRAM_CARD	    0x4000			//铁电复制卡-暂时未用
     69          #define		SET_DATA_CARD		0x0080			//置数卡-----按时未用
     70          #define		DEBUG_CARD			0x0800			//调试卡-----暂时未用
     71          
     72          #define		EXPAND_CARD			    0x8000			//扩展卡-----暂时未用
     73          #define		DATA_CARD_DIS		    0x10000			//数据卡指示
     74          #define		DATA_CARD_FIN		    0x20000			//数据卡结束
     75          #define		SYS_RUN_PARA		    0x40000			//系统参数卡--暂未使用
     76          #define		CLEAR_ALL			    0x00080000		//清零卡，数据记录清零
     77          
     78          #define		RST_SYS				    0x00100000		//复位指令
     79          #define		CALC_PARA               0x200000		//计算斜率
     80          #define		RUN_MODEL_PARA          0x400000		//运算模型卡
     81          
     82          #define     OIL_BOX_MODEL_ADDR      2000    //油箱模型存储地址
     83          
     84          
     85          /*******************************************************************************
     86          * LOCAL VARIABLES
     87          */
     88          
     89          /*******************************************************************************
     90          * GLOBAL VARIABLES
     91          */
     92          
     93          /***********************************************
     94          * 描述： 软定时器声明
     95          */
     96          
     97          /***********************************************
     98          * 描述： 软定时器回调函数
     99          */
    100          
    101          
    102          /*******************************************************************************
    103          * LOCAL FUNCTIONS
    104          */
    105          uint8   comm_record_send_one(StrDevDtu * sDtu,uint8 addrnum);
    106          void    comm_record_send(StrDevDtu * sDtu,uint8 addrnum);
    107          void    comm_para_flow(StrDevDtu * sDtu,uint8 addrnum);
    108          uint8	ReadFlshRec(stcFlshRec * sFlshRec,uint32	FlshRecNum);
    109          
    110          //void    Restart(void);
    111          
    112          
    113          
    114          /*******************************************************************************
    115          * GLOBAL FUNCTIONS
    116          */
    117          
    118          /*******************************************************************************
    119          * EXTERN VARIABLES
    120          */
    121          
    122          /*******************************************************************************
    123          * EXTERN FUNCTIONS
    124          */
    125          
    126          void    BSP_DispClrAll(void);       
    127          void    GetOilPara(void);
    128          void    SetDispNow(void);
    129          void    StartAirMeasure(void);
    130          
    131          //uint8   comm_tinyrec_send(StcDevOtr * sOtr,uint8    addrnum);
    132          
    133          /*******************************************************************************/
    134          
    135          
    136          /*******************************************************************************
    137          * 名    称： comm_para_flow
    138          * 功    能： 参数流。根据具体参数进行操作
    139          *            
    140          * 入口参数： 无线设备数据结构
    141          * 出口参数： 无
    142          * 作　 　者： redmorningcn.
    143          * 创建日期： 2017-05-19
    144          * 修    改：
    145          * 修改日期：
    146          * 备    注： 任务创建函数需要在app.h文件中声明
    147          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    148          void    comm_para_flow(StrDevDtu * sDtu,uint8 addrnum)
    149          {
   \                     comm_para_flow: (+1)
   \   00000000   0xB57F             PUSH     {R0-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
    150              uint32       i = 0;
   \   00000004   0x2500             MOVS     R5,#+0
    151          //    uint32      modelrecvnum =0;
    152              uint32      tmp32;
    153          //    static     uint32      modelstoreaddr = 0;
    154          //    uint16      crc16;
    155          //    uint8       *p;
    156              uint8       bittmp; 
    157          
    158              BSP_DispClrAll();                               //清原显示值，立即显示设定值                 
   \   00000006   0x.... 0x....      BL       BSP_DispClrAll
    159              
    160              switch (sDtu->RxCtrl.DataCode)  
   \   0000000A   0xF8D4 0x0148      LDR      R0,[R4, #+328]
   \   0000000E   0x2820             CMP      R0,#+32
   \   00000010   0xD026             BEQ.N    ??comm_para_flow_0
   \   00000012   0x2840             CMP      R0,#+64
   \   00000014   0xF000 0x80E4      BEQ.W    ??comm_para_flow_1
   \   00000018   0xF5B0 0x7F80      CMP      R0,#+256
   \   0000001C   0xD070             BEQ.N    ??comm_para_flow_2
   \   0000001E   0xF5B0 0x7F00      CMP      R0,#+512
   \   00000022   0xF000 0x8080      BEQ.W    ??comm_para_flow_3
   \   00000026   0xF5B0 0x5F00      CMP      R0,#+8192
   \   0000002A   0xF000 0x807F      BEQ.W    ??comm_para_flow_4
   \   0000002E   0xF5B0 0x3F80      CMP      R0,#+65536
   \   00000032   0xF000 0x808C      BEQ.W    ??comm_para_flow_5
   \   00000036   0xF5B0 0x3F00      CMP      R0,#+131072
   \   0000003A   0xF000 0x8090      BEQ.W    ??comm_para_flow_6
   \   0000003E   0xF5B0 0x2F80      CMP      R0,#+262144
   \   00000042   0xF000 0x80B9      BEQ.W    ??comm_para_flow_7
   \   00000046   0xF5B0 0x2F00      CMP      R0,#+524288
   \   0000004A   0xF000 0x8094      BEQ.W    ??comm_para_flow_8
   \   0000004E   0xF5B0 0x1F80      CMP      R0,#+1048576
   \   00000052   0xF000 0x809E      BEQ.W    ??comm_para_flow_9
   \   00000056   0xF5B0 0x0F80      CMP      R0,#+4194304
   \   0000005A   0xF000 0x80C4      BEQ.W    ??comm_para_flow_10
   \   0000005E   0xBD7F             POP      {R0-R6,PC}
    161              {
    162                  //
    163              case    AIR_PARA_SET: 
    164                  uprintf("test");
   \                     ??comm_para_flow_0: (+1)
   \   00000060   0x.... 0x....      ADR.W    R5,?_0
   \   00000064   0x4628             MOV      R0,R5
   \   00000066   0x.... 0x....      BL       uprintf
    165                  uprintf("test");
   \   0000006A   0x4628             MOV      R0,R5
   \   0000006C   0x.... 0x....      BL       uprintf
    166          
    167                  if(sDtu->Rd.sAirPara.SetFlg.SetVocStand)    //voc-s
   \   00000070   0x....             LDR.N    R5,??DataTable11_1
   \   00000072   0x8C60             LDRH     R0,[R4, #+34]
   \   00000074   0xF3C0 0x0040      UBFX     R0,R0,#+1,#+1
   \   00000078   0x2800             CMP      R0,#+0
   \   0000007A   0xD005             BEQ.N    ??comm_para_flow_11
    168                  {
    169                      memcpy((uint8 *)&Ctrl.Para.dat.sAirPara.sStandard_VOC,
    170                             (uint8 *)&sDtu->Rd.sAirPara.sStandard_VOC,
    171                             sizeof(sDtu->Rd.sAirPara.sStandard_VOC)
    172                             );
   \   0000007C   0x2204             MOVS     R2,#+4
   \   0000007E   0x1D21             ADDS     R1,R4,#+4
   \   00000080   0xF105 0x0024      ADD      R0,R5,#+36
   \   00000084   0x.... 0x....      BL       __aeabi_memcpy
    173                  }
    174                  
    175                  if(sDtu->Rd.sAirPara.SetFlg.SetHumStand)    //hum-s
   \                     ??comm_para_flow_11: (+1)
   \   00000088   0xF894 0x0022      LDRB     R0,[R4, #+34]
   \   0000008C   0x07C0             LSLS     R0,R0,#+31
   \   0000008E   0xD505             BPL.N    ??comm_para_flow_12
    176                  {
    177                      memcpy((uint8 *)&Ctrl.Para.dat.sAirPara.sStandard_Hum,
    178                             (uint8 *)&sDtu->Rd.sAirPara.sStandard_Hum,
    179                             sizeof(sDtu->Rd.sAirPara.sStandard_Hum)
    180                             );
   \   00000090   0x2204             MOVS     R2,#+4
   \   00000092   0x4621             MOV      R1,R4
   \   00000094   0xF105 0x0020      ADD      R0,R5,#+32
   \   00000098   0x.... 0x....      BL       __aeabi_memcpy
    181                  }
    182                  
    183                  if(sDtu->Rd.sAirPara.SetFlg.SetDustStand)   //dust-s
   \                     ??comm_para_flow_12: (+1)
   \   0000009C   0x8C60             LDRH     R0,[R4, #+34]
   \   0000009E   0xF3C0 0x0080      UBFX     R0,R0,#+2,#+1
   \   000000A2   0x2800             CMP      R0,#+0
   \   000000A4   0xD006             BEQ.N    ??comm_para_flow_13
    184                  {
    185                      memcpy((uint8 *)&Ctrl.Para.dat.sAirPara.sStandard_Dust,
    186                             (uint8 *)&sDtu->Rd.sAirPara.sStandard_Dust,
    187                             sizeof(sDtu->Rd.sAirPara.sStandard_Dust)
    188                             );
   \   000000A6   0x2204             MOVS     R2,#+4
   \   000000A8   0xF104 0x0108      ADD      R1,R4,#+8
   \   000000AC   0xF105 0x0028      ADD      R0,R5,#+40
   \   000000B0   0x.... 0x....      BL       __aeabi_memcpy
    189                  }
    190                  
    191                  if(sDtu->Rd.sAirPara.SetFlg.SetVocModefy)   //voc-m
   \                     ??comm_para_flow_13: (+1)
   \   000000B4   0x8C60             LDRH     R0,[R4, #+34]
   \   000000B6   0xF3C0 0x1000      UBFX     R0,R0,#+4,#+1
   \   000000BA   0x2800             CMP      R0,#+0
   \   000000BC   0xD006             BEQ.N    ??comm_para_flow_14
    192                  {
    193                      memcpy((uint8 *)&Ctrl.Para.dat.sAirPara.Voc_modefy,
    194                             (uint8 *)&sDtu->Rd.sAirPara.Voc_modefy,
    195                             sizeof(sDtu->Rd.sAirPara.Voc_modefy)
    196                             );
   \   000000BE   0x2202             MOVS     R2,#+2
   \   000000C0   0xF104 0x0112      ADD      R1,R4,#+18
   \   000000C4   0xF105 0x0032      ADD      R0,R5,#+50
   \   000000C8   0x.... 0x....      BL       __aeabi_memcpy
    197                  }
    198                  
    199                  if(sDtu->Rd.sAirPara.SetFlg.SetHumModefy)   //hum-m
   \                     ??comm_para_flow_14: (+1)
   \   000000CC   0x8C60             LDRH     R0,[R4, #+34]
   \   000000CE   0xF3C0 0x00C0      UBFX     R0,R0,#+3,#+1
   \   000000D2   0x2800             CMP      R0,#+0
   \   000000D4   0xD006             BEQ.N    ??comm_para_flow_15
    200                  {
    201                      memcpy((uint8 *)&Ctrl.Para.dat.sAirPara.Hum_modefy,
    202                             (uint8 *)&sDtu->Rd.sAirPara.Hum_modefy,
    203                             sizeof(sDtu->Rd.sAirPara.Hum_modefy)
    204                             );
   \   000000D6   0x2202             MOVS     R2,#+2
   \   000000D8   0xF104 0x010E      ADD      R1,R4,#+14
   \   000000DC   0xF105 0x002E      ADD      R0,R5,#+46
   \   000000E0   0x.... 0x....      BL       __aeabi_memcpy
    205                  }
    206                  
    207                  if(sDtu->Rd.sAirPara.SetFlg.SetDustModefy)  //dust-m
   \                     ??comm_para_flow_15: (+1)
   \   000000E4   0x8C60             LDRH     R0,[R4, #+34]
   \   000000E6   0xF3C0 0x1040      UBFX     R0,R0,#+5,#+1
   \   000000EA   0x2800             CMP      R0,#+0
   \   000000EC   0xF000 0x8086      BEQ.W    ??comm_para_flow_16
    208                  {
    209                      memcpy((uint8 *)&Ctrl.Para.dat.sAirPara.Dust_modefy,
    210                             (uint8 *)&sDtu->Rd.sAirPara.Dust_modefy,
    211                             sizeof(sDtu->Rd.sAirPara.Dust_modefy)
    212                             );
   \   000000F0   0x2202             MOVS     R2,#+2
   \   000000F2   0xF104 0x0110      ADD      R1,R4,#+16
   \   000000F6   0xF105 0x0030      ADD      R0,R5,#+48
   \   000000FA   0x.... 0x....      BL       __aeabi_memcpy
    213                  }
   \   000000FE   0xBD7F             POP      {R0-R6,PC}
   \                     ??comm_para_flow_2: (+1)
   \   00000100   0x4668             MOV      R0,SP
   \   00000102   0x4621             MOV      R1,R4
   \   00000104   0x2206             MOVS     R2,#+6
   \   00000106   0x.... 0x....      BL       __aeabi_memcpy
    214                  
    215          //        Ctrl.SOilPara.Density = sDtu->Rd.Density;          
    216          //        
    217          //        FRAM_StoreOilPara((StrOilPara *)&Ctrl.SOilPara);   //存数据。关键数据存储时保护
    218          //        
    219          //        uprintf("%8d",Ctrl.SOilPara.Density);   //立即显示设定值 
    220                  
    221                  break;
    222                  
    223                  //设置时间
    224              case    TIME_CARD:                
    225                  
    226                  WriteTime(sDtu->Rd.sTime);          
   \   0000010A   0xE9DD 0x0100      LDRD     R0,R1,[SP, #+0]
   \   0000010E   0x.... 0x....      BL       WriteTime
    227                  ReadTime((stcTime *)&sDtu->Rd.sTime);
   \   00000112   0x4620             MOV      R0,R4
   \   00000114   0x.... 0x....      BL       ReadTime
    228                  
    229                  
    230          //        uprintf("%02d-%02d-%02d",sTime.Year
    231          //                ,sTime.Month
    232          //                    ,sTime.Date
    233          //                        );     
    234          //        uprintf("%02d-%02d-%02d",sTime.Hour
    235          //                ,sTime.Min
    236          //                    ,sTime.Sec
    237          //                        );          
    238                  uprintf("%02d.%02d" ,sDtu->Rd.sTime.Hour
    239                                      ,sDtu->Rd.sTime.Min
    240                                  );               
   \   00000118   0x7862             LDRB     R2,[R4, #+1]
   \   0000011A   0x78A1             LDRB     R1,[R4, #+2]
   \   0000011C   0x.... 0x....      ADR.W    R0,?_1
   \   00000120   0x.... 0x....      BL       uprintf
    241                  break;
   \   00000124   0xBD7F             POP      {R0-R6,PC}
    242                  
    243                  //高度卡
    244              case    MEASURE_ONCE: 
    245          
    246                  StartAirMeasure();
   \                     ??comm_para_flow_3: (+1)
   \   00000126   0x.... 0x....      BL       StartAirMeasure
    247                  
    248                  //高度值可以累计
    249          //        Ctrl.SOilPara.Hig += sDtu->Rd.Hig;
    250          //        if(Ctrl.SOilPara.Hig  > 500)
    251          //            Ctrl.SOilPara.Hig = 500;
    252          //        
    253          //        if(Ctrl.SOilPara.Hig  < -500)
    254          //            Ctrl.SOilPara.Hig = -500;
    255          //        
    256          //        FRAM_StoreOilPara((StrOilPara *)&Ctrl.SOilPara);   //存数据。关键数据存储时保护
    257          //        
    258          //        uprintf("%8d",Ctrl.SOilPara.Hig);     
    259                  
    260                  break;
   \   0000012A   0xBD7F             POP      {R0-R6,PC}
    261                  
    262                  //模型选择卡
    263              case    MODEL_SELECT_CARD:   
    264          //        Ctrl.SOilPara.ModelNum = sDtu->Rd.ModelNum;//选择的模型编号
    265          //        
    266          //        FRAM_StoreOilPara((StrOilPara *)&Ctrl.SOilPara);   //存数据。关键数据存储时保护
    267          //        
    268          //        uprintf("%8d",Ctrl.SOilPara.ModelNum);      //立即显示设定值 
    269                  break;
    270                  
    271                  //车型车号
    272              case    FIX_CARD: 
    273                  Ctrl.Para.dat.sProductInfo.sLocoId.Num = sDtu->Rd.sLocoId.Num;
   \                     ??comm_para_flow_4: (+1)
   \   0000012C   0x....             LDR.N    R5,??DataTable11_1
   \   0000012E   0x1D2E             ADDS     R6,R5,#+4
   \   00000130   0x8860             LDRH     R0,[R4, #+2]
   \   00000132   0x8370             STRH     R0,[R6, #+26]
    274                  Ctrl.Para.dat.sProductInfo.sLocoId.Type = sDtu->Rd.sLocoId.Type;
   \   00000134   0x8820             LDRH     R0,[R4, #+0]
   \   00000136   0x8330             STRH     R0,[R6, #+24]
    275                  
    276                  FRAM_StoreProductInfo((stcProductInfo *)&Ctrl.Para.dat.sProductInfo);
   \   00000138   0xF105 0x0014      ADD      R0,R5,#+20
   \   0000013C   0x.... 0x....      BL       FRAM_StoreProductInfo
    277                  
    278                  uprintf("%4d.%4d"   ,Ctrl.Para.dat.sProductInfo.sLocoId.Type
    279                                      ,Ctrl.Para.dat.sProductInfo.sLocoId.Num
    280                              );      
   \   00000140   0x8B72             LDRH     R2,[R6, #+26]
   \   00000142   0x8B31             LDRH     R1,[R6, #+24]
   \   00000144   0x.... 0x....      ADR.W    R0,?_2
   \   00000148   0x.... 0x....      BL       uprintf
    281                  break;
   \   0000014C   0xBD7F             POP      {R0-R6,PC}
    282                  
    283                  //读数据指示
    284              case    DATA_CARD_DIS: 
    285                  i=0;
    286                  while(i < 4)
   \                     ??comm_para_flow_5: (+1)
   \   0000014E   0x2D04             CMP      R5,#+4
   \   00000150   0xD254             BCS.N    ??comm_para_flow_16
    287                  {
    288                      uprintf("%8d",i); 
   \   00000152   0x4629             MOV      R1,R5
   \   00000154   0x....             ADR.N    R0,??DataTable11  ;; "%8d"
   \   00000156   0x.... 0x....      BL       uprintf
    289                      i++;
   \   0000015A   0x1C6D             ADDS     R5,R5,#+1
   \   0000015C   0xE7F7             B.N      ??comm_para_flow_5
    290                  }
    291                  break;
    292                  
    293                  //读数据指示结束
    294              case    DATA_CARD_FIN: 
    295                  i=0;
    296                  while(i < 4)
   \                     ??comm_para_flow_6: (+1)
   \   0000015E   0x2D04             CMP      R5,#+4
   \   00000160   0xD24C             BCS.N    ??comm_para_flow_16
    297                  {
    298                      uprintf("    good");  
   \   00000162   0x.... 0x....      ADR.W    R0,?_4
   \   00000166   0x.... 0x....      BL       uprintf
    299                      uprintf("         ");  
   \   0000016A   0x.... 0x....      ADR.W    R0,?_5
   \   0000016E   0x.... 0x....      BL       uprintf
    300                      i++;
   \   00000172   0x1C6D             ADDS     R5,R5,#+1
   \   00000174   0xE7F3             B.N      ??comm_para_flow_6
    301                  }
    302                  break;
    303                  
    304                  //数据清零
    305              case    CLEAR_ALL: 
    306                  Ctrl.Para.dat.sRecNumMgr.Current = 0;
   \                     ??comm_para_flow_8: (+1)
   \   00000176   0x....             LDR.N    R5,??DataTable11_1
   \   00000178   0x1D2E             ADDS     R6,R5,#+4
   \   0000017A   0x2000             MOVS     R0,#+0
   \   0000017C   0x6030             STR      R0,[R6, #+0]
    307                  Ctrl.Para.dat.sRecNumMgr.GrsRead = 0;
   \   0000017E   0x60B0             STR      R0,[R6, #+8]
    308                  Ctrl.Para.dat.sRecNumMgr.IcRead  = 0;
   \   00000180   0x6070             STR      R0,[R6, #+4]
    309                  
    310                  FRAM_StoreRecNumMgr((stcRecNumMgr *)&Ctrl.Para.dat.sRecNumMgr);
   \   00000182   0x4630             MOV      R0,R6
   \   00000184   0x.... 0x....      BL       FRAM_StoreRecNumMgr
    311                  
    312                  uprintf("CALL");  
   \   00000188   0x.... 0x....      ADR.W    R0,?_6
   \   0000018C   0x.... 0x....      BL       uprintf
    313                  
    314                  break;
   \   00000190   0xBD7F             POP      {R0-R6,PC}
    315                  
    316                  //装置复位，先应答消息，再
    317              case    RST_SYS:
    318                  
    319                  //参数设置，数据原路返回
    320                  CSNC_SendData(  Ctrl.Dtu.pch,                      //DTU 的PCH：串口号，收发控制等底层信息
    321                                  Ctrl.Dtu.RxCtrl.DestAddr,          //源地址，
    322                                  Ctrl.Dtu.RxCtrl.SourceAddr,        //目标地址
    323                                  Ctrl.Dtu.RxCtrl.FramNum,           //帧序号 
    324                                  Ctrl.Dtu.RxCtrl.FrameCode,         //命令字
    325                                  Ctrl.Dtu.Rd.Buf,                   //数据区
    326                                  Ctrl.Dtu.RxCtrl.Len                //发送长度
    327                                );
   \                     ??comm_para_flow_9: (+1)
   \   00000192   0x....             LDR.N    R5,??DataTable11_1
   \   00000194   0xF205 0x4021      ADDW     R0,R5,#+1057
   \   00000198   0x78C1             LDRB     R1,[R0, #+3]
   \   0000019A   0x9102             STR      R1,[SP, #+8]
   \   0000019C   0xF205 0x21E1      ADDW     R1,R5,#+737
   \   000001A0   0x9101             STR      R1,[SP, #+4]
   \   000001A2   0x7901             LDRB     R1,[R0, #+4]
   \   000001A4   0x9100             STR      R1,[SP, #+0]
   \   000001A6   0x7883             LDRB     R3,[R0, #+2]
   \   000001A8   0x7842             LDRB     R2,[R0, #+1]
   \   000001AA   0x7801             LDRB     R1,[R0, #+0]
   \   000001AC   0x69C0             LDR      R0,[R0, #+28]
   \   000001AE   0x.... 0x....      BL       CSNC_SendData
    328                  
    329                  //重启复位
    330                  void Boot( void );
    331                  Boot();
   \   000001B2   0x.... 0x....      BL       Boot
    332          //        void JMP_Boot(u32 appAddr);
    333          //        JMP_Boot(STM32_FLASH_BASE);
    334                  //Restart();                                          //重启系统
    335                  break;
   \   000001B6   0xBD7F             POP      {R0-R6,PC}
    336                  
    337                  //设置斜率
    338              case    CALC_PARA: 
    339                  //斜率具有镭计的效果
    340          //        Ctrl.SOilPara.Slope = (Ctrl.SOilPara.Slope  * sDtu->Rd.Slope)/10000;
    341          //        
    342          //        //0.1~2
    343          //        if(Ctrl.SOilPara.Slope >20000 || Ctrl.SOilPara.Slope < 1000)
    344          //            Ctrl.SOilPara.Slope = 10000;
    345          //        
    346          //        FRAM_StoreOilPara((StrOilPara *)&Ctrl.SOilPara);   //存数据。关键数据存储时保护
    347          //        
    348          //        uprintf("%d",Ctrl.SOilPara.Slope);         //立即显示设定值 
    349                  break;
    350                  
    351                  /***********************************************
    352                  * 描述： 设置油箱模型。
    353                  *   IC 卡模块插入IC卡后，IC卡主动应答模型。  
    354                  *   后续每200ms发送数据，序号从0开始累加。
    355                  数据发送完成后，序号为0xffffffff。
    356                  */    
    357                  //设置斜率
    358              case    SYS_RUN_PARA: 
    359                  //存运行参数，存储时间，数据格式等信息
    360                  //FRAM_StoreRunPara((stcRunPara *)&Ctrl.sRunPara);   //存数据。关键数据存储时保护
    361                  bittmp =  (uint8)(0x01 << ( ( (uint8 *)&Ctrl.Para.dat.sRunPara.StoreType ) - (uint8 *)&Ctrl.Para.dat.sRunPara));    //数据格式更改
    362                  
    363                  if((sDtu->Rd.sRunPara.SetBitFlg & bittmp) == bittmp )
   \                     ??comm_para_flow_7: (+1)
   \   000001B8   0x....             LDR.N    R5,??DataTable11_1
   \   000001BA   0xF105 0x0649      ADD      R6,R5,#+73
   \   000001BE   0x79E0             LDRB     R0,[R4, #+7]
   \   000001C0   0x0680             LSLS     R0,R0,#+26
   \   000001C2   0xD503             BPL.N    ??comm_para_flow_17
    364                  {
    365                      Ctrl.Para.dat.sRunPara.StoreType    = sDtu->Rd.sRunPara.StoreType;
   \   000001C4   0x7960             LDRB     R0,[R4, #+5]
   \   000001C6   0x7030             STRB     R0,[R6, #+0]
    366                      Ctrl.Para.dat.sRunPara.StoreTypeBak = sDtu->Rd.sRunPara.StoreTypeBak;
   \   000001C8   0x79A0             LDRB     R0,[R4, #+6]
   \   000001CA   0x7070             STRB     R0,[R6, #+1]
    367                  }
    368                
    369                  FRAM_StoreRunPara((stcRunPara *)&Ctrl.Para.dat.sRunPara);   //存数据。关键数据存储时保护
   \                     ??comm_para_flow_17: (+1)
   \   000001CC   0xF105 0x0044      ADD      R0,R5,#+68
   \   000001D0   0x.... 0x....      BL       FRAM_StoreRunPara
    370                  uprintf("rt-%d",    Ctrl.Para.dat.sRunPara.StoreType);      //立即显示设定值 （0x02 ）数据新版
   \   000001D4   0x7831             LDRB     R1,[R6, #+0]
   \   000001D6   0x.... 0x....      ADR.W    R0,?_7
   \   000001DA   0x.... 0x....      BL       uprintf
    371          
    372                  break;
   \   000001DE   0xBD7F             POP      {R0-R6,PC}
    373                  
    374              case    MODEL_CARD: 
    375                  //模型数据接收序号
    376          //        memcpy((uint8  *)&modelrecvnum,(uint8 *)&sDtu->Rd.Buf[0],sizeof(modelrecvnum));
    377          //        
    378          //        if( modelrecvnum == 0 )                 //开始    
    379          //            modelstoreaddr = 0;
    380          //        
    381          //        if(sDtu->RxCtrl.Len < sizeof(modelrecvnum))
    382          //            break;
    383          //        //保存接收到的数据
    384          //        WriteFM24CL64(   OIL_BOX_MODEL_ADDR+modelstoreaddr,
    385          //                      (uint8 *)&sDtu->Rd.Buf[sizeof(modelrecvnum)], 
    386          //                      sDtu->RxCtrl.Len - sizeof(modelrecvnum));
    387          //        //存地址累加
    388          //        modelstoreaddr += (sDtu->RxCtrl.Len - sizeof(modelrecvnum));
    389          //        
    390          //        //指示操作
    391          //        //uprintf("   ...");
    392          //        if(modelrecvnum == 0xffffffff)  //结束，指示
    393          //        {
    394          //            uprintf("");
    395          //            uprintf("boX");	
    396          //            uprintf("boX");		
    397          //            GetOilPara();
    398          //            
    399          //            //与单独设置油量模型兼容，写卡成功后，应将单设模型置为无效,并保存。，再重新调用初始化函数
    400          //            l_sCalcModel.valid = 0;
    401          //            FRAM_StoreCalcModel(&Ctrl.sCalcModel);             //数据油量存储
    402          //            
    403          //            GetOilPara();                                       //重新取计算参数
    404          //        }else{
    405          //            uprintf("o..%2d",modelrecvnum);
    406          //        }
    407          //        
    408                  SetDispNow();               //马上显示
   \                     ??comm_para_flow_1: (+1)
   \   000001E0   0x.... 0x....      BL       SetDispNow
    409                  
    410                  
    411          //        if(sDtu->pch->PortNbr == 2)
    412          //        {
    413          //            osal_start_timerEx( OS_TASK_ID_TMR, 
    414          //                               OS_EVT_TMR_OTR, 
    415          //                               OS_TICKS_PER_SEC*10 );          //统计装置和无线发送模块定时器  10s
    416          //        }
    417          //        
    418          //        if(sDtu->pch->PortNbr == 3)
    419          //        {
    420          //            osal_start_timerEx( OS_TASK_ID_TMR, 
    421          //                               OS_EVT_TMR_DTU, 
    422          //                               OS_TICKS_PER_SEC*10 );          //统计装置和无线发送模块定时器  10s
    423          //        }
    424                  break;
   \   000001E4   0xBD7F             POP      {R0-R6,PC}
    425                  
    426                  //数据
    427              case    DATA_CARD: 
    428          //        
    429          //        memcpy((uint8 *)&tmp32,sDtu->Rd.Buf,sizeof(tmp32));     //请求流水号
    430          //        if(sDtu->RxCtrl.SourceAddr == SLAVE_ADDR_DTU)           //无线通道请求的
    431          //        {
    432          //            if(Ctrl.Para.dat.sRecNumMgr.GrsRead  > tmp32){
    433          //                Ctrl.Para.dat.sRecNumMgr.GrsRead = tmp32;               //指定位置取数据
    434          //            }
    435          //            
    436          //            comm_record_send_one(sDtu,addrnum);                 
    437          //            
    438          //            FRAM_StoreRecNumMgr((stcRecNumMgr *)&Ctrl.Para.dat.sRecNumMgr);         //保存记录号
    439          //            
    440          //            Ctrl.Para.dat.sRecNumMgr.GrsRead++;
    441          //            
    442          //        }else if(sDtu->RxCtrl.SourceAddr == SLAVE_ADDR_OTR)     //IC卡
    443          //        {
    444          //            if(Ctrl.Para.dat.sRecNumMgr.IcRead  > tmp32){
    445          //                Ctrl.Para.dat.sRecNumMgr.IcRead = tmp32;                //指定位置取数据
    446          //            }
    447          //            
    448          //            comm_record_send_one(sDtu,addrnum);                 //指定位置取数据   
    449          //            
    450          //            FRAM_StoreRecNumMgr((stcRecNumMgr *)&Ctrl.Para.dat.sRecNumMgr); //保存记录号
    451          //            
    452          //            Ctrl.Para.dat.sRecNumMgr.IcRead++;           
    453          //            
    454          //            //快速启动定时器
    455          //            if(Ctrl.Para.dat.sRecNumMgr.IcRead < Ctrl.Para.dat.sRecNumMgr.Current ){
    456          //                osal_start_timerRl( OS_TASK_ID_TMR, 
    457          //                                   OS_EVT_TMR_OTR, 
    458          //                                   OS_TICKS_PER_SEC/2 );          //统计装置和无线发送模块定时器  10s
    459          //            }
    460          //            
    461          //        }
    462                  break;
    463                  
    464              case    RUN_MODEL_PARA:
    465                  
    466                  uprintf("SET--");         //立即显示设定值 
   \                     ??comm_para_flow_10: (+1)
   \   000001E6   0x.... 0x....      ADR.W    R0,?_8
   \   000001EA   0x.... 0x....      BL       uprintf
    467                  SetDispNow();
   \   000001EE   0x.... 0x....      BL       SetDispNow
    468                  
    469                  memcpy((uint8 *)&tmp32, &sDtu->Rd.Buf[0],sizeof(tmp32));        //取帧序号
   \   000001F2   0x2204             MOVS     R2,#+4
   \   000001F4   0x4621             MOV      R1,R4
   \   000001F6   0xA803             ADD      R0,SP,#+12
   \   000001F8   0x.... 0x....      BL       __aeabi_memcpy
    470          //        if(tmp32 < (1 + sizeof(l_sCalcModel)/128 ))                     //序号有效
    471          //        {
    472          //            p = (uint8 *)&l_sCalcModel;
    473          //            memcpy((uint8 *)(  p + 128*tmp32),
    474          //                               (uint8 *)&sDtu->Rd.Buf[4],
    475          //                               sDtu->RxCtrl.Len-4);
    476          //            
    477          //            if(tmp32 == sizeof(l_sCalcModel)/128)               //接收完成
    478          //            {
    479          //                crc16 = GetCrc16Check((uint8 *)&l_sCalcModel,sizeof(l_sCalcModel)-2);   //计算校验
    480          //                if(crc16 == l_sCalcModel.CrcCheck)              //模型校验通过，赋值给计算使用
    481          //                {
    482          //                    l_sCalcModel.valid = 1;                     //置模型有效位
    483          //                    
    484          //                    l_sCalcModel.CrcCheck = GetCrc16Check((uint8 *)&l_sCalcModel,sizeof(l_sCalcModel)-2); 
    485          //                    
    486          //                    memcpy((uint8 *)&Ctrl.sCalcModel,(uint8 *)&l_sCalcModel,sizeof(l_sCalcModel)); //赋值给正在使用的模型。
    487          //                    
    488          //                    FRAM_StoreCalcModel(&Ctrl.sCalcModel);
    489          //                }
    490          //                
    491          //                //设置成功后，指示
    492          //                uprintf("SET-%d",l_sCalcModel.ModelNum);         //立即显示设定值 
    493          //                SetDispNow();
    494          //                tmp32 = 1000000;
    495          //                while(tmp32--);
    496          //                uprintf("SET-%d",l_sCalcModel.ModelNum);         //立即显示设定值 
    497          //                SetDispNow();
    498          //            }
    499          //        }
    500                  
    501                  break;
    502                  
    503              default:
    504                  break;
    505          
    506              }
    507          }
   \                     ??comm_para_flow_16: (+1)
   \   000001FC   0xBD7F             POP      {R0-R6,PC}       ;; return
    508          
    509          /*******************************************************************************
    510          * 名    称： comm_record_send_one
    511          * 功    能： 发送one条数据记录
    512          * 入口参数： 无线设备数据结构
    513          * 出口参数： 无
    514          * 作　 　者： redmorningcn.
    515          * 创建日期： 2017-05-19
    516          * 修    改：
    517          * 修改日期：
    518          * 备    注： 任务创建函数需要在app.h文件中声明
    519          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    520          uint8    comm_record_send_one(StrDevDtu * sDtu,uint8    addrnum)
    521          {
   \                     comm_record_send_one: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   \   00000004   0x4604             MOV      R4,R0
    522              //记录号为0，还未发送数据。不做通讯状态判断
    523              if( Ctrl.Para.dat.sRecNumMgr.Current == 0 )                                   
   \   00000006   0x....             LDR.N    R5,??DataTable11_1
   \   00000008   0x6868             LDR      R0,[R5, #+4]
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD101             BNE.N    ??comm_record_send_one_0
    524              {
    525                  return 0;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xE02C             B.N      ??comm_record_send_one_1
    526              }
   \                     ??comm_record_send_one_0: (+1)
   \   00000012   0xEB04 0x01C1      ADD      R1,R4,R1, LSL #+3
   \   00000016   0xF501 0x76A8      ADD      R6,R1,#+336
   \   0000001A   0x7831             LDRB     R1,[R6, #+0]
   \   0000001C   0x29CA             CMP      R1,#+202
   \   0000001E   0xD116             BNE.N    ??comm_record_send_one_2
    527              /***********************************************
    528              * 描述： 记录号合理性判断。已发数据<当前数据 发送数据
    529              * 
    530              */ 
    531              if(sDtu->ConnCtrl[addrnum].SlaveAddr == SLAVE_ADDR_DTU)
    532              {
    533                  if(Ctrl.Para.dat.sRecNumMgr.Current <= Ctrl.Para.dat.sRecNumMgr.GrsRead )               //已发送记录号比当前记录号大，进行异常处理
   \   00000020   0x68E9             LDR      R1,[R5, #+12]
   \   00000022   0x4281             CMP      R1,R0
   \   00000024   0xD308             BCC.N    ??comm_record_send_one_3
    534                  {
    535                      Ctrl.Para.dat.sRecNumMgr.GrsRead = 0;
   \   00000026   0x2100             MOVS     R1,#+0
   \   00000028   0x60E9             STR      R1,[R5, #+12]
    536                      if(Ctrl.Para.dat.sRecNumMgr.Current)
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD001             BEQ.N    ??comm_record_send_one_4
    537                          Ctrl.Para.dat.sRecNumMgr.GrsRead = Ctrl.Para.dat.sRecNumMgr.Current - 1;        //最后有效记录赋值     
   \   0000002E   0x1E40             SUBS     R0,R0,#+1
   \   00000030   0x60E8             STR      R0,[R5, #+12]
    538                      
    539                      FRAM_StoreRecNumMgr((stcRecNumMgr *)&Ctrl.Para.dat.sRecNumMgr);             //保存记录号
   \                     ??comm_record_send_one_4: (+1)
   \   00000032   0x1D28             ADDS     R0,R5,#+4
   \   00000034   0x.... 0x....      BL       FRAM_StoreRecNumMgr
    540                  }
    541                  
    542                  //sDtu->ConnCtrl[addrnum].SendFramNum++;                                //发送序号由接收控制
    543                  
    544                  /***********************************************
    545                  * 描述： 数据记录准备,根据记录号取数据记录。
    546                  * 
    547                  */ 
    548                  ReadFlshRec((stcFlshRec *)&sDtu->Wr.sRec,
    549                              Ctrl.Para.dat.sRecNumMgr.GrsRead);
   \                     ??comm_record_send_one_3: (+1)
   \   00000038   0x68E9             LDR      R1,[R5, #+12]
   \   0000003A   0xF104 0x00A0      ADD      R0,R4,#+160
   \   0000003E   0x.... 0x....      BL       ReadFlshRec
    550                  
    551                  //重新给定时器给初值。osal_start_timerRl可以自动赋值，
    552                  osal_start_timerRl( OS_TASK_ID_TMR, 
    553                                     OS_EVT_TMR_DTU, 
    554                                     OS_TICKS_PER_SEC*10 );  //统计装置和无线发送模块定时器  10s
   \   00000042   0xF242 0x7210      MOVW     R2,#+10000
   \   00000046   0x2102             MOVS     R1,#+2
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0x.... 0x....      BL       osal_start_timerRl
    555              }
    556              
    557          //    if(sDtu->ConnCtrl[addrnum].SlaveAddr == SLAVE_ADDR_OTR)
    558          //    {
    559          //        if(Ctrl.Para.dat.sRecNumMgr.Current <= Ctrl.Para.dat.sRecNumMgr.IcRead )                //已发送记录号比当前记录号大，进行异常处理
    560          //        {
    561          //            Ctrl.Para.dat.sRecNumMgr.IcRead = 0;
    562          //            if(Ctrl.Para.dat.sRecNumMgr.Current)
    563          //                Ctrl.Para.dat.sRecNumMgr.IcRead = Ctrl.Para.dat.sRecNumMgr.Current - 1;         //最后有效记录赋值     
    564          //            
    565          //            Ctrl.Otr.ConnCtrl[addrnum].SendFramNum++;
    566          //            FRAM_StoreRecNumMgr((stcRecNumMgr *)&Ctrl.Para.dat.sRecNumMgr);             //保存记录号
    567          //        }
    568          //        
    569          //        /***********************************************
    570          //        * 描述： 数据记录准备,根据记录号取数据记录。
    571          //        * 
    572          //        */ 
    573          //        ReadFlshRec((stcFlshRec *)&sDtu->Wr.sRec,
    574          //                    Ctrl.Para.dat.sRecNumMgr.IcRead);
    575          //        
    576          //        osal_start_timerRl( OS_TASK_ID_TMR, 
    577          //                           OS_EVT_TMR_OTR, 
    578          //                           OS_TICKS_PER_SEC*10 );               //统计装置和无线发送模块定时器  10s
    579          //    }
    580              
    581              uint8   framecode = 0x02;
    582          
    583          //    //超时值发送SLAVE_ADDR_DTU 的数据
    584          //    CSNC_SendData(sDtu->pch,                                    //DTU 的PCH：串口号，收发控制等底层信息
    585          //                  sDtu->ConnCtrl[addrnum].MasterAddr,           //源地址，
    586          //                  sDtu->ConnCtrl[addrnum].SlaveAddr,            //目标地址
    587          //                  sDtu->ConnCtrl[addrnum].SendFramNum,          //帧序号 ，，在接收中累加
    588          //                  framecode,                                    //命令字
    589          //                  (uint8 *)&sDtu->Wr.sRec,                      //数据区
    590          //                  sizeof(sDtu->Wr.sRec)                        //发送长度
    591          //                      );
    592              
    593                  CSNC_SendData(sDtu->pch,                                    //DTU 的PCH：串口号，收发控制等底层信息
    594                                sDtu->ConnCtrl[addrnum].MasterAddr,           //源地址，
    595                                sDtu->ConnCtrl[addrnum].SlaveAddr,            //目标地址
    596                                sDtu->ConnCtrl[addrnum].SendFramNum,          //帧序号 ，，在接收中累加
    597                                framecode,                                    //命令字
    598                                (uint8 *)&sDtu->Wr.sRec,                      //数据区
    599                                sizeof(sDtu->Wr.sRec)                        //发送长度
    600                                );
   \                     ??comm_record_send_one_2: (+1)
   \   0000004E   0x2080             MOVS     R0,#+128
   \   00000050   0x9002             STR      R0,[SP, #+8]
   \   00000052   0xF104 0x00A0      ADD      R0,R4,#+160
   \   00000056   0x9001             STR      R0,[SP, #+4]
   \   00000058   0x2002             MOVS     R0,#+2
   \   0000005A   0x9000             STR      R0,[SP, #+0]
   \   0000005C   0x78B3             LDRB     R3,[R6, #+2]
   \   0000005E   0x7832             LDRB     R2,[R6, #+0]
   \   00000060   0x7871             LDRB     R1,[R6, #+1]
   \   00000062   0xF8D4 0x015C      LDR      R0,[R4, #+348]
   \   00000066   0x.... 0x....      BL       CSNC_SendData
    601          
    602          
    603              return 1;
   \   0000006A   0x2001             MOVS     R0,#+1
   \                     ??comm_record_send_one_1: (+1)
   \   0000006C   0xB004             ADD      SP,SP,#+16
   \   0000006E   0xBD70             POP      {R4-R6,PC}       ;; return
    604          }
    605          
    606          
    607          /*******************************************************************************
    608          * 名    称： comm_record_send
    609          * 功    能： 通讯数据传输
    610          *            先查询已发送记录，然后发送该记录。记录号加1，帧号加1。起始记录号
    611          从1开始。  
    612          *              （通过帧号判断通讯是否结束正确）
    613          * 入口参数： 无线设备数据结构
    614          * 出口参数： 无
    615          * 作　 　者： redmorningcn.
    616          * 创建日期： 2017-05-19
    617          * 修    改：
    618          * 修改日期：
    619          * 备    注： 任务创建函数需要在app.h文件中声明
    620          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    621          void    comm_record_send(StrDevDtu * sDtu,uint8 addrnum)
    622          {
   \                     comm_record_send: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0xEB04 0x00C5      ADD      R0,R4,R5, LSL #+3
   \   0000000A   0xF890 0x1152      LDRB     R1,[R0, #+338]
   \   0000000E   0xF894 0x2142      LDRB     R2,[R4, #+322]
   \   00000012   0x428A             CMP      R2,R1
   \   00000014   0xD123             BNE.N    ??comm_record_send_0
    623              /***********************************************
    624              * 描述： 发送和接收的记录号相符，发送流水号加1
    625              *       再根据数据量，发送数据。
    626              * 
    627              */      
    628              
    629              if(sDtu->RxCtrl.FramNum == sDtu->ConnCtrl[addrnum].SendFramNum){
    630                  sDtu->ConnCtrl[addrnum].SendFramNum++;                  //数据正确，序号加1
   \   00000016   0x1C49             ADDS     R1,R1,#+1
   \   00000018   0xF880 0x1152      STRB     R1,[R0, #+338]
    631                  Ctrl.Para.dat.sRecNumMgr.GrsRead++;
   \   0000001C   0x....             LDR.N    R6,??DataTable11_1
   \   0000001E   0x68F0             LDR      R0,[R6, #+12]
   \   00000020   0x1C40             ADDS     R0,R0,#+1
   \   00000022   0x60F0             STR      R0,[R6, #+12]
    632                  
    633                  CPU_SR  cpu_sr;
    634                  CPU_CRITICAL_ENTER() ;
   \   00000024   0x.... 0x....      BL       CPU_SR_Save
   \   00000028   0x4607             MOV      R7,R0
   \   0000002A   0x.... 0x....      BL       CPU_IntDisMeasStart
    635                  FRAM_StoreRecNumMgr((stcRecNumMgr *)&Ctrl.Para.dat.sRecNumMgr); //保存记录号
   \   0000002E   0x1D30             ADDS     R0,R6,#+4
   \   00000030   0x.... 0x....      BL       FRAM_StoreRecNumMgr
    636                  CPU_CRITICAL_EXIT() ;
   \   00000034   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   00000038   0x4638             MOV      R0,R7
   \   0000003A   0x.... 0x....      BL       CPU_SR_Restore
    637                  
    638                  if(Ctrl.Para.dat.sRecNumMgr.GrsRead < Ctrl.Para.dat.sRecNumMgr.Current) //数据还未发送完成。收到数据及发送。
   \   0000003E   0x68F0             LDR      R0,[R6, #+12]
   \   00000040   0x6871             LDR      R1,[R6, #+4]
   \   00000042   0x4288             CMP      R0,R1
   \   00000044   0xD20B             BCS.N    ??comm_record_send_0
    639                  {
    640                      comm_record_send_one(sDtu,addrnum);                 //发送数据记录。
   \   00000046   0x4629             MOV      R1,R5
   \   00000048   0x4620             MOV      R0,R4
   \   0000004A   0x.... 0x....      BL       comm_record_send_one
    641                      //重新启动超时定时器
    642                      osal_start_timerRl( OS_TASK_ID_TMR, 
    643                                         OS_EVT_TMR_DTU, 
    644                                         OS_TICKS_PER_SEC*10 );          //统计装置和无线发送模块定时器  10s
   \   0000004E   0xF242 0x7210      MOVW     R2,#+10000
   \   00000052   0x2102             MOVS     R1,#+2
   \   00000054   0x2000             MOVS     R0,#+0
   \   00000056   0xE8BD 0x40F8      POP      {R3-R7,LR}
   \   0000005A   0x.... 0x....      B.W      osal_start_timerRl
    645                  }
    646                  
    647              }
    648          }
   \                     ??comm_record_send_0: (+1)
   \   0000005E   0xBDF1             POP      {R0,R4-R7,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   0x25 0x38          DC8      "%8d"
   \              0x64 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_1:
   \   00000000   0x........         DC32     Ctrl

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x25 0x38          DC8 "%8d"
   \              0x64 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x74 0x65          DC8 "test"
   \              0x73 0x74    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x25 0x30          DC8 "%02d.%02d"
   \              0x32 0x64    
   \              0x2E 0x25    
   \              0x30 0x32    
   \              0x64 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x25 0x34          DC8 "%4d.%4d"
   \              0x64 0x2E    
   \              0x25 0x34    
   \              0x64 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_4:
   \   00000000   0x20 0x20          DC8 "    good"
   \              0x20 0x20    
   \              0x67 0x6F    
   \              0x6F 0x64    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_5:
   \   00000000   0x20 0x20          DC8 "         "
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_6:
   \   00000000   0x43 0x41          DC8 "CALL"
   \              0x4C 0x4C    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_7:
   \   00000000   0x72 0x74          DC8 "rt-%d"
   \              0x2D 0x25    
   \              0x64 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_8:
   \   00000000   0x53 0x45          DC8 "SET--"
   \              0x54 0x2D    
   \              0x2D 0x00    
   \   00000006   0x00 0x00          DC8 0, 0
    649          
    650          
    651          /*******************************************************************************
    652          * 				end of file
    653          *******************************************************************************/
    654          #endif
    655          
    656          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   comm_para_flow
        32   -> BSP_DispClrAll
        32   -> Boot
        32   -> CSNC_SendData
        32   -> FRAM_StoreProductInfo
        32   -> FRAM_StoreRecNumMgr
        32   -> FRAM_StoreRunPara
        32   -> ReadTime
        32   -> SetDispNow
        32   -> StartAirMeasure
        32   -> WriteTime
        32   -> __aeabi_memcpy
        32   -> uprintf
      24   comm_record_send
        24   -> CPU_IntDisMeasStart
        24   -> CPU_IntDisMeasStop
        24   -> CPU_SR_Restore
        24   -> CPU_SR_Save
        24   -> FRAM_StoreRecNumMgr
        24   -> comm_record_send_one
         0   -> osal_start_timerRl
      32   comm_record_send_one
        32   -> CSNC_SendData
        32   -> FRAM_StoreRecNumMgr
        32   -> ReadFlshRec
        32   -> osal_start_timerRl


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable11
       4  ??DataTable11_1
       8  ?_0
      12  ?_1
       8  ?_2
       4  ?_3
      12  ?_4
      12  ?_5
       8  ?_6
       8  ?_7
       8  ?_8
     510  comm_para_flow
      96  comm_record_send
     112  comm_record_send_one

 
   4 bytes in section .rodata
 802 bytes in section .text
 
 802 bytes of CODE  memory
   4 bytes of CONST memory

Errors: none
Warnings: none

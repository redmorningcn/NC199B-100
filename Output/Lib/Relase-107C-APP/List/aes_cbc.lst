###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       26/Dec/2017  20:53:38
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  F:\iar\NC199B-100\Library\Source\APP\AES\aes_cbc.c
#    Command line =  
#        F:\iar\NC199B-100\Library\Source\APP\AES\aes_cbc.c -D
#        USE_STDPERIPH_DRIVER -D STM32F10X_CL -D RELEASE -D IMAGE_A -D
#        STM32F103RC -D STM32_FLASH_SIZE=256 -D HSE_VALUE=25000000 -lCN
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Relase-107C-APP\List\
#        -o
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Relase-107C-APP\Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        F:\iar\NC199B-100\Library\Project\IAR\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\User\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\AES\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Config\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\OS\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\User\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Source\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Port\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\OS\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Config\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Protocol\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Iap\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Driver\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\IAR\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\uCOS-III\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\CMSIS\CM3\CoreSupport\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\CMSIS\CM3\DeviceSupport\ST\STM32F10x\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\STM32F10x_StdPeriph_Driver\inc\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-CPU\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-CPU\ARM-Cortex-M3\IAR\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-LIB\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\OSAL\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\OSAL\OS\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\OS\uCOS-III\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\Source\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\Source\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\FatFs\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\FatFs\option\ -Om
#        --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Relase-107C-APP\List\aes_cbc.lst
#    Object file  =  
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Relase-107C-APP\Obj\aes_cbc.o
#
###############################################################################

F:\iar\NC199B-100\Library\Source\APP\AES\aes_cbc.c
      1          /** crypto/aes/aes_cbc.c -*- mode:C; c-file-style: "eay" -*- */
      2          /** ====================================================================
      3           * Copyright (c) 1998-2002 The OpenSSL Project.  All rights reserved.
      4           *
      5           * Redistribution and use in source and binary forms, with or without
      6           * modification, are permitted provided that the following conditions
      7           * are met:
      8           *
      9           * 1. Redistributions of source code must retain the above copyright
     10           *    notice, this list of conditions and the following disclaimer. 
     11           *
     12           * 2. Redistributions in binary form must reproduce the above copyright
     13           *    notice, this list of conditions and the following disclaimer in
     14           *    the documentation and/or other materials provided with the
     15           *    distribution.
     16           *
     17           * 3. All advertising materials mentioning features or use of this
     18           *    software must display the following acknowledgment:
     19           *    "This product includes software developed by the OpenSSL Project
     20           *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
     21           *
     22           * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
     23           *    endorse or promote products derived from this software without
     24           *    prior written permission. For written permission, please contact
     25           *    openssl-core@openssl.org.
     26           *
     27           * 5. Products derived from this software may not be called "OpenSSL"
     28           *    nor may "OpenSSL" appear in their names without prior written
     29           *    permission of the OpenSSL Project.
     30           *
     31           * 6. Redistributions of any form whatsoever must retain the following
     32           *    acknowledgment:
     33           *    "This product includes software developed by the OpenSSL Project
     34           *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
     35           *
     36           * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
     37           * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     38           * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
     39           * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
     40           * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
     41           * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
     42           * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
     43           * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
     44           * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
     45           * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
     46           * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
     47           * OF THE POSSIBILITY OF SUCH DAMAGE.
     48           * ====================================================================
     49           *
     50           */
     51          
     52          #ifndef AES_DEBUG
     53          # ifndef NDEBUG
     54          #  define NDEBUG
     55          # endif
     56          #endif
     57          #include <assert.h>
     58          
     59          #include <aes.h>
     60          
     61          #if !defined(OPENSSL_FIPS_AES_ASM)

   \                                 In section .text, align 2, keep-with-next
     62          void AES_cbc_encrypt(const unsigned char *in, unsigned char *out,
     63          		     const unsigned long length, const AES_KEY *key,
     64          		     unsigned char *ivec, const int enc) {
   \                     AES_cbc_encrypt: (+1)
   \   00000000   0xE92D 0x43F0      PUSH     {R4-R9,LR}
   \   00000004   0xB085             SUB      SP,SP,#+20
   \   00000006   0x4607             MOV      R7,R0
   \   00000008   0x460D             MOV      R5,R1
   \   0000000A   0x4616             MOV      R6,R2
   \   0000000C   0x4698             MOV      R8,R3
     65          
     66          	unsigned long n;
     67          	unsigned long len = length;
   \   0000000E   0x9C0C             LDR      R4,[SP, #+48]
     68          	unsigned char tmp[AES_BLOCK_SIZE];
     69          	const unsigned char *iv = ivec;
   \   00000010   0x46A1             MOV      R9,R4
     70          
     71          	assert(in && out && key && ivec);
     72          	assert((AES_ENCRYPT == enc)||(AES_DECRYPT == enc));
     73          
     74          	if (AES_ENCRYPT == enc) {
   \   00000012   0x980D             LDR      R0,[SP, #+52]
   \   00000014   0x2801             CMP      R0,#+1
   \   00000016   0xD013             BEQ.N    ??AES_cbc_encrypt_0
     75          		while (len >= AES_BLOCK_SIZE) {
     76          			for(n=0; n < AES_BLOCK_SIZE; ++n)
     77          				out[n] = in[n] ^ iv[n];
     78          			AES_encrypt(out, out, key);
     79          			iv = out;
     80          			len -= AES_BLOCK_SIZE;
     81          			in += AES_BLOCK_SIZE;
     82          			out += AES_BLOCK_SIZE;
     83          		}
     84          		if (len) {
     85          			for(n=0; n < len; ++n)
     86          				out[n] = in[n] ^ iv[n];
     87          			for(n=len; n < AES_BLOCK_SIZE; ++n)
     88          				out[n] = iv[n];
     89          			AES_encrypt(out, out, key);
     90          			iv = out;
     91          		}
     92          		memcpy(ivec,iv,AES_BLOCK_SIZE);
     93          	} else if (in != out) {
   \   00000018   0x42AF             CMP      R7,R5
   \   0000001A   0xD072             BEQ.N    ??AES_cbc_encrypt_1
   \   0000001C   0xE040             B.N      ??AES_cbc_encrypt_2
   \                     ??AES_cbc_encrypt_3: (+1)
   \   0000001E   0x5DC1             LDRB     R1,[R0, R7]
   \   00000020   0xF810 0x2009      LDRB     R2,[R0, R9]
   \   00000024   0x4051             EORS     R1,R2,R1
   \   00000026   0x5541             STRB     R1,[R0, R5]
   \   00000028   0x1C40             ADDS     R0,R0,#+1
   \                     ??AES_cbc_encrypt_4: (+1)
   \   0000002A   0x2810             CMP      R0,#+16
   \   0000002C   0xD3F7             BCC.N    ??AES_cbc_encrypt_3
   \   0000002E   0x4642             MOV      R2,R8
   \   00000030   0x4629             MOV      R1,R5
   \   00000032   0x4628             MOV      R0,R5
   \   00000034   0x.... 0x....      BL       AES_encrypt
   \   00000038   0x46A9             MOV      R9,R5
   \   0000003A   0x3E10             SUBS     R6,R6,#+16
   \   0000003C   0x3710             ADDS     R7,R7,#+16
   \   0000003E   0x3510             ADDS     R5,R5,#+16
   \                     ??AES_cbc_encrypt_0: (+1)
   \   00000040   0x2E10             CMP      R6,#+16
   \   00000042   0xD301             BCC.N    ??AES_cbc_encrypt_5
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0xE7F0             B.N      ??AES_cbc_encrypt_4
   \                     ??AES_cbc_encrypt_5: (+1)
   \   00000048   0x2E00             CMP      R6,#+0
   \   0000004A   0xD017             BEQ.N    ??AES_cbc_encrypt_6
   \   0000004C   0x2000             MOVS     R0,#+0
   \   0000004E   0xE005             B.N      ??AES_cbc_encrypt_7
   \                     ??AES_cbc_encrypt_8: (+1)
   \   00000050   0x5DC1             LDRB     R1,[R0, R7]
   \   00000052   0xF810 0x2009      LDRB     R2,[R0, R9]
   \   00000056   0x4051             EORS     R1,R2,R1
   \   00000058   0x5541             STRB     R1,[R0, R5]
   \   0000005A   0x1C40             ADDS     R0,R0,#+1
   \                     ??AES_cbc_encrypt_7: (+1)
   \   0000005C   0x42B0             CMP      R0,R6
   \   0000005E   0xD3F7             BCC.N    ??AES_cbc_encrypt_8
   \   00000060   0x4630             MOV      R0,R6
   \   00000062   0xE003             B.N      ??AES_cbc_encrypt_9
   \                     ??AES_cbc_encrypt_10: (+1)
   \   00000064   0xF810 0x1009      LDRB     R1,[R0, R9]
   \   00000068   0x5541             STRB     R1,[R0, R5]
   \   0000006A   0x1C40             ADDS     R0,R0,#+1
   \                     ??AES_cbc_encrypt_9: (+1)
   \   0000006C   0x2810             CMP      R0,#+16
   \   0000006E   0xD3F9             BCC.N    ??AES_cbc_encrypt_10
   \   00000070   0x4642             MOV      R2,R8
   \   00000072   0x4629             MOV      R1,R5
   \   00000074   0x4628             MOV      R0,R5
   \   00000076   0x.... 0x....      BL       AES_encrypt
   \   0000007A   0x46A9             MOV      R9,R5
   \                     ??AES_cbc_encrypt_6: (+1)
   \   0000007C   0x2210             MOVS     R2,#+16
   \   0000007E   0x4649             MOV      R1,R9
   \   00000080   0x4620             MOV      R0,R4
   \   00000082   0x.... 0x....      BL       __aeabi_memcpy
   \   00000086   0xE06C             B.N      ??AES_cbc_encrypt_11
     94          		while (len >= AES_BLOCK_SIZE) {
     95          			AES_decrypt(in, out, key);
     96          			for(n=0; n < AES_BLOCK_SIZE; ++n)
     97          				out[n] ^= iv[n];
   \                     ??AES_cbc_encrypt_12: (+1)
   \   00000088   0x5D41             LDRB     R1,[R0, R5]
   \   0000008A   0xF810 0x2009      LDRB     R2,[R0, R9]
   \   0000008E   0x4051             EORS     R1,R2,R1
   \   00000090   0x5541             STRB     R1,[R0, R5]
   \   00000092   0x1C40             ADDS     R0,R0,#+1
   \                     ??AES_cbc_encrypt_13: (+1)
   \   00000094   0x2810             CMP      R0,#+16
   \   00000096   0xD3F7             BCC.N    ??AES_cbc_encrypt_12
     98          			iv = in;
   \   00000098   0x46B9             MOV      R9,R7
     99          			len -= AES_BLOCK_SIZE;
   \   0000009A   0x3E10             SUBS     R6,R6,#+16
    100          			in  += AES_BLOCK_SIZE;
   \   0000009C   0x3710             ADDS     R7,R7,#+16
    101          			out += AES_BLOCK_SIZE;
   \   0000009E   0x3510             ADDS     R5,R5,#+16
   \                     ??AES_cbc_encrypt_2: (+1)
   \   000000A0   0x2E10             CMP      R6,#+16
   \   000000A2   0xD306             BCC.N    ??AES_cbc_encrypt_14
   \   000000A4   0x4642             MOV      R2,R8
   \   000000A6   0x4629             MOV      R1,R5
   \   000000A8   0x4638             MOV      R0,R7
   \   000000AA   0x.... 0x....      BL       AES_decrypt
   \   000000AE   0x2000             MOVS     R0,#+0
   \   000000B0   0xE7F0             B.N      ??AES_cbc_encrypt_13
    102          		}
    103          		if (len) {
   \                     ??AES_cbc_encrypt_14: (+1)
   \   000000B2   0x2E00             CMP      R6,#+0
   \   000000B4   0xD010             BEQ.N    ??AES_cbc_encrypt_15
    104          			AES_decrypt(in,tmp,key);
   \   000000B6   0x4642             MOV      R2,R8
   \   000000B8   0x4669             MOV      R1,SP
   \   000000BA   0x4638             MOV      R0,R7
   \   000000BC   0x.... 0x....      BL       AES_decrypt
    105          			for(n=0; n < len; ++n)
   \   000000C0   0x2000             MOVS     R0,#+0
   \   000000C2   0xE006             B.N      ??AES_cbc_encrypt_16
    106          				out[n] = tmp[n] ^ iv[n];
   \                     ??AES_cbc_encrypt_17: (+1)
   \   000000C4   0x4669             MOV      R1,SP
   \   000000C6   0x5C41             LDRB     R1,[R0, R1]
   \   000000C8   0xF810 0x2009      LDRB     R2,[R0, R9]
   \   000000CC   0x4051             EORS     R1,R2,R1
   \   000000CE   0x5541             STRB     R1,[R0, R5]
   \   000000D0   0x1C40             ADDS     R0,R0,#+1
   \                     ??AES_cbc_encrypt_16: (+1)
   \   000000D2   0x42B0             CMP      R0,R6
   \   000000D4   0xD3F6             BCC.N    ??AES_cbc_encrypt_17
    107          			iv = in;
   \   000000D6   0x46B9             MOV      R9,R7
    108          		}
    109          		memcpy(ivec,iv,AES_BLOCK_SIZE);
   \                     ??AES_cbc_encrypt_15: (+1)
   \   000000D8   0x2210             MOVS     R2,#+16
   \   000000DA   0x4649             MOV      R1,R9
   \   000000DC   0x4620             MOV      R0,R4
   \   000000DE   0x.... 0x....      BL       __aeabi_memcpy
    110          	} else {
   \   000000E2   0xE03E             B.N      ??AES_cbc_encrypt_11
    111          		while (len >= AES_BLOCK_SIZE) {
    112          			memcpy(tmp, in, AES_BLOCK_SIZE);
    113          			AES_decrypt(in, out, key);
    114          			for(n=0; n < AES_BLOCK_SIZE; ++n)
    115          				out[n] ^= ivec[n];
   \                     ??AES_cbc_encrypt_18: (+1)
   \   000000E4   0x5D41             LDRB     R1,[R0, R5]
   \   000000E6   0x5D02             LDRB     R2,[R0, R4]
   \   000000E8   0x4051             EORS     R1,R2,R1
   \   000000EA   0x5541             STRB     R1,[R0, R5]
   \   000000EC   0x1C40             ADDS     R0,R0,#+1
   \                     ??AES_cbc_encrypt_19: (+1)
   \   000000EE   0x2810             CMP      R0,#+16
   \   000000F0   0xD3F8             BCC.N    ??AES_cbc_encrypt_18
    116          			memcpy(ivec, tmp, AES_BLOCK_SIZE);
   \   000000F2   0x2210             MOVS     R2,#+16
   \   000000F4   0x4669             MOV      R1,SP
   \   000000F6   0x4620             MOV      R0,R4
   \   000000F8   0x.... 0x....      BL       __aeabi_memcpy
    117          			len -= AES_BLOCK_SIZE;
   \   000000FC   0x3E10             SUBS     R6,R6,#+16
    118          			in += AES_BLOCK_SIZE;
   \   000000FE   0x3710             ADDS     R7,R7,#+16
    119          			out += AES_BLOCK_SIZE;
   \   00000100   0x3510             ADDS     R5,R5,#+16
   \                     ??AES_cbc_encrypt_1: (+1)
   \   00000102   0x2E10             CMP      R6,#+16
   \   00000104   0xD30B             BCC.N    ??AES_cbc_encrypt_20
   \   00000106   0x2210             MOVS     R2,#+16
   \   00000108   0x4639             MOV      R1,R7
   \   0000010A   0x4668             MOV      R0,SP
   \   0000010C   0x.... 0x....      BL       __aeabi_memcpy
   \   00000110   0x4642             MOV      R2,R8
   \   00000112   0x4629             MOV      R1,R5
   \   00000114   0x4638             MOV      R0,R7
   \   00000116   0x.... 0x....      BL       AES_decrypt
   \   0000011A   0x2000             MOVS     R0,#+0
   \   0000011C   0xE7E7             B.N      ??AES_cbc_encrypt_19
    120          		}
    121          		if (len) {
   \                     ??AES_cbc_encrypt_20: (+1)
   \   0000011E   0x2E00             CMP      R6,#+0
   \   00000120   0xD01F             BEQ.N    ??AES_cbc_encrypt_11
    122          			memcpy(tmp, in, AES_BLOCK_SIZE);
   \   00000122   0x2210             MOVS     R2,#+16
   \   00000124   0x4639             MOV      R1,R7
   \   00000126   0x4668             MOV      R0,SP
   \   00000128   0x.... 0x....      BL       __aeabi_memcpy
    123          			AES_decrypt(tmp, out, key);
   \   0000012C   0x4642             MOV      R2,R8
   \   0000012E   0x4629             MOV      R1,R5
   \   00000130   0x4668             MOV      R0,SP
   \   00000132   0x.... 0x....      BL       AES_decrypt
    124          			for(n=0; n < len; ++n)
   \   00000136   0x2000             MOVS     R0,#+0
   \   00000138   0xE004             B.N      ??AES_cbc_encrypt_21
    125          				out[n] ^= ivec[n];
   \                     ??AES_cbc_encrypt_22: (+1)
   \   0000013A   0x5D41             LDRB     R1,[R0, R5]
   \   0000013C   0x5D02             LDRB     R2,[R0, R4]
   \   0000013E   0x4051             EORS     R1,R2,R1
   \   00000140   0x5541             STRB     R1,[R0, R5]
   \   00000142   0x1C40             ADDS     R0,R0,#+1
   \                     ??AES_cbc_encrypt_21: (+1)
   \   00000144   0x42B0             CMP      R0,R6
   \   00000146   0xD3F8             BCC.N    ??AES_cbc_encrypt_22
    126          			for(n=len; n < AES_BLOCK_SIZE; ++n)
   \   00000148   0x4630             MOV      R0,R6
   \   0000014A   0xE003             B.N      ??AES_cbc_encrypt_23
    127          				out[n] = tmp[n];
   \                     ??AES_cbc_encrypt_24: (+1)
   \   0000014C   0x4669             MOV      R1,SP
   \   0000014E   0x5C41             LDRB     R1,[R0, R1]
   \   00000150   0x5541             STRB     R1,[R0, R5]
   \   00000152   0x1C40             ADDS     R0,R0,#+1
   \                     ??AES_cbc_encrypt_23: (+1)
   \   00000154   0x2810             CMP      R0,#+16
   \   00000156   0xD3F9             BCC.N    ??AES_cbc_encrypt_24
    128          			memcpy(ivec, tmp, AES_BLOCK_SIZE);
   \   00000158   0x2210             MOVS     R2,#+16
   \   0000015A   0x4669             MOV      R1,SP
   \   0000015C   0x4620             MOV      R0,R4
   \   0000015E   0x.... 0x....      BL       __aeabi_memcpy
    129          		}
    130          	}
    131          }
   \                     ??AES_cbc_encrypt_11: (+1)
   \   00000162   0xB005             ADD      SP,SP,#+20
   \   00000164   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
    132          #endif
    133          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      48   AES_cbc_encrypt
        48   -> AES_decrypt
        48   -> AES_encrypt
        48   -> __aeabi_memcpy


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     360  AES_cbc_encrypt

 
 360 bytes in section .text
 
 360 bytes of CODE memory

Errors: none
Warnings: none

###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.1.8447/W32 for ARM        13/Feb/2017  13:48:15
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Source\Micrium\uC-OS-III\Source\os_tick.c
#    Command line =  
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Source\Micrium\uC-OS-III\Source\os_tick.c" -D
#        USE_STDPERIPH_DRIVER -D STM32F10X_HD -D DEBUG -D STM32F103RB -D
#        STM32_FLASH_SIZE=128 -lCN "V:\我的项目\04
#        长沙南车\2015年后项目\NC16-011-A 智能电表\04 程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\Debug-RB\List\" -o "V:\我的项目\04
#        长沙南车\2015年后项目\NC16-011-A 智能电表\04 程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\Debug-RB\Obj\" --debug --endian=little
#        --cpu=ARM7TDMI -e --fpu=None --dlib_config "D:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01 智能电表\Library\Project\IAR\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\APP\" -I "V:\我的项目\04
#        长沙南车\2015年后项目\NC16-011-A 智能电表\04 程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\APP\User\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\APP\AES\" -I "V:\我的项目\04
#        长沙南车\2015年后项目\NC16-011-A 智能电表\04 程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\APP\Config\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\APP\OS\" -I "V:\我的项目\04
#        长沙南车\2015年后项目\NC16-011-A 智能电表\04 程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\APP\User\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\APP\SIM900A\Source\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\APP\SIM900A\Port\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\APP\SIM900A\OS\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\APP\SIM900A\Config\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\APP\Protocol\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\BSP\" -I "V:\我的项目\04
#        长沙南车\2015年后项目\NC16-011-A 智能电表\04 程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\BSP\Driver\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\BSP\IAR\" -I "V:\我的项目\04
#        长沙南车\2015年后项目\NC16-011-A 智能电表\04 程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\BSP\Os\" -I "V:\我的项目\04
#        长沙南车\2015年后项目\NC16-011-A 智能电表\04 程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\BSP\Os\uCOS-III\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\BSP\St\" -I "V:\我的项目\04
#        长沙南车\2015年后项目\NC16-011-A 智能电表\04 程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\BSP\St\FWLib\CMSIS\CM3\CoreSupport\"
#        -I "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\BSP\St\FWLib\CMSIS\CM3\DeviceSupport\ST\STM32F10x\"
#        -I "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\BSP\St\FWLib\STM32F10x_StdPeriph_Driver\inc\"
#        -I "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\Micrium\uC-CPU\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\Micrium\uC-CPU\ARM-Cortex-M3\IAR\"
#        -I "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\Micrium\uC-LIB\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\BSP\Os\OSAL\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\OSAL\OS\" -I "V:\我的项目\04
#        长沙南车\2015年后项目\NC16-011-A 智能电表\04 程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\Micrium\uC-MB\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\Micrium\uC-MB\Cfg\Template\"
#        -I "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\Micrium\uC-MB\OS\uCOS-III\"
#        -I "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\Micrium\uC-MB\Source\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\Ports\ARM-Cortex-M3\Generic\IAR\"
#        -I "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\Source\"
#        -I "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\FatFs\" -I "V:\我的项目\04
#        长沙南车\2015年后项目\NC16-011-A 智能电表\04 程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\FatFs\option\" --cpu_mode
#        thumb -Oh --use_c++_inline
#    List file    =  
#        V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\Debug-RB\List\os_tick.lst
#    Object file  =  
#        V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\Debug-RB\Obj\os_tick.o
#
###############################################################################

V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04 程序\NC014-001-000.CX_01 智能电表\Library\Source\Micrium\uC-OS-III\Source\os_tick.c
      1          /*
      2          ***********************************************************************************************************************
      3          *                                                      uC/OS-III
      4          *                                                 The Real-Time Kernel
      5          *
      6          *                                  (c) Copyright 2009-2012; Micrium, Inc.; Weston, FL
      7          *                           All rights reserved.  Protected by international copyright laws.
      8          *
      9          *                                                   TICK MANAGEMENT
     10          *
     11          * File    : OS_TICK.C
     12          * By      : JJL
     13          * Version : V3.03.01
     14          *
     15          * LICENSING TERMS:
     16          * ---------------
     17          *           uC/OS-III is provided in source form for FREE short-term evaluation, for educational use or 
     18          *           for peaceful research.  If you plan or intend to use uC/OS-III in a commercial application/
     19          *           product then, you need to contact Micrium to properly license uC/OS-III for its use in your 
     20          *           application/product.   We provide ALL the source code for your convenience and to help you 
     21          *           experience uC/OS-III.  The fact that the source is provided does NOT mean that you can use 
     22          *           it commercially without paying a licensing fee.
     23          *
     24          *           Knowledge of the source code may NOT be used to develop a similar product.
     25          *
     26          *           Please help us continue to provide the embedded community with the finest software available.
     27          *           Your honesty is greatly appreciated.
     28          *
     29          *           You can contact us at www.micrium.com, or by phone at +1 (954) 217-2036.
     30          ************************************************************************************************************************
     31          */
     32          
     33          #define  MICRIUM_SOURCE
     34          #include <os.h>
     35          
     36          #ifdef VSC_INCLUDE_SOURCE_FILE_NAMES
     37          const  CPU_CHAR  *os_tick__c = "$Id: $";
     38          #endif
     39          
     40          /*
     41          ************************************************************************************************************************
     42          *                                                  LOCAL PROTOTYPES
     43          ************************************************************************************************************************
     44          */
     45          
     46          
     47          /*
     48          ************************************************************************************************************************
     49          *                                                      TICK TASK
     50          *
     51          * Description: This task is internal to uC/OS-III and is triggered by the tick interrupt.
     52          *
     53          * Arguments  : p_arg     is an argument passed to the task when the task is created (unused).
     54          *
     55          * Returns    : none
     56          *
     57          * Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
     58          ************************************************************************************************************************
     59          */
     60          

   \                                 In section .text, align 2, keep-with-next
     61          void  OS_TickTask (void  *p_arg)
     62          {
   \                     OS_TickTask: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
     63              OS_ERR  err;
     64              CPU_TS  ts;
     65          
     66          
     67              p_arg = p_arg;                                          /* Prevent compiler warning                               */
   \   00000002   0x....             LDR      R4,??DataTable5
     68          
     69              while (DEF_ON) {
     70                  (void)OSTaskSemPend((OS_TICK  )0,
     71                                      (OS_OPT   )OS_OPT_PEND_BLOCKING,
     72                                      (CPU_TS  *)&ts,
     73                                      (OS_ERR  *)&err);               /* Wait for signal from tick interrupt                    */
   \                     ??OS_TickTask_0: (+1)
   \   00000004   0x466B             MOV      R3,SP
   \   00000006   0xAA01             ADD      R2,SP,#+4
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x.... 0x....      BL       OSTaskSemPend
     74                  if (err == OS_ERR_NONE) {
   \   00000010   0x4668             MOV      R0,SP
   \   00000012   0x8800             LDRH     R0,[R0, #+0]
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD1F5             BNE      ??OS_TickTask_0
     75                      if (OSRunning == OS_STATE_OS_RUNNING) {
   \   00000018   0x7820             LDRB     R0,[R4, #+0]
   \   0000001A   0x2801             CMP      R0,#+1
   \   0000001C   0xD1F2             BNE      ??OS_TickTask_0
     76                          OS_TickListUpdate();                        /* Update all tasks waiting for time                      */
   \   0000001E   0x.... 0x....      BL       OS_TickListUpdate
   \   00000022   0xE7EF             B        ??OS_TickTask_0
     77                      }
     78                  }
     79              }
     80          }
     81          
     82          /*$PAGE*/
     83          /*
     84          ************************************************************************************************************************
     85          *                                                 INITIALIZE TICK TASK
     86          *
     87          * Description: This function is called by OSInit() to create the tick task.
     88          *
     89          * Arguments  : p_err   is a pointer to a variable that will hold the value of an error code:
     90          *
     91          *                          OS_ERR_TICK_STK_INVALID   if the pointer to the tick task stack is a NULL pointer
     92          *                          OS_ERR_TICK_STK_SIZE      indicates that the specified stack size
     93          *                          OS_ERR_PRIO_INVALID       if the priority you specified in the configuration is invalid
     94          *                                                      (There could be only one task at the Idle Task priority)
     95          *                                                      (Maybe the priority you specified is higher than OS_CFG_PRIO_MAX-1
     96          *                          OS_ERR_??                 other error code returned by OSTaskCreate()
     97          *
     98          * Returns    : none
     99          *
    100          * Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
    101          ************************************************************************************************************************
    102          */
    103          

   \                                 In section .text, align 4, keep-with-next
    104          void  OS_TickTaskInit (OS_ERR  *p_err)
    105          {
   \                     OS_TickTaskInit: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB08A             SUB      SP,SP,#+40
   \   00000004   0x0004             MOVS     R4,R0
    106          #ifdef OS_SAFETY_CRITICAL
    107              if (p_err == (OS_ERR *)0) {
    108                  OS_SAFETY_CRITICAL_EXCEPTION();
    109                  return;
    110              }
    111          #endif
    112          
    113              OSTickCtr         = (OS_TICK)0u;                        /* Clear the tick counter                                 */
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x....             LDR      R1,??DataTable5_1
   \   0000000A   0x6008             STR      R0,[R1, #+0]
    114          
    115              OSTickTaskTimeMax = (CPU_TS)0u;
   \   0000000C   0x....             LDR      R1,??DataTable5_2
   \   0000000E   0x6008             STR      R0,[R1, #+0]
    116          
    117          
    118              OS_TickListInit();                                      /* Initialize the tick list data structures               */
   \   00000010   0x.... 0x....      BL       OS_TickListInit
    119          
    120                                                                      /* ---------------- CREATE THE TICK TASK ---------------- */
    121              if (OSCfg_TickTaskStkBasePtr == (CPU_STK *)0) {
   \   00000014   0x....             LDR      R0,??DataTable5_3
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD101             BNE      ??OS_TickTaskInit_0
    122                 *p_err = OS_ERR_TICK_STK_INVALID;
   \   0000001C   0x....             LDR      R0,??DataTable5_4  ;; 0x7212
   \   0000001E   0xE00C             B.N      ??OS_TickTaskInit_1
    123                  return;
    124              }
    125          
    126              if (OSCfg_TickTaskStkSize < OSCfg_StkSizeMin) {
   \                     ??OS_TickTaskInit_0: (+1)
   \   00000020   0x....             LDR      R1,??DataTable5_5
   \   00000022   0x6809             LDR      R1,[R1, #+0]
   \   00000024   0x....             LDR      R2,??DataTable5_6
   \   00000026   0x6812             LDR      R2,[R2, #+0]
   \   00000028   0x4291             CMP      R1,R2
   \   0000002A   0xD201             BCS      ??OS_TickTaskInit_2
    127                 *p_err = OS_ERR_TICK_STK_SIZE_INVALID;
   \   0000002C   0x....             LDR      R0,??DataTable5_7  ;; 0x7213
   \   0000002E   0xE004             B.N      ??OS_TickTaskInit_1
    128                  return;
    129              }
    130          
    131              if (OSCfg_TickTaskPrio >= (OS_CFG_PRIO_MAX - 1u)) {     /* Only one task at the 'Idle Task' priority              */
   \                     ??OS_TickTaskInit_2: (+1)
   \   00000030   0x....             LDR      R2,??DataTable5_8
   \   00000032   0x7812             LDRB     R2,[R2, #+0]
   \   00000034   0x2A1F             CMP      R2,#+31
   \   00000036   0xD302             BCC      ??OS_TickTaskInit_3
    132                 *p_err = OS_ERR_TICK_PRIO_INVALID;
   \   00000038   0x....             LDR      R0,??DataTable5_9  ;; 0x7211
   \                     ??OS_TickTaskInit_1: (+1)
   \   0000003A   0x8020             STRH     R0,[R4, #+0]
    133                  return;
   \   0000003C   0xE012             B        ??OS_TickTaskInit_4
    134              }
    135          
    136              OSTaskCreate((OS_TCB     *)&OSTickTaskTCB,
    137                           (CPU_CHAR   *)((void *)"uC/OS-III Tick Task"),
    138                           (OS_TASK_PTR )OS_TickTask,
    139                           (void       *)0,
    140                           (OS_PRIO     )OSCfg_TickTaskPrio,
    141                           (CPU_STK    *)OSCfg_TickTaskStkBasePtr,
    142                           (CPU_STK_SIZE)OSCfg_TickTaskStkLimit,
    143                           (CPU_STK_SIZE)OSCfg_TickTaskStkSize,
    144                           (OS_MSG_QTY  )0u,
    145                           (OS_TICK     )0u,
    146                           (void       *)0,
    147                           (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR | OS_OPT_TASK_NO_TLS),
    148                           (OS_ERR     *)p_err);
   \                     ??OS_TickTaskInit_3: (+1)
   \   0000003E   0x9408             STR      R4,[SP, #+32]
   \   00000040   0x230B             MOVS     R3,#+11
   \   00000042   0x9307             STR      R3,[SP, #+28]
   \   00000044   0x2300             MOVS     R3,#+0
   \   00000046   0x9306             STR      R3,[SP, #+24]
   \   00000048   0x9305             STR      R3,[SP, #+20]
   \   0000004A   0x9304             STR      R3,[SP, #+16]
   \   0000004C   0x9103             STR      R1,[SP, #+12]
   \   0000004E   0x....             LDR      R1,??DataTable6
   \   00000050   0x6809             LDR      R1,[R1, #+0]
   \   00000052   0x9102             STR      R1,[SP, #+8]
   \   00000054   0x9001             STR      R0,[SP, #+4]
   \   00000056   0x9200             STR      R2,[SP, #+0]
   \   00000058   0x....             LDR      R2,??DataTable6_1
   \   0000005A   0x46C0             Nop      
   \   0000005C   0x....             ADR.N    R1,?_0
   \   0000005E   0x....             LDR      R0,??DataTable6_2
   \   00000060   0x.... 0x....      BL       OSTaskCreate
    149          }
   \                     ??OS_TickTaskInit_4: (+1)
   \   00000064   0xB00A             ADD      SP,SP,#+40
   \   00000066   0xBD10             POP      {R4,PC}          ;; return
    150          
    151          /*$PAGE*/
    152          /*
    153          ************************************************************************************************************************
    154          *                                               INITIALIZE THE TICK LIST
    155          *
    156          * Description: This function initializes the tick handling data structures of uC/OS-III.
    157          *
    158          * Arguments  : none
    159          *
    160          * Returns    : None
    161          *
    162          * Note(s)    : This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
    163          ************************************************************************************************************************
    164          */
    165          

   \                                 In section .text, align 2, keep-with-next
    166          void  OS_TickListInit (void)
    167          {
    168              OS_TICK_SPOKE_IX   i;
    169              OS_TICK_SPOKE     *p_spoke;
    170          
    171          
    172          
    173              for (i = 0u; i < OSCfg_TickWheelSize; i++) {
   \                     OS_TickListInit: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x....             LDR      R2,??DataTable6_3
   \   00000006   0x8812             LDRH     R2,[R2, #+0]
   \   00000008   0x2A00             CMP      R2,#+0
   \   0000000A   0xD100             BNE      ??OS_TickListInit_0
   \   0000000C   0x4770             BX       LR
   \                     ??OS_TickListInit_0: (+1)
   \   0000000E   0xB410             PUSH     {R4}
   \   00000010   0x....             LDR      R3,??DataTable6_4
   \   00000012   0x2400             MOVS     R4,#+0
    174                  p_spoke                = (OS_TICK_SPOKE *)&OSCfg_TickWheel[i];
    175                  p_spoke->FirstPtr      = (OS_TCB        *)0;
   \                     ??OS_TickListInit_1: (+1)
   \   00000014   0x6018             STR      R0,[R3, #+0]
    176                  p_spoke->NbrEntries    = (OS_OBJ_QTY     )0u;
   \   00000016   0x809C             STRH     R4,[R3, #+4]
    177                  p_spoke->NbrEntriesMax = (OS_OBJ_QTY     )0u;
   \   00000018   0x80DC             STRH     R4,[R3, #+6]
    178              }
   \   0000001A   0x1C49             ADDS     R1,R1,#+1
   \   0000001C   0x3308             ADDS     R3,R3,#+8
   \   0000001E   0x0409             LSLS     R1,R1,#+16
   \   00000020   0x0C09             LSRS     R1,R1,#+16
   \   00000022   0x4291             CMP      R1,R2
   \   00000024   0xD3F6             BCC      ??OS_TickListInit_1
    179          }
   \   00000026   0xBC10             POP      {R4}
   \   00000028   0x4770             BX       LR               ;; return
    180          
    181          /*$PAGE*/
    182          /*
    183          ************************************************************************************************************************
    184          *                                                ADD TASK TO TICK LIST
    185          *
    186          * Description: This function is called to place a task in a list of task waiting for either time to expire or waiting to
    187          *              timeout on a pend call.
    188          *
    189          * Arguments  : p_tcb          is a pointer to the OS_TCB of the task to add to the tick list
    190          *              -----
    191          *
    192          *              time           represents either the 'match' value of OSTickCtr or a relative time from the current
    193          *                             value of OSTickCtr as specified by the 'opt' argument..
    194          *
    195          *                             relative when 'opt' is set to OS_OPT_TIME_DLY
    196          *                             relative when 'opt' is set to OS_OPT_TIME_TIMEOUT
    197          *                             match    when 'opt' is set to OS_OPT_TIME_MATCH
    198          *                             periodic when 'opt' is set to OS_OPT_TIME_PERIODIC
    199          *
    200          *              opt            is an option specifying how to calculate time.  The valid values are:
    201          *              ---
    202          *                                 OS_OPT_TIME_DLY
    203          *                                 OS_OPT_TIME_TIMEOUT
    204          *                                 OS_OPT_TIME_PERIODIC
    205          *                                 OS_OPT_TIME_MATCH
    206          *
    207          *              p_err          is a pointer to a variable that will contain an error code returned by this function.
    208          *              -----
    209          *                                 OS_ERR_NONE           the call was successful and the time delay was scheduled.
    210          *                                 OS_ERR_TIME_ZERO_DLY  if delay is zero or already occurred.
    211          *
    212          * Returns    : None
    213          *
    214          * Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
    215          *
    216          *              2) This function is assumed to be called with interrupts disabled.
    217          ************************************************************************************************************************
    218          */
    219          

   \                                 In section .text, align 2, keep-with-next
    220          void  OS_TickListInsert (OS_TCB   *p_tcb,
    221                                   OS_TICK   time,
    222                                   OS_OPT    opt,
    223                                   OS_ERR   *p_err)
    224          {
   \                     OS_TickListInsert: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x001D             MOVS     R5,R3
    225              OS_TICK            tick_delta;
    226              OS_TICK            tick_next;
    227              OS_TICK_SPOKE     *p_spoke;
    228              OS_TCB            *p_tcb0;
    229              OS_TCB            *p_tcb1;
    230              OS_TICK_SPOKE_IX   spoke;
    231          
    232          
    233          
    234              if (opt == OS_OPT_TIME_MATCH) {                              /* Task time is absolute.                            */
   \   00000006   0x2A04             CMP      R2,#+4
   \   00000008   0xD11B             BNE      ??OS_TickListInsert_0
    235                  tick_delta = time - OSTickCtr - 1u;
   \   0000000A   0x....             LDR      R0,??DataTable6_5
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0x1A08             SUBS     R0,R1,R0
   \   00000010   0x1E40             SUBS     R0,R0,#+1
    236                  if (tick_delta > OS_TICK_TH_RDY) {                       /* If delay already occurred, ...                    */
   \   00000012   0x....             LDR      R2,??DataTable6_6  ;; 0xffff0001
   \   00000014   0x4290             CMP      R0,R2
   \   00000016   0xD22A             BCS      ??OS_TickListInsert_1
    237                      p_tcb->TickCtrMatch = (OS_TICK        )0u;
    238                      p_tcb->TickRemain   = (OS_TICK        )0u;
    239                      p_tcb->TickSpokePtr = (OS_TICK_SPOKE *)0;
    240                     *p_err               =  OS_ERR_TIME_ZERO_DLY;         /* ... do NOT delay.                                 */
    241                      return;
    242                  }
    243                  p_tcb->TickCtrMatch = time;
   \   00000018   0x64E1             STR      R1,[R4, #+76]
    244                  p_tcb->TickRemain   = tick_delta + 1u;
   \   0000001A   0x1C40             ADDS     R0,R0,#+1
   \                     ??OS_TickListInsert_2: (+1)
   \   0000001C   0x6520             STR      R0,[R4, #+80]
    245          
    246              } else if (time > (OS_TICK)0u) {
    247                  if (opt == OS_OPT_TIME_PERIODIC) {                       /* Task time is periodic.                            */
    248                      tick_next  = p_tcb->TickCtrPrev + time;
    249                      tick_delta = tick_next - OSTickCtr - 1u;
    250                      if (tick_delta < time) {                             /* If next periodic delay did NOT already occur, ... */
    251                          p_tcb->TickCtrMatch = tick_next;                 /* ... set  next  periodic delay;                ... */
    252                      } else {
    253                          p_tcb->TickCtrMatch = OSTickCtr + time;          /* ... else reset periodic delay.                    */
    254                      }
    255                      p_tcb->TickRemain   = p_tcb->TickCtrMatch - OSTickCtr;
    256                      p_tcb->TickCtrPrev  = p_tcb->TickCtrMatch;
    257          
    258                  } else {                                                 /* Task time is relative to current.                 */
    259                      p_tcb->TickCtrMatch = OSTickCtr + time;
    260                      p_tcb->TickRemain   = time;
    261                  }
    262          
    263              } else {                                                     /* Zero time delay; ...                              */
    264                  p_tcb->TickCtrMatch = (OS_TICK        )0u;
    265                  p_tcb->TickRemain   = (OS_TICK        )0u;
    266                  p_tcb->TickSpokePtr = (OS_TICK_SPOKE *)0;
    267                 *p_err               =  OS_ERR_TIME_ZERO_DLY;             /* ... do NOT delay.                                 */
    268                  return;
    269              }
    270          
    271          
    272              spoke   = (OS_TICK_SPOKE_IX)(p_tcb->TickCtrMatch % OSCfg_TickWheelSize);
    273              p_spoke = &OSCfg_TickWheel[spoke];
   \   0000001E   0x....             LDR      R6,??DataTable6_4
   \   00000020   0x6CE0             LDR      R0,[R4, #+76]
   \   00000022   0x....             LDR      R1,??DataTable6_3
   \   00000024   0x8809             LDRH     R1,[R1, #+0]
   \   00000026   0x.... 0x....      BL       __aeabi_uidivmod
   \   0000002A   0x0409             LSLS     R1,R1,#+16
   \   0000002C   0x0B48             LSRS     R0,R1,#+13
   \   0000002E   0x1831             ADDS     R1,R6,R0
    274          
    275              if (p_spoke->NbrEntries == (OS_OBJ_QTY)0u) {                 /* First entry in the spoke                          */
   \   00000030   0x8888             LDRH     R0,[R1, #+4]
   \   00000032   0x2800             CMP      R0,#+0
   \   00000034   0xD121             BNE      ??OS_TickListInsert_3
    276                  p_tcb->TickNextPtr   = (OS_TCB   *)0;
   \   00000036   0x2300             MOVS     R3,#+0
   \   00000038   0x6163             STR      R3,[R4, #+20]
    277                  p_tcb->TickPrevPtr   = (OS_TCB   *)0;
   \   0000003A   0x61A3             STR      R3,[R4, #+24]
    278                  p_spoke->FirstPtr    =  p_tcb;
   \   0000003C   0x600C             STR      R4,[R1, #+0]
    279                  p_spoke->NbrEntries  = (OS_OBJ_QTY)1u;
   \   0000003E   0x2001             MOVS     R0,#+1
   \   00000040   0xE03E             B        ??OS_TickListInsert_4
    280              } else {
   \                     ??OS_TickListInsert_0: (+1)
   \   00000042   0x2900             CMP      R1,#+0
   \   00000044   0xD013             BEQ      ??OS_TickListInsert_1
   \   00000046   0x....             LDR      R3,??DataTable6_5
   \   00000048   0x6818             LDR      R0,[R3, #+0]
   \   0000004A   0x2A08             CMP      R2,#+8
   \   0000004C   0xD10B             BNE      ??OS_TickListInsert_5
   \   0000004E   0x6CA2             LDR      R2,[R4, #+72]
   \   00000050   0x1852             ADDS     R2,R2,R1
   \   00000052   0x1A16             SUBS     R6,R2,R0
   \   00000054   0x1E76             SUBS     R6,R6,#+1
   \   00000056   0x428E             CMP      R6,R1
   \   00000058   0xD300             BCC      ??OS_TickListInsert_6
   \   0000005A   0x1842             ADDS     R2,R0,R1
   \                     ??OS_TickListInsert_6: (+1)
   \   0000005C   0x64E2             STR      R2,[R4, #+76]
   \   0000005E   0x6818             LDR      R0,[R3, #+0]
   \   00000060   0x1A10             SUBS     R0,R2,R0
   \   00000062   0x64A2             STR      R2,[R4, #+72]
   \   00000064   0xE7DA             B        ??OS_TickListInsert_2
   \                     ??OS_TickListInsert_5: (+1)
   \   00000066   0x1840             ADDS     R0,R0,R1
   \   00000068   0x64E0             STR      R0,[R4, #+76]
   \   0000006A   0x0008             MOVS     R0,R1
   \   0000006C   0xE7D6             B        ??OS_TickListInsert_2
   \                     ??OS_TickListInsert_1: (+1)
   \   0000006E   0x2300             MOVS     R3,#+0
   \   00000070   0x64E3             STR      R3,[R4, #+76]
   \   00000072   0x6523             STR      R3,[R4, #+80]
   \   00000074   0x61E3             STR      R3,[R4, #+28]
   \   00000076   0x....             LDR      R0,??DataTable6_7  ;; 0x727e
   \   00000078   0xE02B             B        ??OS_TickListInsert_7
    281                  p_tcb1     = p_spoke->FirstPtr;                          /* Point to current first TCB in the list            */
   \                     ??OS_TickListInsert_3: (+1)
   \   0000007A   0x680A             LDR      R2,[R1, #+0]
   \   0000007C   0x....             LDR      R3,??DataTable6_5
    282                  while (p_tcb1 != (OS_TCB *)0) {
   \   0000007E   0x2A00             CMP      R2,#+0
   \   00000080   0xD01D             BEQ      ??OS_TickListInsert_8
   \   00000082   0xE000             B        ??OS_TickListInsert_9
    283                      p_tcb1->TickRemain = p_tcb1->TickCtrMatch            /* Compute time remaining of current TCB in list     */
    284                                         - OSTickCtr;
    285                      if (p_tcb->TickRemain > p_tcb1->TickRemain) {        /* Do we need to insert AFTER current TCB in list?   */
    286                          if (p_tcb1->TickNextPtr != (OS_TCB *)0) {        /* Yes, are we pointing at the last TCB in the list? */
    287                              p_tcb1               =  p_tcb1->TickNextPtr; /* No,  Point to next TCB in the list                */
   \                     ??OS_TickListInsert_10: (+1)
   \   00000084   0x0032             MOVS     R2,R6
    288                          } else {
   \                     ??OS_TickListInsert_9: (+1)
   \   00000086   0x6CD6             LDR      R6,[R2, #+76]
   \   00000088   0x681F             LDR      R7,[R3, #+0]
   \   0000008A   0x1BF6             SUBS     R6,R6,R7
   \   0000008C   0x6516             STR      R6,[R2, #+80]
   \   0000008E   0x6D27             LDR      R7,[R4, #+80]
   \   00000090   0x42BE             CMP      R6,R7
   \   00000092   0xD207             BCS      ??OS_TickListInsert_11
   \   00000094   0x6956             LDR      R6,[R2, #+20]
   \   00000096   0x2E00             CMP      R6,#+0
   \   00000098   0xD1F4             BNE      ??OS_TickListInsert_10
    289                              p_tcb->TickNextPtr   = (OS_TCB *)0;
   \   0000009A   0x2300             MOVS     R3,#+0
   \   0000009C   0x6163             STR      R3,[R4, #+20]
    290                              p_tcb->TickPrevPtr   =  p_tcb1;
   \   0000009E   0x61A2             STR      R2,[R4, #+24]
    291                              p_tcb1->TickNextPtr  =  p_tcb;               /* Yes, TCB to add is now new last entry in the list */
   \   000000A0   0x6154             STR      R4,[R2, #+20]
    292                              p_tcb1               = (OS_TCB *)0;          /* Break loop                                        */
   \   000000A2   0xE00C             B        ??OS_TickListInsert_8
    293                          }
    294                      } else {                                             /* Insert before the current TCB                     */
    295                          if (p_tcb1->TickPrevPtr == (OS_TCB *)0) {        /* Are we inserting before the first TCB?            */
   \                     ??OS_TickListInsert_11: (+1)
   \   000000A4   0x6996             LDR      R6,[R2, #+24]
   \   000000A6   0x2300             MOVS     R3,#+0
   \   000000A8   0x2E00             CMP      R6,#+0
   \   000000AA   0xD104             BNE      ??OS_TickListInsert_12
    296                              p_tcb->TickPrevPtr   = (OS_TCB *)0;
   \   000000AC   0x61A3             STR      R3,[R4, #+24]
    297                              p_tcb->TickNextPtr   =  p_tcb1;
   \   000000AE   0x6162             STR      R2,[R4, #+20]
    298                              p_tcb1->TickPrevPtr  =  p_tcb;
   \   000000B0   0x6194             STR      R4,[R2, #+24]
    299                              p_spoke->FirstPtr    =  p_tcb;
   \   000000B2   0x600C             STR      R4,[R1, #+0]
   \   000000B4   0xE003             B        ??OS_TickListInsert_8
    300                          } else {                                         /* Insert in between 2 TCBs already in the list      */
    301                              p_tcb0               =  p_tcb1->TickPrevPtr;
    302                              p_tcb->TickPrevPtr   =  p_tcb0;
   \                     ??OS_TickListInsert_12: (+1)
   \   000000B6   0x61A6             STR      R6,[R4, #+24]
    303                              p_tcb->TickNextPtr   =  p_tcb1;
   \   000000B8   0x6162             STR      R2,[R4, #+20]
    304                              p_tcb0->TickNextPtr  =  p_tcb;
   \   000000BA   0x6174             STR      R4,[R6, #+20]
    305                              p_tcb1->TickPrevPtr  =  p_tcb;
   \   000000BC   0x6194             STR      R4,[R2, #+24]
    306                          }
    307                          p_tcb1 = (OS_TCB *)0;                            /* Break loop                                        */
    308                      }
    309                  }
    310                  p_spoke->NbrEntries++;
   \                     ??OS_TickListInsert_8: (+1)
   \   000000BE   0x1C40             ADDS     R0,R0,#+1
   \                     ??OS_TickListInsert_4: (+1)
   \   000000C0   0x8088             STRH     R0,[R1, #+4]
    311              }
    312              if (p_spoke->NbrEntriesMax < p_spoke->NbrEntries) {          /* Keep track of maximum # of entries in each spoke  */
   \   000000C2   0x88C8             LDRH     R0,[R1, #+6]
   \   000000C4   0x888A             LDRH     R2,[R1, #+4]
   \   000000C6   0x4290             CMP      R0,R2
   \   000000C8   0xD200             BCS      ??OS_TickListInsert_13
   \   000000CA   0x0010             MOVS     R0,R2
   \                     ??OS_TickListInsert_13: (+1)
   \   000000CC   0x80C8             STRH     R0,[R1, #+6]
    313                  p_spoke->NbrEntriesMax = p_spoke->NbrEntries;
    314              }
    315              p_tcb->TickSpokePtr = p_spoke;                               /* Link back to tick spoke                           */
   \   000000CE   0x61E1             STR      R1,[R4, #+28]
    316             *p_err               = OS_ERR_NONE;
   \   000000D0   0x2000             MOVS     R0,#+0
   \                     ??OS_TickListInsert_7: (+1)
   \   000000D2   0x8028             STRH     R0,[R5, #+0]
    317          }
   \   000000D4   0xBDF0             POP      {R4-R7,PC}       ;; return
    318          
    319          /*$PAGE*/
    320          /*
    321          ************************************************************************************************************************
    322          *                                         REMOVE A TASK FROM THE TICK LIST
    323          *
    324          * Description: This function is called to remove a task from the tick list
    325          *
    326          * Arguments  : p_tcb          Is a pointer to the OS_TCB to remove.
    327          *              -----
    328          *
    329          * Returns    : none
    330          *
    331          * Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
    332          *
    333          *              2) This function is assumed to be called with interrupts disabled.
    334          ************************************************************************************************************************
    335          */
    336          

   \                                 In section .text, align 2, keep-with-next
    337          void  OS_TickListRemove (OS_TCB  *p_tcb)
    338          {
    339              OS_TICK_SPOKE  *p_spoke;
    340              OS_TCB         *p_tcb1;
    341              OS_TCB         *p_tcb2;
    342          
    343          
    344          
    345              p_spoke = p_tcb->TickSpokePtr;
   \                     OS_TickListRemove: (+1)
   \   00000000   0x69C1             LDR      R1,[R0, #+28]
    346              if (p_spoke != (OS_TICK_SPOKE *)0) {                              /* Confirm that task is in tick list            */
   \   00000002   0x2900             CMP      R1,#+0
   \   00000004   0xD100             BNE      ??OS_TickListRemove_0
   \   00000006   0x4770             BX       LR
    347                  p_tcb->TickRemain = (OS_TICK)0u;
   \                     ??OS_TickListRemove_0: (+1)
   \   00000008   0xB410             PUSH     {R4}
   \   0000000A   0x2200             MOVS     R2,#+0
   \   0000000C   0x6502             STR      R2,[R0, #+80]
    348                  if (p_spoke->FirstPtr == p_tcb) {                             /* Is timer to remove at the beginning of list? */
   \   0000000E   0x6943             LDR      R3,[R0, #+20]
   \   00000010   0x680C             LDR      R4,[R1, #+0]
   \   00000012   0x4284             CMP      R4,R0
   \   00000014   0xD104             BNE      ??OS_TickListRemove_1
    349                      p_tcb1            = (OS_TCB *)p_tcb->TickNextPtr;         /* Yes                                          */
   \   00000016   0x001C             MOVS     R4,R3
    350                      p_spoke->FirstPtr = p_tcb1;
   \   00000018   0x600B             STR      R3,[R1, #+0]
    351                      if (p_tcb1 != (OS_TCB *)0) {
   \   0000001A   0xD006             BEQ      ??OS_TickListRemove_2
    352                          p_tcb1->TickPrevPtr = (OS_TCB *)0;
   \   0000001C   0x619A             STR      R2,[R3, #+24]
   \   0000001E   0xE004             B        ??OS_TickListRemove_2
    353                      }
    354                  } else {
    355                      p_tcb1              = p_tcb->TickPrevPtr;                 /* No, remove timer from somewhere in the list  */
   \                     ??OS_TickListRemove_1: (+1)
   \   00000020   0x6984             LDR      R4,[R0, #+24]
    356                      p_tcb2              = p_tcb->TickNextPtr;
    357                      p_tcb1->TickNextPtr = p_tcb2;
   \   00000022   0x6163             STR      R3,[R4, #+20]
    358                      if (p_tcb2 != (OS_TCB *)0) {
   \   00000024   0x2B00             CMP      R3,#+0
   \   00000026   0xD000             BEQ      ??OS_TickListRemove_2
    359                          p_tcb2->TickPrevPtr = p_tcb1;
   \   00000028   0x619C             STR      R4,[R3, #+24]
    360                      }
    361                  }
    362                  p_tcb->TickNextPtr  = (OS_TCB        *)0;
   \                     ??OS_TickListRemove_2: (+1)
   \   0000002A   0x6142             STR      R2,[R0, #+20]
    363                  p_tcb->TickPrevPtr  = (OS_TCB        *)0;
   \   0000002C   0x6182             STR      R2,[R0, #+24]
    364                  p_tcb->TickSpokePtr = (OS_TICK_SPOKE *)0;
   \   0000002E   0x61C2             STR      R2,[R0, #+28]
    365                  p_tcb->TickCtrMatch = (OS_TICK        )0u;
   \   00000030   0x64C2             STR      R2,[R0, #+76]
    366                  p_spoke->NbrEntries--;
   \   00000032   0x8888             LDRH     R0,[R1, #+4]
   \   00000034   0x1E40             SUBS     R0,R0,#+1
   \   00000036   0x8088             STRH     R0,[R1, #+4]
    367              }
    368          }
   \   00000038   0xBC10             POP      {R4}
   \   0000003A   0x4770             BX       LR               ;; return
    369          
    370          /*$PAGE*/
    371          /*
    372          ************************************************************************************************************************
    373          *                                              RESET TICK LIST PEAK DETECTOR
    374          *
    375          * Description: This function is used to reset the peak detector for the number of entries in each spoke.
    376          *
    377          * Arguments  : void
    378          *
    379          * Returns    : none
    380          *
    381          * Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
    382          ************************************************************************************************************************
    383          */
    384          
    385          

   \                                 In section .text, align 2, keep-with-next
    386          void  OS_TickListResetPeak (void)
    387          {
    388              OS_TICK_SPOKE_IX   i;
    389              OS_TICK_SPOKE     *p_spoke;
    390          
    391          
    392          
    393              for (i = 0u; i < OSCfg_TickWheelSize; i++) {
   \                     OS_TickListResetPeak: (+1)
   \   00000000   0x....             LDR      R0,??DataTable6_3
   \   00000002   0x8800             LDRH     R0,[R0, #+0]
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xD005             BEQ      ??OS_TickListResetPeak_0
   \   00000008   0x....             LDR      R1,??DataTable6_8
   \   0000000A   0x2200             MOVS     R2,#+0
    394                  p_spoke                = (OS_TICK_SPOKE *)&OSCfg_TickWheel[i];
    395                  p_spoke->NbrEntriesMax = (OS_OBJ_QTY     )0u;
   \                     ??OS_TickListResetPeak_1: (+1)
   \   0000000C   0x800A             STRH     R2,[R1, #+0]
    396              }
   \   0000000E   0x3108             ADDS     R1,R1,#+8
   \   00000010   0x1E40             SUBS     R0,R0,#+1
   \   00000012   0xD1FB             BNE      ??OS_TickListResetPeak_1
    397          }
   \                     ??OS_TickListResetPeak_0: (+1)
   \   00000014   0x4770             BX       LR               ;; return
    398          
    399          /*$PAGE*/
    400          /*
    401          ************************************************************************************************************************
    402          *                                                UPDATE THE TICK LIST
    403          *
    404          * Description: This function is called when a tick occurs and determines if the timeout waiting for a kernel object has
    405          *              expired or a delay has expired.
    406          *
    407          * Arguments  : non
    408          *
    409          * Returns    : none
    410          *
    411          * Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
    412          ************************************************************************************************************************
    413          */
    414          

   \                                 In section .text, align 2, keep-with-next
    415          void  OS_TickListUpdate (void)
    416          {
   \                     OS_TickListUpdate: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
    417              CPU_BOOLEAN        done;
    418              OS_TICK_SPOKE     *p_spoke;
    419              OS_TCB            *p_tcb;
    420              OS_TCB            *p_tcb_next;
    421              OS_TICK_SPOKE_IX   spoke;
    422              CPU_TS             ts_start;
    423              CPU_TS             ts_end;
    424              CPU_SR_ALLOC();
    425          
    426          
    427              OS_CRITICAL_ENTER();
   \   00000002   0x.... 0x....      BL       CPU_SR_Save
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x.... 0x....      BL       CPU_IntDisMeasStart
   \   0000000C   0x....             LDR      R0,??DataTable6_9
   \   0000000E   0x7800             LDRB     R0,[R0, #+0]
   \   00000010   0x1C40             ADDS     R0,R0,#+1
   \   00000012   0x....             LDR      R1,??DataTable6_9
   \   00000014   0x7008             STRB     R0,[R1, #+0]
   \   00000016   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   0000001A   0x0020             MOVS     R0,R4
   \   0000001C   0x.... 0x....      BL       CPU_SR_Restore
    428              ts_start = OS_TS_GET();
    429              OSTickCtr++;                                                       /* Keep track of the number of ticks           */
   \   00000020   0x....             LDR      R7,??DataTable6_5
   \   00000022   0x6838             LDR      R0,[R7, #+0]
   \   00000024   0x1C40             ADDS     R0,R0,#+1
   \   00000026   0x6038             STR      R0,[R7, #+0]
    430              spoke    = (OS_TICK_SPOKE_IX)(OSTickCtr % OSCfg_TickWheelSize);
    431              p_spoke  = &OSCfg_TickWheel[spoke];
    432              p_tcb    = p_spoke->FirstPtr;
   \   00000028   0x....             LDR      R4,??DataTable6_4
   \   0000002A   0x....             LDR      R1,??DataTable6_3
   \   0000002C   0x8809             LDRH     R1,[R1, #+0]
   \   0000002E   0x.... 0x....      BL       __aeabi_uidivmod
   \   00000032   0x0409             LSLS     R1,R1,#+16
   \   00000034   0x0B48             LSRS     R0,R1,#+13
   \   00000036   0x5824             LDR      R4,[R4, R0]
   \   00000038   0x2500             MOVS     R5,#+0
   \   0000003A   0xE000             B        ??OS_TickListUpdate_0
    433              done     = DEF_FALSE;
    434              while (done == DEF_FALSE) {
    435                  if (p_tcb != (OS_TCB *)0) {
    436                      p_tcb_next = p_tcb->TickNextPtr;                           /* Point to next TCB to update                 */
    437                      switch (p_tcb->TaskState) {
    438                          case OS_TASK_STATE_RDY:
    439                          case OS_TASK_STATE_PEND:
    440                          case OS_TASK_STATE_SUSPENDED:
    441                          case OS_TASK_STATE_PEND_SUSPENDED:
    442                               break;
    443          
    444                          case OS_TASK_STATE_DLY:
    445                               p_tcb->TickRemain = p_tcb->TickCtrMatch           /* Compute time remaining of current TCB       */
    446                                                 - OSTickCtr;
    447                               if (OSTickCtr == p_tcb->TickCtrMatch) {           /* Process each TCB that expires               */
    448                                   p_tcb->TaskState = OS_TASK_STATE_RDY;
    449                                   OS_TaskRdy(p_tcb);                            /* Make task ready to run                      */
    450                               } else {
    451                                   done             = DEF_TRUE;                  /* Don't find a match, we're done!             */
    452                               }
    453                               break;
    454          
    455                          case OS_TASK_STATE_PEND_TIMEOUT:
    456                               p_tcb->TickRemain = p_tcb->TickCtrMatch           /* Compute time remaining of current TCB       */
    457                                                 - OSTickCtr;
    458                               if (OSTickCtr == p_tcb->TickCtrMatch) {           /* Process each TCB that expires               */
    459          #if (OS_MSG_EN > 0u)
    460                                   p_tcb->MsgPtr     = (void      *)0;
    461                                   p_tcb->MsgSize    = (OS_MSG_SIZE)0u;
    462          #endif
    463                                   p_tcb->TS         = OS_TS_GET();
    464                                   OS_PendListRemove(p_tcb);                     /* Remove from wait list                       */
    465                                   OS_TaskRdy(p_tcb);
    466                                   p_tcb->TaskState  = OS_TASK_STATE_RDY;
    467                                   p_tcb->PendStatus = OS_STATUS_PEND_TIMEOUT;   /* Indicate pend timed out                     */
    468                                   p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;  /* Indicate no longer pending                  */
    469                               } else {
    470                                   done              = DEF_TRUE;                 /* Don't find a match, we're done!             */
    471                               }
    472                               break;
    473          
    474                          case OS_TASK_STATE_DLY_SUSPENDED:
    475                               p_tcb->TickRemain = p_tcb->TickCtrMatch           /* Compute time remaining of current TCB       */
    476                                                 - OSTickCtr;
    477                               if (OSTickCtr == p_tcb->TickCtrMatch) {           /* Process each TCB that expires               */
    478                                   p_tcb->TaskState  = OS_TASK_STATE_SUSPENDED;
    479                                   OS_TickListRemove(p_tcb);                     /* Remove from current wheel spoke             */
    480                               } else {
    481                                   done              = DEF_TRUE;                 /* Don't find a match, we're done!             */
    482                               }
    483                               break;
    484          
    485                          case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
    486                               p_tcb->TickRemain = p_tcb->TickCtrMatch           /* Compute time remaining of current TCB       */
    487                                                 - OSTickCtr;
    488                               if (OSTickCtr == p_tcb->TickCtrMatch) {           /* Process each TCB that expires               */
    489          #if (OS_MSG_EN > 0u)
    490                                   p_tcb->MsgPtr     = (void      *)0;
    491                                   p_tcb->MsgSize    = (OS_MSG_SIZE)0u;
    492          #endif
    493                                   p_tcb->TS         = OS_TS_GET();
    494                                   OS_PendListRemove(p_tcb);                     /* Remove from wait list                       */
    495                                   OS_TickListRemove(p_tcb);                     /* Remove from current wheel spoke             */
    496                                   p_tcb->TaskState  = OS_TASK_STATE_SUSPENDED;
    497                                   p_tcb->PendStatus = OS_STATUS_PEND_TIMEOUT;   /* Indicate pend timed out                     */
    498                                   p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;  /* Indicate no longer pending                  */
    499                               } else {
    500                                   done              = DEF_TRUE;                 /* Don't find a match, we're done!             */
    501                               }
    502                               break;
    503          
    504                          default:
    505                               break;
    506                      }
    507                      p_tcb = p_tcb_next;
   \                     ??OS_TickListUpdate_1: (+1)
   \   0000003C   0x9C00             LDR      R4,[SP, #+0]
   \                     ??OS_TickListUpdate_0: (+1)
   \   0000003E   0x2C00             CMP      R4,#+0
   \   00000040   0xD051             BEQ      ??OS_TickListUpdate_2
   \   00000042   0x6960             LDR      R0,[R4, #+20]
   \   00000044   0x9000             STR      R0,[SP, #+0]
   \   00000046   0x0026             MOVS     R6,R4
   \   00000048   0x3634             ADDS     R6,R6,#+52
   \   0000004A   0x78B0             LDRB     R0,[R6, #+2]
   \   0000004C   0x2801             CMP      R0,#+1
   \   0000004E   0xD006             BEQ      ??OS_TickListUpdate_3
   \   00000050   0x2803             CMP      R0,#+3
   \   00000052   0xD010             BEQ      ??OS_TickListUpdate_4
   \   00000054   0x2805             CMP      R0,#+5
   \   00000056   0xD023             BEQ      ??OS_TickListUpdate_5
   \   00000058   0x2807             CMP      R0,#+7
   \   0000005A   0xD02E             BEQ      ??OS_TickListUpdate_6
   \   0000005C   0xE7EE             B        ??OS_TickListUpdate_1
   \                     ??OS_TickListUpdate_3: (+1)
   \   0000005E   0x69B0             LDR      R0,[R6, #+24]
   \   00000060   0x6839             LDR      R1,[R7, #+0]
   \   00000062   0x1A41             SUBS     R1,R0,R1
   \   00000064   0x61F1             STR      R1,[R6, #+28]
   \   00000066   0x6839             LDR      R1,[R7, #+0]
   \   00000068   0x4281             CMP      R1,R0
   \   0000006A   0xD13C             BNE      ??OS_TickListUpdate_2
   \   0000006C   0x70B5             STRB     R5,[R6, #+2]
   \   0000006E   0x0020             MOVS     R0,R4
   \   00000070   0x.... 0x....      BL       OS_TaskRdy
   \   00000074   0xE7E2             B        ??OS_TickListUpdate_1
   \                     ??OS_TickListUpdate_4: (+1)
   \   00000076   0x69B0             LDR      R0,[R6, #+24]
   \   00000078   0x6839             LDR      R1,[R7, #+0]
   \   0000007A   0x1A41             SUBS     R1,R0,R1
   \   0000007C   0x61F1             STR      R1,[R6, #+28]
   \   0000007E   0x6839             LDR      R1,[R7, #+0]
   \   00000080   0x4281             CMP      R1,R0
   \   00000082   0xD130             BNE      ??OS_TickListUpdate_2
   \   00000084   0x62B5             STR      R5,[R6, #+40]
   \   00000086   0x85B5             STRH     R5,[R6, #+44]
   \   00000088   0x60F5             STR      R5,[R6, #+12]
   \   0000008A   0x0020             MOVS     R0,R4
   \   0000008C   0x.... 0x....      BL       OS_PendListRemove
   \   00000090   0x0020             MOVS     R0,R4
   \   00000092   0x.... 0x....      BL       OS_TaskRdy
   \   00000096   0x70B5             STRB     R5,[R6, #+2]
   \   00000098   0x2003             MOVS     R0,#+3
   \   0000009A   0x7070             STRB     R0,[R6, #+1]
   \   0000009C   0x7035             STRB     R5,[R6, #+0]
   \   0000009E   0xE7CD             B        ??OS_TickListUpdate_1
   \                     ??OS_TickListUpdate_5: (+1)
   \   000000A0   0x69B0             LDR      R0,[R6, #+24]
   \   000000A2   0x6839             LDR      R1,[R7, #+0]
   \   000000A4   0x1A41             SUBS     R1,R0,R1
   \   000000A6   0x61F1             STR      R1,[R6, #+28]
   \   000000A8   0x6839             LDR      R1,[R7, #+0]
   \   000000AA   0x4281             CMP      R1,R0
   \   000000AC   0xD11B             BNE      ??OS_TickListUpdate_2
   \   000000AE   0x2004             MOVS     R0,#+4
   \   000000B0   0x70B0             STRB     R0,[R6, #+2]
   \   000000B2   0x0020             MOVS     R0,R4
   \   000000B4   0x.... 0x....      BL       OS_TickListRemove
   \   000000B8   0xE7C0             B        ??OS_TickListUpdate_1
   \                     ??OS_TickListUpdate_6: (+1)
   \   000000BA   0x69B0             LDR      R0,[R6, #+24]
   \   000000BC   0x6839             LDR      R1,[R7, #+0]
   \   000000BE   0x1A41             SUBS     R1,R0,R1
   \   000000C0   0x61F1             STR      R1,[R6, #+28]
   \   000000C2   0x6839             LDR      R1,[R7, #+0]
   \   000000C4   0x4281             CMP      R1,R0
   \   000000C6   0xD10E             BNE      ??OS_TickListUpdate_2
   \   000000C8   0x62B5             STR      R5,[R6, #+40]
   \   000000CA   0x85B5             STRH     R5,[R6, #+44]
   \   000000CC   0x60F5             STR      R5,[R6, #+12]
   \   000000CE   0x0020             MOVS     R0,R4
   \   000000D0   0x.... 0x....      BL       OS_PendListRemove
   \   000000D4   0x0020             MOVS     R0,R4
   \   000000D6   0x.... 0x....      BL       OS_TickListRemove
   \   000000DA   0x2004             MOVS     R0,#+4
   \   000000DC   0x70B0             STRB     R0,[R6, #+2]
   \   000000DE   0x2003             MOVS     R0,#+3
   \   000000E0   0x7070             STRB     R0,[R6, #+1]
   \   000000E2   0x7035             STRB     R5,[R6, #+0]
   \   000000E4   0xE7AA             B        ??OS_TickListUpdate_1
    508                  } else {
    509                      done  = DEF_TRUE;
    510                  }
    511              }
    512              ts_end = OS_TS_GET() - ts_start;                                   /* Measure execution time of tick task         */
    513              if (OSTickTaskTimeMax < ts_end) {
    514                  OSTickTaskTimeMax = ts_end;
    515              }
    516              OS_CRITICAL_EXIT();
   \                     ??OS_TickListUpdate_2: (+1)
   \   000000E6   0x.... 0x....      BL       CPU_SR_Save
   \   000000EA   0x0004             MOVS     R4,R0
   \   000000EC   0x.... 0x....      BL       CPU_IntDisMeasStart
   \   000000F0   0x....             LDR      R0,??DataTable6_9
   \   000000F2   0x7800             LDRB     R0,[R0, #+0]
   \   000000F4   0x1E40             SUBS     R0,R0,#+1
   \   000000F6   0x....             LDR      R1,??DataTable6_9
   \   000000F8   0x7008             STRB     R0,[R1, #+0]
   \   000000FA   0x0600             LSLS     R0,R0,#+24
   \   000000FC   0xD10B             BNE      ??OS_TickListUpdate_7
   \   000000FE   0x....             LDR      R0,??DataTable6_10
   \   00000100   0x8800             LDRH     R0,[R0, #+0]
   \   00000102   0x2800             CMP      R0,#+0
   \   00000104   0xD007             BEQ      ??OS_TickListUpdate_7
   \   00000106   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   0000010A   0x0020             MOVS     R0,R4
   \   0000010C   0x.... 0x....      BL       CPU_SR_Restore
   \   00000110   0x.... 0x....      BL       OS_Sched0
   \   00000114   0xBDF1             POP      {R0,R4-R7,PC}
   \                     ??OS_TickListUpdate_7: (+1)
   \   00000116   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   0000011A   0x0020             MOVS     R0,R4
   \   0000011C   0x.... 0x....      BL       CPU_SR_Restore
    517          }
   \   00000120   0xBDF1             POP      {R0,R4-R7,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x........         DC32     OSRunning

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x........         DC32     OSTickCtr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x........         DC32     OSTickTaskTimeMax

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x........         DC32     OSCfg_TickTaskStkBasePtr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x00007212         DC32     0x7212

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x........         DC32     OSCfg_TickTaskStkSize

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x........         DC32     OSCfg_StkSizeMin

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0x00007213         DC32     0x7213

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_8:
   \   00000000   0x........         DC32     OSCfg_TickTaskPrio

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_9:
   \   00000000   0x00007211         DC32     0x7211

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x........         DC32     OSCfg_TickTaskStkLimit

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x........         DC32     OS_TickTask

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x........         DC32     OSTickTaskTCB

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0x........         DC32     OSCfg_TickWheelSize

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   0x........         DC32     OSCfg_TickWheel

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \   00000000   0x........         DC32     OSTickCtr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \   00000000   0xFFFF0001         DC32     0xffff0001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_7:
   \   00000000   0x0000727E         DC32     0x727e

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_8:
   \   00000000   0x........         DC32     OSCfg_TickWheel+0x6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_9:
   \   00000000   0x........         DC32     OSSchedLockNestingCtr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_10:
   \   00000000   0x........         DC32     OSIntQNbrEntries

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x75 0x43          DC8 "uC/OS-III Tick Task"
   \              0x2F 0x4F    
   \              0x53 0x2D    
   \              0x49 0x49    
   \              0x49 0x20    
   \              0x54 0x69    
   \              0x63 0x6B    
   \              0x20 0x54    
   \              0x61 0x73    
   \              0x6B 0x00    

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       4   OS_TickListInit
      20   OS_TickListInsert
        20 __aeabi_uidivmod
       4   OS_TickListRemove
       0   OS_TickListResetPeak
      24   OS_TickListUpdate
        24   -> CPU_IntDisMeasStart
        24   -> CPU_IntDisMeasStop
        24   -> CPU_SR_Restore
        24   -> CPU_SR_Save
        24   -> OS_PendListRemove
        24   -> OS_Sched0
        24   -> OS_TaskRdy
        24   -> OS_TickListRemove
        24 __aeabi_uidivmod
      16   OS_TickTask
        16   -> OSTaskSemPend
        16   -> OS_TickListUpdate
      48   OS_TickTaskInit
        48   -> OSTaskCreate
        48   -> OS_TickListInit


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       4  ??DataTable5_8
       4  ??DataTable5_9
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_10
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable6_6
       4  ??DataTable6_7
       4  ??DataTable6_8
       4  ??DataTable6_9
      20  ?_0
      42  OS_TickListInit
     214  OS_TickListInsert
      60  OS_TickListRemove
      22  OS_TickListResetPeak
     290  OS_TickListUpdate
      36  OS_TickTask
     104  OS_TickTaskInit

 
 872 bytes in section .text
 
 872 bytes of CODE memory

Errors: none
Warnings: none

###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       17/Nov/2017  09:05:13
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  F:\iar\NC199B-100\Library\Source\APP\Tasks\app_task_dtu.c
#    Command line =  
#        F:\iar\NC199B-100\Library\Source\APP\Tasks\app_task_dtu.c -D
#        USE_STDPERIPH_DRIVER -D _STM32F10X_HD -D STM32F10X_CL -D DEBUG -D
#        STM32F103RC -D STM32_FLASH_SIZE=256 -D HSE_VALUE=25000000 -lCN
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\List\
#        -o
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        F:\iar\NC199B-100\Library\Project\IAR\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\User\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\AES\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Config\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\OS\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\User\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Source\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Port\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\OS\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Config\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Protocol\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Iap\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Driver\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\IAR\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\uCOS-III\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\CMSIS\CM3\CoreSupport\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\CMSIS\CM3\DeviceSupport\ST\STM32F10x\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\STM32F10x_StdPeriph_Driver\inc\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-CPU\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-CPU\ARM-Cortex-M3\IAR\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-LIB\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\OSAL\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\OSAL\OS\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\OS\uCOS-III\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\Source\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\Source\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\FatFs\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\FatFs\option\ -Om
#        --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\List\app_task_dtu.lst
#    Object file  =  
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\Obj\app_task_dtu.o
#
###############################################################################

F:\iar\NC199B-100\Library\Source\APP\Tasks\app_task_dtu.c
      1          /*******************************************************************************
      2           *   Filename:       app_task_dtu.c
      3           *   Revised:        All copyrights reserved to wumingshen.
      4           *   Revision:       v1.0
      5           *   Writer:	     wumingshen.
      6           *
      7           *   Description:    双击选中 dtu 按 Ctrl + H, 钩选 Match the case, Replace with
      8           *                   输入您要的名字，点击 Replace All
      9           *                   双击选中 Dtu 按 Ctrl + H, 钩选 Match the case, Replace with
     10           *                   输入您要的名字，点击 Replace All
     11           *                   双击选中 DTU 按 Ctrl + H, 钩选 Match the case, Replace with
     12           *                   输入您要的名字，点击 Replace All
     13           *                   在 app_cfg.h 中指定本任务的 优先级  （ APP_TASK_DTU_PRIO     ）
     14           *                                            和 任务堆栈（ APP_TASK_DTU_STK_SIZE ）大小
     15           *
     16           *   Notes:
     17           *     				E-mail: shenchangwei945@163.com
     18           *
     19           *******************************************************************************/
     20          
     21          /*******************************************************************************
     22           * INCLUDES
     23           */
     24          #define  SNL_APP_SOURCE
     25          #include <includes.h>
     26          #include <app_comm_protocol.h>
     27          #include <bsp_flash.h>
     28          #include <iap.h>
     29          #include <xprintf.h>
     30          #include <power_macro.h>
     31          #include <mx25.h>
     32          #include <FM24CL64.h>
     33          #include <crccheck.h>
     34          #include <ds3231.h>
     35          
     36          #ifdef VSC_INCLUDE_SOURCE_FILE_NAMES
     37          const  CPU_CHAR  *app_task_dtu__c = "$Id: $";
     38          #endif
     39          
     40          #define APP_TASK_DTU_EN     DEF_ENABLED
     41          #if APP_TASK_DTU_EN == DEF_ENABLED
     42          /*******************************************************************************
     43           * CONSTANTS
     44           */
     45          
     46          /*******************************************************************************
     47           * MACROS
     48           */
     49          #define CYCLE_TIME_TICKS            (OS_TICKS_PER_SEC * 1)
     50          
     51          /*******************************************************************************
     52           * TYPEDEFS
     53           */
     54          
     55          /***********************************************
     56          * 描述： 任务控制块（TCB）
     57          */

   \                                 In section .bss, align 4
     58          static  OS_TCB      AppTaskDtuTCB;
   \                     AppTaskDtuTCB:
   \   00000000                      DS8 184
   \   000000B8                      DS8 1024

   \                                 In section .bss, align 4
     59          OS_Q                DTU_RxQ;
   \                     DTU_RxQ:
   \   00000000                      DS8 36
     60          
     61          /***********************************************
     62          * 描述： 任务堆栈（STACKS）
     63          */
     64          static  CPU_STK  AppTaskDtuStk[ APP_TASK_DTU_STK_SIZE ];
     65          
     66          /*******************************************************************************
     67           * LOCAL VARIABLES
     68           */
     69          
     70          /*******************************************************************************
     71           * GLOBAL VARIABLES
     72           */
     73          
     74          /*******************************************************************************
     75           * LOCAL FUNCTIONS
     76           */
     77          static void    AppTaskDtu                 (void *p_arg);
     78          static void    APP_DtuInit                (void);
     79                 void     App_McuStatusInit          (void);
     80                 void     ReportDevStatusHandle      (void);
     81                 void     InformDtuConfigMode        (u8 mode);
     82                 
     83                 void     App_SendDataFromHistory     (void);
     84          
     85          INT08U          APP_DtuRxDataDealCB        (MODBUS_CH  *pch);
     86          INT08U          IAP_DtuRxDataDealCB        (MODBUS_CH  *pch);
     87          /*******************************************************************************
     88           * GLOBAL FUNCTIONS
     89           */
     90          
     91          /*******************************************************************************
     92           * EXTERN VARIABLES
     93           */
     94          
     95           /*******************************************************************************
     96           * EXTERN FUNCTIONS
     97           */
     98          extern void     uartprintf              (MODBUS_CH  *pch,const char *fmt, ...);
     99          
    100          /*******************************************************************************/
    101          
    102          /*******************************************************************************
    103           * 名    称： App_TaskDtuCreate
    104           * 功    能： **任务创建
    105           * 入口参数： 无
    106           * 出口参数： 无
    107           * 作    者： wumingshen.
    108           * 创建日期： 2015-02-05
    109           * 修    改：
    110           * 修改日期：
    111           * 备    注： 任务创建函数需要在app.h文件中声明
    112           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    113          void  App_TaskDtuCreate(void)
    114          {
   \                     App_TaskDtuCreate: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB08B             SUB      SP,SP,#+44
    115              OS_ERR  err;
    116          
    117              /***********************************************
    118              * 描述： 任务创建
    119              */
    120              OSTaskCreate((OS_TCB     *)&AppTaskDtuTCB,                      // 任务控制块  （当前文件中定义）
    121                           (CPU_CHAR   *)"App Task Dtu",                      // 任务名称
    122                           (OS_TASK_PTR ) AppTaskDtu,                         // 任务函数指针（当前文件中定义）
    123                           (void       *) 0,                                  // 任务函数参数
    124                           (OS_PRIO     ) APP_TASK_DTU_PRIO,                 // 任务优先级，不同任务优先级可以相同，0 < 优先级 < OS_CFG_PRIO_MAX - 2（app_cfg.h中定义）
    125                           (CPU_STK    *)&AppTaskDtuStk[0],                   // 任务栈顶
    126                           (CPU_STK_SIZE) APP_TASK_DTU_STK_SIZE / 10,         // 任务栈溢出报警值
    127                           (CPU_STK_SIZE) APP_TASK_DTU_STK_SIZE,              // 任务栈大小（CPU数据宽度 * 8 * size = 4 * 8 * size(字节)）（app_cfg.h中定义）
    128                           (OS_MSG_QTY  ) 0u,                                 // 可以发送给任务的最大消息队列数量
    129                           (OS_TICK     ) 0u,                                 // 相同优先级任务的轮循时间（ms），0为默认
    130                           (void       *) 0,                                  // 是一个指向它被用作一个TCB扩展用户提供的存储器位置
    131                           (OS_OPT      )(OS_OPT_TASK_STK_CHK |               // 允许堆栈检查该任务
    132                                          OS_OPT_TASK_STK_CLR),               // 创建任务时堆栈清零
    133                           (OS_ERR     *)&err);                               // 指向错误代码的指针，用于创建结果处理
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable8
   \   00000008   0xA909             ADD      R1,SP,#+36
   \   0000000A   0x9108             STR      R1,[SP, #+32]
   \   0000000C   0x2103             MOVS     R1,#+3
   \   0000000E   0x9107             STR      R1,[SP, #+28]
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x9106             STR      R1,[SP, #+24]
   \   00000014   0x9105             STR      R1,[SP, #+20]
   \   00000016   0x9104             STR      R1,[SP, #+16]
   \   00000018   0xF44F 0x7180      MOV      R1,#+256
   \   0000001C   0x9103             STR      R1,[SP, #+12]
   \   0000001E   0x2119             MOVS     R1,#+25
   \   00000020   0x9102             STR      R1,[SP, #+8]
   \   00000022   0xF100 0x01B8      ADD      R1,R0,#+184
   \   00000026   0x9101             STR      R1,[SP, #+4]
   \   00000028   0x2114             MOVS     R1,#+20
   \   0000002A   0x9100             STR      R1,[SP, #+0]
   \   0000002C   0x2300             MOVS     R3,#+0
   \   0000002E   0x.... 0x....      ADR.W    R2,AppTaskDtu
   \   00000032   0x.... 0x....      ADR.W    R1,?_0
   \   00000036   0x.... 0x....      BL       OSTaskCreate
    134          
    135          }
   \   0000003A   0xB00B             ADD      SP,SP,#+44
   \   0000003C   0xBD00             POP      {PC}             ;; return
    136          
    137          /*******************************************************************************
    138           * 名    称： AppTaskDtu
    139           * 功    能： 控制任务
    140           * 入口参数： p_arg - 由任务创建函数传入
    141           * 出口参数： 无
    142           * 作    者： wumingshen.
    143           * 创建日期： 2015-02-05
    144           * 修    改：
    145           * 修改日期：
    146           *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    147          static  void  AppTaskDtu (void *p_arg)
    148          {
   \                     AppTaskDtu: (+1)
   \   00000000   0xE92D 0x43FE      PUSH     {R1-R9,LR}
    149              OS_ERR      err;
    150          
    151              OS_TICK     dly     = CYCLE_TIME_TICKS;
   \   00000004   0xF44F 0x747A      MOV      R4,#+1000
   \   00000008   0x4627             MOV      R7,R4
    152              OS_TICK     ticks;
    153                  
    154              APP_DtuInit();
   \   0000000A   0x.... 0x....      BL       APP_DtuInit
    155              
    156              BSP_OS_TimeDly(OS_TICKS_PER_SEC / 2);
   \   0000000E   0xF44F 0x70FA      MOV      R0,#+500
   \   00000012   0x.... 0x....      BL       BSP_OS_TimeDly
   \   00000016   0x.... 0x....      LDR.W    R5,??DataTable8_1
   \   0000001A   0xF205 0x56DA      ADDW     R6,R5,#+1498
   \   0000001E   0xE000             B.N      ??AppTaskDtu_0
    157              /***********************************************
    158              * 描述： Task body, always written as an infinite loop.
    159              */
    160              while (DEF_TRUE) { 
    161                  /***********************************************
    162                  * 描述： 本任务看门狗标志置位
    163                  */
    164                  OS_FlagPost(( OS_FLAG_GRP *)&WdtFlagGRP,
    165                              ( OS_FLAGS     ) WDT_FLAG_DTU,
    166                              ( OS_OPT       ) OS_OPT_POST_FLAG_SET,
    167                              ( CPU_TS       ) 0,
    168                              ( OS_ERR      *) &err);
    169                  
    170                  /***********************************************
    171                  * 描述： 等待DTU数据接收消息队列
    172                  *
    173                  OS_MSG_SIZE p_msg_size;
    174                  
    175                  MODBUS_CH *pch = 
    176                 (MODBUS_CH *)OSQPend ((OS_Q*)&DTU_RxQ,
    177                              (OS_TICK       )dly,
    178                              (OS_OPT        )OS_OPT_PEND_BLOCKING,//OS_OPT_PEND_NON_BLOCKING,
    179                              (OS_MSG_SIZE  *)&p_msg_size,
    180                              (CPU_TS       *)0,
    181                              (OS_ERR       *)&err);
    182                  // DTU收到消息
    183                  if ( OS_ERR_NONE == err ) {
    184                      // 消息处理
    185                      APP_DtuRxDataDealCB(pch);
    186                  }
    187                  *//***********************************************
    188                  * 描述： 等待DTU操作标志位
    189                  */
    190                  OS_FLAGS    flags = 
    191                  OSFlagPend( ( OS_FLAG_GRP *)&Ctrl.Os.DtuEvtFlagGrp,
    192                              ( OS_FLAGS     ) Ctrl.Os.DtuEvtFlag,
    193                              ( OS_TICK      ) dly,
    194                              ( OS_OPT       ) OS_OPT_PEND_FLAG_SET_ANY,
    195                              ( CPU_TS      *) NULL,
    196                              ( OS_ERR      *)&err);
    197                  
    198                  OS_ERR      terr;
    199                  ticks   = OSTimeGet(&terr);                        // 获取当前OSTick
    200                  
    201                  /***********************************************
    202                  * 描述： 没有错误,有事件发生
    203                  */
    204                  if ( err == OS_ERR_NONE ) {
    205                      OS_FLAGS    flagClr = 0;
    206                      /***********************************************
    207                      * 描述： 心跳包发送
    208                      */
    209                      if       ( flags & COMM_EVT_FLAG_HEART  ) {
    210                          flagClr |= COMM_EVT_FLAG_HEART;
    211                      
    212                      /***********************************************
    213                      * 描述： DTU复位
    214                      */
    215                      } 
    216                      if ( flags & COMM_EVT_FLAG_RESET ) {
    217                          flagClr |= COMM_EVT_FLAG_RESET;
    218                          
    219                      /***********************************************
    220                      * 描述： DTU连接
    221                      */
    222                      } 
    223                      if ( flags & COMM_EVT_FLAG_CONNECT ) {
    224                          flagClr |= COMM_EVT_FLAG_CONNECT;
    225                          
    226                      /***********************************************
    227                      * 描述： DTU串口接收数据
    228                      */
    229                      } 
    230                      if ( flags & COMM_EVT_FLAG_RECV ) {
    231                          flagClr |= COMM_EVT_FLAG_RECV;
    232                          APP_DtuRxDataDealCB(Ctrl.Dtu.pch);
    233                      /***********************************************
    234                      * 描述： 上报消息
    235                      */
    236                      } 
    237                      if ( flags & COMM_EVT_FLAG_REPORT ) {
    238                          /***********************************************
    239                          * 描述： 发送历史数据到服务器
    240                          */
    241                          App_SendDataFromHistory();
    242                      /***********************************************
    243                      * 描述： 断开
    244                      */
    245                      } 
    246                      if ( flags & COMM_EVT_FLAG_CLOSE ) {
    247                          flagClr |= COMM_EVT_FLAG_CLOSE;
    248                          
    249                      /***********************************************
    250                      * 描述： 超时
    251                      */
    252                      } 
    253                      if ( flags & COMM_EVT_FLAG_TIMEOUT ) {
    254                          flagClr |= COMM_EVT_FLAG_TIMEOUT;
    255                          
    256                      /***********************************************
    257                      * 描述： 配置
    258                      */
    259                      } else if ( flags & COMM_EVT_FLAG_CONFIG ) {
    260                          flagClr |= COMM_EVT_FLAG_CONFIG;
    261                      
    262                      /***********************************************
    263                      * 描述： IAP结束
    264                      */
    265                      } 
    266                      if ( flags & COMM_EVT_FLAG_IAP_END ) {
    267                          flagClr |= COMM_EVT_FLAG_IAP_END;
    268                          
    269                      } 
    270                      //exit:
    271                      /***********************************************
    272                      * 描述： 清除标志
    273                      */
    274                      if ( !flagClr ) {
    275                          flagClr = flags;
    276                      }
    277                      
    278                      /***********************************************
    279                      * 描述： 清除标志位
    280                      */
    281                      OSFlagPost( ( OS_FLAG_GRP  *)&Ctrl.Os.DtuEvtFlagGrp,
    282                                  ( OS_FLAGS      )flagClr,
    283                                  ( OS_OPT        )OS_OPT_POST_FLAG_CLR,
    284                                  ( OS_ERR       *)&err);
    285                      
    286                  /***********************************************
    287                  * 描述： 如果超时，则发送一次心跳包
    288                  */
    289                  } else if ( err == OS_ERR_TIMEOUT ) {
    290                      
    291                  }
    292          //next:
    293                  /***********************************************
    294                  * 描述： 计算剩余时间
    295                  */
    296                  dly   = CYCLE_TIME_TICKS - ( OSTimeGet(&err) - ticks );
    297                  if ( dly  < 1 ) {
    298                      dly = 1;
   \                     ??AppTaskDtu_1: (+1)
   \   00000020   0x2701             MOVS     R7,#+1
    299                  } else if ( dly > CYCLE_TIME_TICKS ) {
   \                     ??AppTaskDtu_0: (+1)
   \   00000022   0xA802             ADD      R0,SP,#+8
   \   00000024   0x9000             STR      R0,[SP, #+0]
   \   00000026   0x2300             MOVS     R3,#+0
   \   00000028   0x461A             MOV      R2,R3
   \   0000002A   0x2101             MOVS     R1,#+1
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable8_2
   \   00000030   0x.... 0x....      BL       OS_FlagPost
   \   00000034   0xA802             ADD      R0,SP,#+8
   \   00000036   0x9001             STR      R0,[SP, #+4]
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0x9000             STR      R0,[SP, #+0]
   \   0000003C   0x2308             MOVS     R3,#+8
   \   0000003E   0x463A             MOV      R2,R7
   \   00000040   0xF8D5 0x15F6      LDR      R1,[R5, #+1526]
   \   00000044   0x4630             MOV      R0,R6
   \   00000046   0x.... 0x....      BL       OSFlagPend
   \   0000004A   0x4607             MOV      R7,R0
   \   0000004C   0x4668             MOV      R0,SP
   \   0000004E   0x.... 0x....      BL       OSTimeGet
   \   00000052   0x4680             MOV      R8,R0
   \   00000054   0xF8BD 0x0008      LDRH     R0,[SP, #+8]
   \   00000058   0x2800             CMP      R0,#+0
   \   0000005A   0xD134             BNE.N    ??AppTaskDtu_2
   \   0000005C   0xF04F 0x0900      MOV      R9,#+0
   \   00000060   0x07F8             LSLS     R0,R7,#+31
   \   00000062   0xD501             BPL.N    ??AppTaskDtu_3
   \   00000064   0xF04F 0x0901      MOV      R9,#+1
   \                     ??AppTaskDtu_3: (+1)
   \   00000068   0x07B8             LSLS     R0,R7,#+30
   \   0000006A   0xD501             BPL.N    ??AppTaskDtu_4
   \   0000006C   0xF049 0x0902      ORR      R9,R9,#0x2
   \                     ??AppTaskDtu_4: (+1)
   \   00000070   0x0778             LSLS     R0,R7,#+29
   \   00000072   0xD501             BPL.N    ??AppTaskDtu_5
   \   00000074   0xF049 0x0904      ORR      R9,R9,#0x4
   \                     ??AppTaskDtu_5: (+1)
   \   00000078   0x0738             LSLS     R0,R7,#+28
   \   0000007A   0xD505             BPL.N    ??AppTaskDtu_6
   \   0000007C   0xF049 0x0908      ORR      R9,R9,#0x8
   \   00000080   0xF8D5 0x0415      LDR      R0,[R5, #+1045]
   \   00000084   0x.... 0x....      BL       APP_DtuRxDataDealCB
   \                     ??AppTaskDtu_6: (+1)
   \   00000088   0x06F8             LSLS     R0,R7,#+27
   \   0000008A   0xD501             BPL.N    ??AppTaskDtu_7
   \   0000008C   0x.... 0x....      BL       App_SendDataFromHistory
   \                     ??AppTaskDtu_7: (+1)
   \   00000090   0x06B8             LSLS     R0,R7,#+26
   \   00000092   0xD501             BPL.N    ??AppTaskDtu_8
   \   00000094   0xF049 0x0920      ORR      R9,R9,#0x20
   \                     ??AppTaskDtu_8: (+1)
   \   00000098   0x0678             LSLS     R0,R7,#+25
   \   0000009A   0xD502             BPL.N    ??AppTaskDtu_9
   \   0000009C   0xF049 0x0940      ORR      R9,R9,#0x40
   \   000000A0   0xE003             B.N      ??AppTaskDtu_10
   \                     ??AppTaskDtu_9: (+1)
   \   000000A2   0x0638             LSLS     R0,R7,#+24
   \   000000A4   0xD501             BPL.N    ??AppTaskDtu_10
   \   000000A6   0xF049 0x0980      ORR      R9,R9,#0x80
   \                     ??AppTaskDtu_10: (+1)
   \   000000AA   0x05B8             LSLS     R0,R7,#+22
   \   000000AC   0xD501             BPL.N    ??AppTaskDtu_11
   \   000000AE   0xF449 0x7900      ORR      R9,R9,#0x200
   \                     ??AppTaskDtu_11: (+1)
   \   000000B2   0xF1B9 0x0F00      CMP      R9,#+0
   \   000000B6   0xD100             BNE.N    ??AppTaskDtu_12
   \   000000B8   0x46B9             MOV      R9,R7
   \                     ??AppTaskDtu_12: (+1)
   \   000000BA   0xAB02             ADD      R3,SP,#+8
   \   000000BC   0x2201             MOVS     R2,#+1
   \   000000BE   0x4649             MOV      R1,R9
   \   000000C0   0x4630             MOV      R0,R6
   \   000000C2   0x.... 0x....      BL       OSFlagPost
   \                     ??AppTaskDtu_2: (+1)
   \   000000C6   0xA802             ADD      R0,SP,#+8
   \   000000C8   0x.... 0x....      BL       OSTimeGet
   \   000000CC   0xF5C0 0x707A      RSB      R0,R0,#+1000
   \   000000D0   0xEB18 0x0700      ADDS     R7,R8,R0
   \   000000D4   0xD0A4             BEQ.N    ??AppTaskDtu_1
   \   000000D6   0xF5B7 0x7F7A      CMP      R7,#+1000
   \   000000DA   0xD9A2             BLS.N    ??AppTaskDtu_0
    300                      dly = CYCLE_TIME_TICKS;
   \   000000DC   0x4627             MOV      R7,R4
   \   000000DE   0xE7A0             B.N      ??AppTaskDtu_0
    301                  }
    302              }
    303          }
    304          
    305          /*******************************************************************************
    306           * 名    称： APP_DtuInit
    307           * 功    能： 任务初始化
    308           * 入口参数： 无
    309           * 出口参数： 无
    310           * 作    者： wumingshen.
    311           * 创建日期： 2015-03-28
    312           * 修    改：
    313           * 修改日期：
    314           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    315           void APP_DtuInit(void)
    316          {
   \                     APP_DtuInit: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    317              OS_ERR err;
    318              
    319              /***********************************************
    320              * 描述： 创建事件标志组
    321              */
    322              OSFlagCreate(( OS_FLAG_GRP  *)&Ctrl.Os.DtuEvtFlagGrp,
    323                           ( CPU_CHAR     *)"App_DtuFlag",
    324                           ( OS_FLAGS      )0,
    325                           ( OS_ERR       *)&err);
   \   00000004   0x.... 0x....      LDR.W    R4,??DataTable8_1
   \   00000008   0x466B             MOV      R3,SP
   \   0000000A   0x2200             MOVS     R2,#+0
   \   0000000C   0x.... 0x....      ADR.W    R1,?_1
   \   00000010   0xF204 0x50DA      ADDW     R0,R4,#+1498
   \   00000014   0x.... 0x....      BL       OSFlagCreate
    326              
    327              Ctrl.Os.DtuEvtFlag = COMM_EVT_FLAG_HEART       // 心跳包发送
    328                                  + COMM_EVT_FLAG_RESET       // DTU复位
    329                                  + COMM_EVT_FLAG_CONNECT     // DTU连接
    330                                  + COMM_EVT_FLAG_RECV        // 串口接收
    331                                  + COMM_EVT_FLAG_REPORT      // 串口发送
    332                                  + COMM_EVT_FLAG_CLOSE       // 断开
    333                                  + COMM_EVT_FLAG_TIMEOUT     // 超时
    334                                  + COMM_EVT_FLAG_CONFIG      // 配置
    335                                  + COMM_EVT_FLAG_IAP_START   // IAP开始
    336                                  + COMM_EVT_FLAG_IAP_END;    // IAP结束
   \   00000018   0xF240 0x30FF      MOVW     R0,#+1023
   \   0000001C   0xF8C4 0x05F6      STR      R0,[R4, #+1526]
    337                      
    338              OSQCreate ( (OS_Q        *)&DTU_RxQ,
    339                          (CPU_CHAR    *)"RxQ",
    340                          (OS_MSG_QTY   ) OS_CFG_INT_Q_SIZE,
    341                          (OS_ERR      *)&err);
   \   00000020   0x466B             MOV      R3,SP
   \   00000022   0x2264             MOVS     R2,#+100
   \   00000024   0x....             ADR.N    R1,??DataTable7  ;; "RxQ"
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable8_3
   \   0000002A   0x.... 0x....      BL       OSQCreate
    342              /***********************************************
    343              * 描述： 在看门狗标志组注册本任务的看门狗标志
    344              */
    345              WdtFlags |= WDT_FLAG_DTU;
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable8_4
   \   00000032   0x6801             LDR      R1,[R0, #+0]
   \   00000034   0xF041 0x0101      ORR      R1,R1,#0x1
   \   00000038   0x6001             STR      R1,[R0, #+0]
    346          }
   \   0000003A   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    347          
    348          /*******************************************************************************
    349           * 名    称： APP_DtuRxDataDealCB
    350           * 功    能： 串口数据处理回调函数，由MB_DATA.C调用
    351           * 入口参数： 无
    352           * 出口参数： 无
    353           * 作    者： 无名沈
    354           * 创建日期： 2016-01-04
    355           * 修    改：
    356           * 修改日期：
    357           * 备    注： 
    358           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    359          INT08U APP_DtuRxDataDealCB(MODBUS_CH  *pch)
    360          {
    361             
    362              return TRUE;
   \                     APP_DtuRxDataDealCB: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
    363          }
    364          
    365          /*******************************************************************************
    366          * 名    称： UpdateRecordPoint
    367          * 功    能： 
    368          * 入口参数： 无
    369          * 出口参数： 无
    370          * 作  　者： wumingshen.
    371          * 创建日期： 2017-02-07
    372          * 修    改：
    373          * 修改日期：
    374          * 备    注：
    375          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    376          void UpdateRecordPoint(uint8_t storeflag)
    377          {
   \                     UpdateRecordPoint: (+1)
   \   00000000   0xB418             PUSH     {R3,R4}
    378              uint32_t    size    = sizeof(StrMater) - sizeof(StrMaterRecord);             // 获取记录长度
    379              Mater.Record.Tail  += size;
   \   00000002   0x.... 0x....      LDR.W    R1,??DataTable8_5
   \   00000006   0xF101 0x0284      ADD      R2,R1,#+132
   \   0000000A   0x6853             LDR      R3,[R2, #+4]
   \   0000000C   0x3380             ADDS     R3,R3,#+128
   \   0000000E   0x6053             STR      R3,[R2, #+4]
    380              
    381              if ( Mater.Record.Tail >= MAX_ADDR ) {
   \   00000010   0x....             LDR.N    R4,??DataTable8_6  ;; 0xffff80
   \   00000012   0x42A3             CMP      R3,R4
   \   00000014   0xD302             BCC.N    ??UpdateRecordPoint_0
    382                  Mater.Record.Tail = 0; 
   \   00000016   0x2300             MOVS     R3,#+0
   \   00000018   0x6053             STR      R3,[R2, #+4]
   \   0000001A   0xE003             B.N      ??UpdateRecordPoint_1
    383              } else if ( Mater.Record.Tail >= Mater.Record.Head ) {
   \                     ??UpdateRecordPoint_0: (+1)
   \   0000001C   0x6814             LDR      R4,[R2, #+0]
   \   0000001E   0x42A3             CMP      R3,R4
   \   00000020   0xD300             BCC.N    ??UpdateRecordPoint_1
    384                  Mater.Record.Tail  = Mater.Record.Head; 
   \   00000022   0x6054             STR      R4,[R2, #+4]
    385              }
    386              if ( storeflag ) {
   \                     ??UpdateRecordPoint_1: (+1)
   \   00000024   0x2800             CMP      R0,#+0
   \   00000026   0xD005             BEQ.N    ??UpdateRecordPoint_2
    387                  //WriteFM24CL64(72, (uint8_t *)&Mater.Head, 4);    
    388                  WriteFM24CL64(76, (uint8_t *)&Mater.Record.Tail, 4); 
   \   00000028   0x2204             MOVS     R2,#+4
   \   0000002A   0x3188             ADDS     R1,R1,#+136
   \   0000002C   0x204C             MOVS     R0,#+76
   \   0000002E   0xBC18             POP      {R3,R4}
   \   00000030   0x.... 0x....      B.W      WriteFM24CL64
    389                  //WriteFM24CL64(80, (uint8_t *)&Mater.RecordNbr, 4);
    390              }
    391          }
   \                     ??UpdateRecordPoint_2: (+1)
   \   00000034   0xBC11             POP      {R0,R4}
   \   00000036   0x4770             BX       LR               ;; return
    392          
    393          /*******************************************************************************
    394           * 名    称： App_SaveDataToHistory
    395           * 功    能：
    396           * 入口参数：
    397           * 出口参数： 无
    398           * 作 　 者： 无名沈
    399           * 创建日期： 2017-02-7
    400           * 修    改：
    401           * 修改日期：
    402           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    403          void  App_SaveDataToHistory( void )
    404          {
   \                     App_SaveDataToHistory: (+1)
   \   00000000   0xB57C             PUSH     {R2-R6,LR}
    405              /**************************************************
    406              * 描述： 保存当前数据
    407              */
    408              uint32_t    size = sizeof(StrMater) - sizeof(StrMaterRecord);             // 数据长度
    409              CPU_SR      cpu_sr;
    410              
    411              uint8_t time[6];
    412              GetTime((TIME *)&time[0]);
   \   00000002   0x4668             MOV      R0,SP
   \   00000004   0x.... 0x....      BL       GetTime
    413               
    414              OS_CRITICAL_ENTER(); 
   \   00000008   0x.... 0x....      BL       CPU_SR_Save
   \   0000000C   0x4605             MOV      R5,R0
   \   0000000E   0x.... 0x....      BL       CPU_IntDisMeasStart
   \   00000012   0x....             LDR.N    R4,??DataTable8_7
   \   00000014   0x7820             LDRB     R0,[R4, #+0]
   \   00000016   0x1C40             ADDS     R0,R0,#+1
   \   00000018   0x7020             STRB     R0,[R4, #+0]
   \   0000001A   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   0000001E   0x4628             MOV      R0,R5
   \   00000020   0x.... 0x....      BL       CPU_SR_Restore
    415              
    416              if ( Ctrl.Tax.ConnectFlag == FALSE ) { 
   \   00000024   0x....             LDR.N    R5,??DataTable8_5
   \   00000026   0x....             LDR.N    R6,??DataTable8_1
   \   00000028   0xF896 0x046A      LDRB     R0,[R6, #+1130]
   \   0000002C   0x09C0             LSRS     R0,R0,#+7
   \   0000002E   0xD13B             BNE.N    ??App_SaveDataToHistory_0
    417                  /***************************************************
    418                  * 描述： 读取时间
    419                  */
    420                  Mater.Tax.Tax2.LKJTime.Year  = time[0];
   \   00000030   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000034   0xF8D5 0x105B      LDR      R1,[R5, #+91]
   \   00000038   0xF360 0x619F      BFI      R1,R0,#+26,#+6
   \   0000003C   0xF8C5 0x105B      STR      R1,[R5, #+91]
    421                  Mater.Tax.Tax2.LKJTime.Mon   = time[1];
   \   00000040   0x4668             MOV      R0,SP
   \   00000042   0x7841             LDRB     R1,[R0, #+1]
   \   00000044   0xF8D5 0x205B      LDR      R2,[R5, #+91]
   \   00000048   0xF361 0x5299      BFI      R2,R1,#+22,#+4
   \   0000004C   0xF8C5 0x205B      STR      R2,[R5, #+91]
    422                  Mater.Tax.Tax2.LKJTime.Day   = time[2];
   \   00000050   0xF89D 0x1002      LDRB     R1,[SP, #+2]
   \   00000054   0xF8D5 0x205B      LDR      R2,[R5, #+91]
   \   00000058   0xF361 0x4255      BFI      R2,R1,#+17,#+5
   \   0000005C   0xF8C5 0x205B      STR      R2,[R5, #+91]
    423                  Mater.Tax.Tax2.LKJTime.Hour  = time[3];
   \   00000060   0xF89D 0x1003      LDRB     R1,[SP, #+3]
   \   00000064   0xF8D5 0x205B      LDR      R2,[R5, #+91]
   \   00000068   0xF361 0x3210      BFI      R2,R1,#+12,#+5
   \   0000006C   0xF8C5 0x205B      STR      R2,[R5, #+91]
    424                  Mater.Tax.Tax2.LKJTime.Min   = time[4];
   \   00000070   0x7900             LDRB     R0,[R0, #+4]
   \   00000072   0xF8D5 0x105B      LDR      R1,[R5, #+91]
   \   00000076   0xF360 0x118B      BFI      R1,R0,#+6,#+6
   \   0000007A   0xF8C5 0x105B      STR      R1,[R5, #+91]
    425                  Mater.Tax.Tax2.LKJTime.Sec   = time[5];
   \   0000007E   0xF89D 0x0005      LDRB     R0,[SP, #+5]
   \   00000082   0xF8D5 0x105B      LDR      R1,[R5, #+91]
   \   00000086   0xF360 0x0105      BFI      R1,R0,#+0,#+6
   \   0000008A   0xF8C5 0x105B      STR      R1,[R5, #+91]
    426                      
    427                  Mater.TaxType   = 0;
   \   0000008E   0xF105 0x0031      ADD      R0,R5,#+49
   \   00000092   0x2100             MOVS     R1,#+0
   \   00000094   0x72C1             STRB     R1,[R0, #+11]
    428                  Mater.TeZhengMa = 0;
   \   00000096   0x7301             STRB     R1,[R0, #+12]
    429                  
    430                  memcpy((uint8_t *)&Mater.Tax.buf1[0],(uint8_t *)&Ctrl.Tax.Dat.buf1[6],64);
   \   00000098   0x2240             MOVS     R2,#+64
   \   0000009A   0xF206 0x4124      ADDW     R1,R6,#+1060
   \   0000009E   0xF105 0x003E      ADD      R0,R5,#+62
   \   000000A2   0x.... 0x....      BL       __aeabi_memcpy
    431              } else {
   \   000000A6   0xE042             B.N      ??App_SaveDataToHistory_1
    432                  /**************************************************
    433                  * 描述： 复制TAX箱数据；
    434                  */
    435                  switch ( Ctrl.Tax.Dat.buf1[0] ) {
   \                     ??App_SaveDataToHistory_0: (+1)
   \   000000A8   0xF206 0x411E      ADDW     R1,R6,#+1054
   \   000000AC   0x780A             LDRB     R2,[R1, #+0]
   \   000000AE   0x4610             MOV      R0,R2
   \   000000B0   0x2838             CMP      R0,#+56
   \   000000B2   0xD012             BEQ.N    ??App_SaveDataToHistory_2
   \   000000B4   0x2839             CMP      R0,#+57
   \   000000B6   0xD01F             BEQ.N    ??App_SaveDataToHistory_3
   \   000000B8   0x28F0             CMP      R0,#+240
   \   000000BA   0xD001             BEQ.N    ??App_SaveDataToHistory_4
   \   000000BC   0x28FA             CMP      R0,#+250
   \   000000BE   0xD12A             BNE.N    ??App_SaveDataToHistory_5
    436                  /***********************************************
    437                  * 描述： TAX2015协议：=0XF0：TAX2设备；
    438                  */
    439                  case 0xFA:
    440                  /***********************************************
    441                  * 描述： TAX2015协议：=0XFA：TAX3设备
    442                  */
    443                  case 0xF0:
    444                      Mater.TaxType   = Ctrl.Tax.Dat.Tax3.Head.SheBeiLeiXing;
   \                     ??App_SaveDataToHistory_4: (+1)
   \   000000C0   0xF105 0x0031      ADD      R0,R5,#+49
   \   000000C4   0x72C2             STRB     R2,[R0, #+11]
    445                      Mater.TeZhengMa = Ctrl.Tax.Dat.Tax3.Head.TeZhengMa.Dat;
   \   000000C6   0x7849             LDRB     R1,[R1, #+1]
   \   000000C8   0x7301             STRB     R1,[R0, #+12]
    446                      memcpy((uint8_t *)&Mater.Tax.buf1[0],(uint8_t *)&Ctrl.Tax.Dat.buf1[6],64);
   \   000000CA   0x2240             MOVS     R2,#+64
   \   000000CC   0xF206 0x4124      ADDW     R1,R6,#+1060
   \   000000D0   0xF105 0x003E      ADD      R0,R5,#+62
   \   000000D4   0x.... 0x....      BL       __aeabi_memcpy
    447                      break;
   \   000000D8   0xE029             B.N      ??App_SaveDataToHistory_1
    448                  /***********************************************
    449                  * 描述： 老TAX2协议
    450                  */
    451                  case 0x38:
    452                      Mater.TaxType   = Ctrl.Tax.Dat.Tax2.Record.Addr;
   \                     ??App_SaveDataToHistory_2: (+1)
   \   000000DA   0xF105 0x0031      ADD      R0,R5,#+49
   \   000000DE   0xF896 0x243E      LDRB     R2,[R6, #+1086]
   \   000000E2   0x72C2             STRB     R2,[R0, #+11]
    453                      Mater.TeZhengMa = Ctrl.Tax.Dat.Tax2.CheZhanHaoKuoChong;
   \   000000E4   0x7949             LDRB     R1,[R1, #+5]
   \   000000E6   0x7301             STRB     R1,[R0, #+12]
    454                      memcpy((uint8_t *)&Mater.Tax.buf1[0],(uint8_t *)&Ctrl.Tax.Dat.buf1[6],64);
   \   000000E8   0x2240             MOVS     R2,#+64
   \   000000EA   0xF206 0x4124      ADDW     R1,R6,#+1060
   \   000000EE   0xF105 0x003E      ADD      R0,R5,#+62
   \   000000F2   0x.... 0x....      BL       __aeabi_memcpy
    455                      break;
   \   000000F6   0xE01A             B.N      ??App_SaveDataToHistory_1
    456                  /***********************************************
    457                  * 描述： 老TAX2协议
    458                  */
    459                  case 0x39:
    460                      Mater.TaxType   = Ctrl.Tax.Dat.Tax2.Record.Addr;
   \                     ??App_SaveDataToHistory_3: (+1)
   \   000000F8   0xF105 0x0031      ADD      R0,R5,#+49
   \   000000FC   0xF896 0x243E      LDRB     R2,[R6, #+1086]
   \   00000100   0x72C2             STRB     R2,[R0, #+11]
    461                      Mater.TeZhengMa = Ctrl.Tax.Dat.Tax2.CheZhanHaoKuoChong;
   \   00000102   0x7949             LDRB     R1,[R1, #+5]
   \   00000104   0x7301             STRB     R1,[R0, #+12]
    462                      memcpy((uint8_t *)&Mater.Tax.buf1[24],(uint8_t *)&Ctrl.Tax.Dat.buf1[32],40);
   \   00000106   0x2228             MOVS     R2,#+40
   \   00000108   0xF206 0x413E      ADDW     R1,R6,#+1086
   \   0000010C   0xF105 0x0056      ADD      R0,R5,#+86
   \   00000110   0x.... 0x....      BL       __aeabi_memcpy
    463                      break;
   \   00000114   0xE00B             B.N      ??App_SaveDataToHistory_1
    464                  default:
    465                      Mater.TaxType   = 0;
   \                     ??App_SaveDataToHistory_5: (+1)
   \   00000116   0xF105 0x0031      ADD      R0,R5,#+49
   \   0000011A   0x2100             MOVS     R1,#+0
   \   0000011C   0x72C1             STRB     R1,[R0, #+11]
    466                      Mater.TeZhengMa = 0;
   \   0000011E   0x7301             STRB     R1,[R0, #+12]
    467                      memcpy((uint8_t *)&Mater.Tax.buf1[0],(uint8_t *)&Ctrl.Tax.Dat.buf1[6],64);
   \   00000120   0x2240             MOVS     R2,#+64
   \   00000122   0xF206 0x4124      ADDW     R1,R6,#+1060
   \   00000126   0xF105 0x003E      ADD      R0,R5,#+62
   \   0000012A   0x.... 0x....      BL       __aeabi_memcpy
    468                      break;
    469                  }
    470              }
    471              
    472              Mater.ErrTax    = Ctrl.Tax.ConnectFlag;
   \                     ??App_SaveDataToHistory_1: (+1)
   \   0000012E   0xF105 0x0031      ADD      R0,R5,#+49
   \   00000132   0xF896 0x146A      LDRB     R1,[R6, #+1130]
   \   00000136   0x09C9             LSRS     R1,R1,#+7
   \   00000138   0x6802             LDR      R2,[R0, #+0]
   \   0000013A   0xF361 0x6259      BFI      R2,R1,#+25,#+1
   \   0000013E   0x6002             STR      R2,[R0, #+0]
    473          	Mater.chk       = GetCrc16Chk1((uint8_t *)&Mater,size-2);       // 获取存储校验码
   \   00000140   0x217E             MOVS     R1,#+126
   \   00000142   0x4628             MOV      R0,R5
   \   00000144   0x.... 0x....      BL       GetCrc16Chk1
   \   00000148   0xF8A5 0x007E      STRH     R0,[R5, #+126]
    474              
    475              OS_CRITICAL_EXIT();
   \   0000014C   0x.... 0x....      BL       CPU_SR_Save
   \   00000150   0x4606             MOV      R6,R0
   \   00000152   0x.... 0x....      BL       CPU_IntDisMeasStart
   \   00000156   0x7820             LDRB     R0,[R4, #+0]
   \   00000158   0x1E40             SUBS     R0,R0,#+1
   \   0000015A   0x7020             STRB     R0,[R4, #+0]
   \   0000015C   0xB2C0             UXTB     R0,R0
   \   0000015E   0x2800             CMP      R0,#+0
   \   00000160   0xD10B             BNE.N    ??App_SaveDataToHistory_6
   \   00000162   0x....             LDR.N    R0,??DataTable8_8
   \   00000164   0x8800             LDRH     R0,[R0, #+0]
   \   00000166   0x2800             CMP      R0,#+0
   \   00000168   0xD007             BEQ.N    ??App_SaveDataToHistory_6
   \   0000016A   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   0000016E   0x4630             MOV      R0,R6
   \   00000170   0x.... 0x....      BL       CPU_SR_Restore
   \   00000174   0x.... 0x....      BL       OS_Sched0
   \   00000178   0xE004             B.N      ??App_SaveDataToHistory_7
   \                     ??App_SaveDataToHistory_6: (+1)
   \   0000017A   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   0000017E   0x4630             MOV      R0,R6
   \   00000180   0x.... 0x....      BL       CPU_SR_Restore
    476              
    477              SaveOneREcord(Mater.Record.Head,(uint8_t *)&Mater,size);        // 保存数据
   \                     ??App_SaveDataToHistory_7: (+1)
   \   00000184   0xF105 0x0484      ADD      R4,R5,#+132
   \   00000188   0x2280             MOVS     R2,#+128
   \   0000018A   0x4629             MOV      R1,R5
   \   0000018C   0x6820             LDR      R0,[R4, #+0]
   \   0000018E   0x.... 0x....      BL       SaveOneREcord
    478          	Mater.Record.Head += size;                                      // 更改头指针
   \   00000192   0x6820             LDR      R0,[R4, #+0]
   \   00000194   0x3080             ADDS     R0,R0,#+128
   \   00000196   0x6020             STR      R0,[R4, #+0]
    479              
    480              if ( Mater.Record.Head >= MAX_ADDR ) {                          // 头指针溢出
   \   00000198   0x6861             LDR      R1,[R4, #+4]
   \   0000019A   0x....             LDR.N    R2,??DataTable8_6  ;; 0xffff80
   \   0000019C   0x4290             CMP      R0,R2
   \   0000019E   0xD306             BCC.N    ??App_SaveDataToHistory_8
    481                  Mater.Record.Head = 0;                                      // 溢出指针归零
   \   000001A0   0x2000             MOVS     R0,#+0
   \   000001A2   0x6020             STR      R0,[R4, #+0]
    482                  if ( Mater.Record.Tail == 0 )                               // 检查尾指针是否为零
   \   000001A4   0x2900             CMP      R1,#+0
   \   000001A6   0xD10B             BNE.N    ??App_SaveDataToHistory_9
    483                      Mater.Record.Tail  += size;                             // 为零更改尾指针
   \   000001A8   0x2080             MOVS     R0,#+128
   \   000001AA   0x6060             STR      R0,[R4, #+4]
   \   000001AC   0xE008             B.N      ??App_SaveDataToHistory_9
    484              } else {                                                        // 头指针没有溢出
    485                  if ( Mater.Record.Tail >= Mater.Record.Head ) {             // 尾指针大于等于头指针
   \                     ??App_SaveDataToHistory_8: (+1)
   \   000001AE   0x4281             CMP      R1,R0
   \   000001B0   0xD306             BCC.N    ??App_SaveDataToHistory_9
    486                      Mater.Record.Tail  += size;                             // 更改尾指针
   \   000001B2   0xF101 0x0080      ADD      R0,R1,#+128
   \   000001B6   0x6060             STR      R0,[R4, #+4]
    487                      if ( Mater.Record.Tail >= MAX_ADDR )                    // 尾指针溢出
   \   000001B8   0x4290             CMP      R0,R2
   \   000001BA   0xD301             BCC.N    ??App_SaveDataToHistory_9
    488                          Mater.Record.Tail = 0;                              // 尾指针归零
   \   000001BC   0x2000             MOVS     R0,#+0
   \   000001BE   0x6060             STR      R0,[R4, #+4]
    489                  }
    490              }
    491              
    492              Mater.RecordNbr++;                                              // 记录号+1
   \                     ??App_SaveDataToHistory_9: (+1)
   \   000001C0   0xF8D5 0x0006      LDR      R0,[R5, #+6]
   \   000001C4   0x1C40             ADDS     R0,R0,#+1
   \   000001C6   0xF8C5 0x0006      STR      R0,[R5, #+6]
    493              
    494              /**************************************************
    495              * 描述： 保存当前记录号和数据指针
    496              */
    497          	WriteFM24CL64(72, (uint8_t *)&Mater.Record.Head, 4); 
   \   000001CA   0x2204             MOVS     R2,#+4
   \   000001CC   0x4621             MOV      R1,R4
   \   000001CE   0x2048             MOVS     R0,#+72
   \   000001D0   0x.... 0x....      BL       WriteFM24CL64
    498          	WriteFM24CL64(76, (uint8_t *)&Mater.Record.Tail, 4);
   \   000001D4   0x2204             MOVS     R2,#+4
   \   000001D6   0xF105 0x0188      ADD      R1,R5,#+136
   \   000001DA   0x204C             MOVS     R0,#+76
   \   000001DC   0x.... 0x....      BL       WriteFM24CL64
    499          	WriteFM24CL64(80, (uint8_t *)&Mater.RecordNbr, 4);
   \   000001E0   0x2204             MOVS     R2,#+4
   \   000001E2   0x1DA9             ADDS     R1,R5,#+6
   \   000001E4   0x2050             MOVS     R0,#+80
   \   000001E6   0x.... 0x....      BL       WriteFM24CL64
    500              
    501              osal_set_event( OS_TASK_ID_TMR, OS_EVT_TMR_MIN);
   \   000001EA   0x2108             MOVS     R1,#+8
   \   000001EC   0x2000             MOVS     R0,#+0
   \   000001EE   0x.... 0x....      BL       osal_set_event
    502          }
   \   000001F2   0xBD73             POP      {R0,R1,R4-R6,PC}  ;; return
    503          
    504          /*******************************************************************************
    505           * 名    称： App_SendDataFromHistory
    506           * 功    能： 数据转储,数据低字节在前，高字节在后 
    507           * 入口参数：
    508           * 出口参数： 无
    509           * 作 　 者： 无名沈
    510           * 创建日期： 2017-02-7
    511           * 修    改：
    512           * 修改日期：
    513           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    514          void App_SendDataFromHistory(void)
    515          {	    
   \                     App_SendDataFromHistory: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x....             LDR.N    R0,??DataTable8_9
   \   00000004   0x7900             LDRB     R0,[R0, #+4]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD004             BEQ.N    ??App_SendDataFromHistory_0
   \   0000000A   0x2806             CMP      R0,#+6
   \   0000000C   0xD002             BEQ.N    ??App_SendDataFromHistory_0
   \   0000000E   0x2805             CMP      R0,#+5
   \   00000010   0xF040 0x80A2      BNE.W    ??App_SendDataFromHistory_1
    516              /***********************************************
    517              * 描述： 如果程序处在升级模式
    518              */
    519              if ( ( Iap.Status != IAP_STS_DEF ) && 
    520                   ( Iap.Status != IAP_STS_SUCCEED ) &&
    521                   ( Iap.Status != IAP_STS_FAILED ) ) {
    522                  return;
    523              }
    524              
    525              
    526              Ctrl.Dtu.pack->SrcAddr  = 0x81;
   \                     ??App_SendDataFromHistory_0: (+1)
   \   00000014   0x....             LDR.N    R4,??DataTable8_1
   \   00000016   0x2081             MOVS     R0,#+129
   \   00000018   0xF8D4 0x141A      LDR      R1,[R4, #+1050]
   \   0000001C   0x7008             STRB     R0,[R1, #+0]
    527              Ctrl.Dtu.pack->DstAddr  = 0xCB;
   \   0000001E   0x20CB             MOVS     R0,#+203
   \   00000020   0xF8D4 0x141A      LDR      R1,[R4, #+1050]
   \   00000024   0x7048             STRB     R0,[R1, #+1]
    528              Ctrl.Dtu.pack->Pack.Udat.VerHigh  = PROTOCOL_VER_HIG;
   \   00000026   0xF8D4 0x041A      LDR      R0,[R4, #+1050]
   \   0000002A   0x7901             LDRB     R1,[R0, #+4]
   \   0000002C   0xF001 0x013F      AND      R1,R1,#0x3F
   \   00000030   0x7101             STRB     R1,[R0, #+4]
    529              Ctrl.Dtu.pack->Pack.Udat.VerLow   = PROTOCOL_VER_LOW;
   \   00000032   0xF8D4 0x041A      LDR      R0,[R4, #+1050]
   \   00000036   0x7901             LDRB     R1,[R0, #+4]
   \   00000038   0xF001 0x01F0      AND      R1,R1,#0xF0
   \   0000003C   0xF041 0x0102      ORR      R1,R1,#0x2
   \   00000040   0x7101             STRB     R1,[R0, #+4]
    530              Ctrl.Dtu.pack->Pack.Udat.ChkType  = RS485_CHK_CRC;
   \   00000042   0xF8D4 0x041A      LDR      R0,[R4, #+1050]
   \   00000046   0x7901             LDRB     R1,[R0, #+4]
   \   00000048   0xF001 0x01CF      AND      R1,R1,#0xCF
   \   0000004C   0xF041 0x0110      ORR      R1,R1,#0x10
   \   00000050   0x7101             STRB     R1,[R0, #+4]
    531              Ctrl.Dtu.pack->Data     = (CPU_INT08U     *)&History;
   \   00000052   0x....             LDR.N    R5,??DataTable8_10
   \   00000054   0xF8D4 0x041A      LDR      R0,[R4, #+1050]
   \   00000058   0xF8C0 0x5006      STR      R5,[R0, #+6]
    532              Ctrl.Dtu.pack->Len      = (CPU_INT08U      ) 128;
   \   0000005C   0x2080             MOVS     R0,#+128
   \   0000005E   0xF8D4 0x141A      LDR      R1,[R4, #+1050]
   \   00000062   0x7148             STRB     R0,[R1, #+5]
    533              
    534              CSNC_SendData( (MODBUS_CH      *) Ctrl.Dtu.pch,                     // DistAddr,
    535                             (StrNcProtocol  *) Ctrl.Dtu.pack);                    // DataLen 
   \   00000064   0xF8D4 0x141A      LDR      R1,[R4, #+1050]
   \   00000068   0xF8D4 0x0415      LDR      R0,[R4, #+1045]
   \   0000006C   0x.... 0x....      BL       CSNC_SendData
    536               
    537          
    538              
    539              /***********************************************
    540              * 描述： 头指针在前面（缓冲区未满）
    541              */
    542              if ( Mater.Record.Head == Mater.Record.Tail ) {
   \   00000070   0x....             LDR.N    R1,??DataTable8_11
   \   00000072   0x6848             LDR      R0,[R1, #+4]
   \   00000074   0x6809             LDR      R1,[R1, #+0]
   \   00000076   0x4281             CMP      R1,R0
   \   00000078   0xD107             BNE.N    ??App_SendDataFromHistory_2
    543                  osal_start_timerRl( OS_TASK_ID_TMR, OS_EVT_TMR_MIN ,  OS_TICKS_PER_SEC * 10);
   \   0000007A   0xF242 0x7210      MOVW     R2,#+10000
   \   0000007E   0x2108             MOVS     R1,#+8
   \   00000080   0x2000             MOVS     R0,#+0
   \   00000082   0xE8BD 0x4038      POP      {R3-R5,LR}
   \   00000086   0x.... 0x....      B.W      osal_start_timerRl
    544              /***********************************************
    545              * 描述： 头指针在后面（缓冲区已满）
    546              */
    547              } else {
    548                  uint32_t    size    = sizeof(StrMater) - sizeof(StrMaterRecord);        // 获取记录长度
    549          		MX25L3206_RD(Mater.Record.Tail, size,(uint8_t*)&History);  // 读取一条记录
   \                     ??App_SendDataFromHistory_2: (+1)
   \   0000008A   0x462A             MOV      R2,R5
   \   0000008C   0x2180             MOVS     R1,#+128
   \   0000008E   0x.... 0x....      BL       MX25L3206_RD
    550                  
    551                  /**************************************************
    552                  * 描述： 数据校验
    553                  */
    554          		uint16_t    CRC_sum1 = GetCrc16Chk1((uint8_t*)&History,size-2);		
   \   00000092   0x217E             MOVS     R1,#+126
   \   00000094   0x4628             MOV      R0,R5
   \   00000096   0x.... 0x....      BL       GetCrc16Chk1
    555          		uint16_t    CRC_sum2 = History.chk;
    556                  uint32_t    timeout  = OS_TICKS_PER_SEC * 5;
   \   0000009A   0xF241 0x3288      MOVW     R2,#+5000
    557                  /**************************************************
    558                  * 描述： 发送记录至服务器
    559                  */
    560          		if(CRC_sum1 == CRC_sum2) {						    //进行累加和计算
   \   0000009E   0xF8B5 0x107E      LDRH     R1,[R5, #+126]
   \   000000A2   0x4288             CMP      R0,R1
   \   000000A4   0xD14F             BNE.N    ??App_SendDataFromHistory_3
    561                      if (Ctrl.Dtu.pch->RxBufByteCtr == 0) {
   \   000000A6   0xF8D4 0x0415      LDR      R0,[R4, #+1045]
   \   000000AA   0x8E00             LDRH     R0,[R0, #+48]
   \   000000AC   0x2800             CMP      R0,#+0
   \   000000AE   0xD144             BNE.N    ??App_SendDataFromHistory_4
    562                          Ctrl.Dtu.pack->SrcAddr  = 0x81;
   \   000000B0   0x2081             MOVS     R0,#+129
   \   000000B2   0xF8D4 0x141A      LDR      R1,[R4, #+1050]
   \   000000B6   0x7008             STRB     R0,[R1, #+0]
    563                          Ctrl.Dtu.pack->DstAddr  = 0xCB;
   \   000000B8   0x20CB             MOVS     R0,#+203
   \   000000BA   0xF8D4 0x141A      LDR      R1,[R4, #+1050]
   \   000000BE   0x7048             STRB     R0,[R1, #+1]
    564                          Ctrl.Dtu.pack->Pack.Udat.VerHigh  = PROTOCOL_VER_HIG;
   \   000000C0   0xF8D4 0x041A      LDR      R0,[R4, #+1050]
   \   000000C4   0x7901             LDRB     R1,[R0, #+4]
   \   000000C6   0xF001 0x013F      AND      R1,R1,#0x3F
   \   000000CA   0x7101             STRB     R1,[R0, #+4]
    565                          Ctrl.Dtu.pack->Pack.Udat.VerLow   = PROTOCOL_VER_LOW;
   \   000000CC   0xF8D4 0x041A      LDR      R0,[R4, #+1050]
   \   000000D0   0x7901             LDRB     R1,[R0, #+4]
   \   000000D2   0xF001 0x01F0      AND      R1,R1,#0xF0
   \   000000D6   0xF041 0x0102      ORR      R1,R1,#0x2
   \   000000DA   0x7101             STRB     R1,[R0, #+4]
    566                          Ctrl.Dtu.pack->Pack.Udat.ChkType  = RS485_CHK_CRC;
   \   000000DC   0xF8D4 0x041A      LDR      R0,[R4, #+1050]
   \   000000E0   0x7901             LDRB     R1,[R0, #+4]
   \   000000E2   0xF001 0x01CF      AND      R1,R1,#0xCF
   \   000000E6   0xF041 0x0110      ORR      R1,R1,#0x10
   \   000000EA   0x7101             STRB     R1,[R0, #+4]
    567                          Ctrl.Dtu.pack->Data     = (CPU_INT08U     *)&History;
   \   000000EC   0xF8D4 0x041A      LDR      R0,[R4, #+1050]
   \   000000F0   0xF8C0 0x5006      STR      R5,[R0, #+6]
    568                          Ctrl.Dtu.pack->Len      = (CPU_INT08U      ) size;
   \   000000F4   0x2080             MOVS     R0,#+128
   \   000000F6   0xF8D4 0x141A      LDR      R1,[R4, #+1050]
   \   000000FA   0x7148             STRB     R0,[R1, #+5]
    569                          
    570                          CSNC_SendData( (MODBUS_CH      *) Ctrl.Dtu.pch,                     // DistAddr,
    571                                         (StrNcProtocol  *) Ctrl.Dtu.pack);                    // DataLen 
   \   000000FC   0xF8D4 0x141A      LDR      R1,[R4, #+1050]
   \   00000100   0xF8D4 0x0415      LDR      R0,[R4, #+1045]
   \   00000104   0x.... 0x....      BL       CSNC_SendData
    572                           
    573                          Ctrl.Dtu.pch->StatNoRespCtr++;
   \   00000108   0xF8D4 0x0415      LDR      R0,[R4, #+1045]
   \   0000010C   0x8CC1             LDRH     R1,[R0, #+38]
   \   0000010E   0x1C49             ADDS     R1,R1,#+1
   \   00000110   0x84C1             STRH     R1,[R0, #+38]
   \   00000112   0xF8D4 0x0415      LDR      R0,[R4, #+1045]
   \   00000116   0x8CC0             LDRH     R0,[R0, #+38]
   \   00000118   0x280A             CMP      R0,#+10
   \   0000011A   0xDA02             BGE.N    ??App_SendDataFromHistory_5
    574                          if ( Ctrl.Dtu.pch->StatNoRespCtr < 10 ) {
    575                              timeout     = OS_TICKS_PER_SEC * 10; 
   \   0000011C   0xF242 0x7210      MOVW     R2,#+10000
   \   00000120   0xE00B             B.N      ??App_SendDataFromHistory_4
    576                          } else if ( Ctrl.Dtu.pch->StatNoRespCtr < 50 ) {
   \                     ??App_SendDataFromHistory_5: (+1)
   \   00000122   0x2832             CMP      R0,#+50
   \   00000124   0xDA02             BGE.N    ??App_SendDataFromHistory_6
    577                              timeout     = OS_TICKS_PER_SEC * 20; 
   \   00000126   0xF644 0x6220      MOVW     R2,#+20000
   \   0000012A   0xE006             B.N      ??App_SendDataFromHistory_4
    578                          } else if ( Ctrl.Dtu.pch->StatNoRespCtr < 100 ) {
   \                     ??App_SendDataFromHistory_6: (+1)
   \   0000012C   0x2864             CMP      R0,#+100
   \   0000012E   0xDA02             BGE.N    ??App_SendDataFromHistory_7
    579                              timeout     = OS_TICKS_PER_SEC * 30; 
   \   00000130   0xF247 0x5230      MOVW     R2,#+30000
   \   00000134   0xE001             B.N      ??App_SendDataFromHistory_4
    580                          } else {                
    581                              timeout     = OS_TICKS_PER_SEC * 60; 
   \                     ??App_SendDataFromHistory_7: (+1)
   \   00000136   0xF64E 0x2260      MOVW     R2,#+60000
    582                          }
    583                          
    584                          //uartprintf(Ctrl.Com.pch,"\r\n发送记录数据：%d",Mater.RecordNbr);
    585                      }
    586                      osal_start_timerRl( OS_TASK_ID_TMR, OS_EVT_TMR_MIN, timeout );
   \                     ??App_SendDataFromHistory_4: (+1)
   \   0000013A   0x2108             MOVS     R1,#+8
   \   0000013C   0x2000             MOVS     R0,#+0
   \   0000013E   0xE8BD 0x4038      POP      {R3-R5,LR}
   \   00000142   0x.... 0x....      B.W      osal_start_timerRl
    587                  } else {
    588                      UpdateRecordPoint(0);
   \                     ??App_SendDataFromHistory_3: (+1)
   \   00000146   0x2000             MOVS     R0,#+0
   \   00000148   0x.... 0x....      BL       UpdateRecordPoint
    589                      
    590                      osal_set_event( OS_TASK_ID_TMR, OS_EVT_TMR_MIN);
   \   0000014C   0x2108             MOVS     R1,#+8
   \   0000014E   0x2000             MOVS     R0,#+0
   \   00000150   0xE8BD 0x4034      POP      {R2,R4,R5,LR}
   \   00000154   0x.... 0x....      B.W      osal_set_event
    591                      //timeout = OS_TICKS_PER_SEC * 1;
    592                  }
    593                  
    594              }
    595          }
   \                     ??App_SendDataFromHistory_1: (+1)
   \   00000158   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x52 0x78          DC8      "RxQ"
   \              0x51 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0x........         DC32     AppTaskDtuTCB

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   0x........         DC32     Ctrl

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \   00000000   0x........         DC32     WdtFlagGRP

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_3:
   \   00000000   0x........         DC32     DTU_RxQ

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_4:
   \   00000000   0x........         DC32     WdtFlags

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_5:
   \   00000000   0x........         DC32     Mater

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_6:
   \   00000000   0x00FFFF80         DC32     0xffff80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_7:
   \   00000000   0x........         DC32     OSSchedLockNestingCtr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_8:
   \   00000000   0x........         DC32     OSIntQNbrEntries

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_9:
   \   00000000   0x........         DC32     Iap

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_10:
   \   00000000   0x........         DC32     History

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_11:
   \   00000000   0x........         DC32     Mater+0x84

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x41 0x70          DC8 "App Task Dtu"
   \              0x70 0x20    
   \              0x54 0x61    
   \              0x73 0x6B    
   \              0x20 0x44    
   \              0x74 0x75    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x41 0x70          DC8 "App_DtuFlag"
   \              0x70 0x5F    
   \              0x44 0x74    
   \              0x75 0x46    
   \              0x6C 0x61    
   \              0x67 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x52 0x78          DC8 "RxQ"
   \              0x51 0x00    
    596          
    597          /*******************************************************************************
    598           * 				end of file
    599           *******************************************************************************/
    600          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   APP_DtuInit
        16   -> OSFlagCreate
        16   -> OSQCreate
       0   APP_DtuRxDataDealCB
      40   AppTaskDtu
        40   -> APP_DtuInit
        40   -> APP_DtuRxDataDealCB
        40   -> App_SendDataFromHistory
        40   -> BSP_OS_TimeDly
        40   -> OSFlagPend
        40   -> OSFlagPost
        40   -> OSTimeGet
        40   -> OS_FlagPost
      24   App_SaveDataToHistory
        24   -> CPU_IntDisMeasStart
        24   -> CPU_IntDisMeasStop
        24   -> CPU_SR_Restore
        24   -> CPU_SR_Save
        24   -> GetCrc16Chk1
        24   -> GetTime
        24   -> OS_Sched0
        24   -> SaveOneREcord
        24   -> WriteFM24CL64
        24   -> __aeabi_memcpy
        24   -> osal_set_event
      16   App_SendDataFromHistory
        16   -> CSNC_SendData
        16   -> GetCrc16Chk1
        16   -> MX25L3206_RD
        16   -> UpdateRecordPoint
         0   -> osal_set_event
         0   -> osal_start_timerRl
      48   App_TaskDtuCreate
        48   -> OSTaskCreate
       8   UpdateRecordPoint
         0   -> WriteFM24CL64


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_10
       4  ??DataTable8_11
       4  ??DataTable8_2
       4  ??DataTable8_3
       4  ??DataTable8_4
       4  ??DataTable8_5
       4  ??DataTable8_6
       4  ??DataTable8_7
       4  ??DataTable8_8
       4  ??DataTable8_9
      16  ?_0
      12  ?_1
       4  ?_2
      60  APP_DtuInit
       4  APP_DtuRxDataDealCB
     224  AppTaskDtu
    1208  AppTaskDtuTCB
          AppTaskDtuStk
     500  App_SaveDataToHistory
     346  App_SendDataFromHistory
      62  App_TaskDtuCreate
      36  DTU_RxQ
      56  UpdateRecordPoint

 
 1 244 bytes in section .bss
     4 bytes in section .rodata
 1 332 bytes in section .text
 
 1 332 bytes of CODE  memory
     4 bytes of CONST memory
 1 244 bytes of DATA  memory

Errors: none
Warnings: none

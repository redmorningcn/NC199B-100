###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       30/Nov/2017  10:06:11
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  F:\iar\NC199B-100\Library\Source\BSP\IAR\cstartup.c
#    Command line =  
#        F:\iar\NC199B-100\Library\Source\BSP\IAR\cstartup.c -D
#        USE_STDPERIPH_DRIVER -D _STM32F10X_HD -D STM32F10X_CL -D DEBUG -D
#        STM32F103RC -D STM32_FLASH_SIZE=256 -D HSE_VALUE=25000000 -lCN
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\List\
#        -o
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        F:\iar\NC199B-100\Library\Project\IAR\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\User\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\AES\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Config\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\OS\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\User\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Source\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Port\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\OS\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Config\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Protocol\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Iap\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Driver\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\IAR\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\uCOS-III\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\CMSIS\CM3\CoreSupport\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\CMSIS\CM3\DeviceSupport\ST\STM32F10x\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\STM32F10x_StdPeriph_Driver\inc\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-CPU\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-CPU\ARM-Cortex-M3\IAR\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-LIB\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\OSAL\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\OSAL\OS\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\OS\uCOS-III\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\Source\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\Source\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\FatFs\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\FatFs\option\ -Om
#        --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\List\cstartup.lst
#    Object file  =  
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\Obj\cstartup.o
#
###############################################################################

F:\iar\NC199B-100\Library\Source\BSP\IAR\cstartup.c
      1          /*
      2          *********************************************************************************************************
      3          *                                              EXAMPLE CODE
      4          *
      5          *                          (c) Copyright 2003-2013; Micrium, Inc.; Weston, FL
      6          *
      7          *               All rights reserved.  Protected by international copyright laws.
      8          *               Knowledge of the source code may NOT be used to develop a similar product.
      9          *               Please help us continue to provide the Embedded community with the finest
     10          *               software available.  Your honesty is greatly appreciated.
     11          *********************************************************************************************************
     12          */
     13          
     14          /*
     15          *********************************************************************************************************
     16          *
     17          *                                         EXCEPTION VECTORS
     18          *
     19          *                                     ST Microelectronics STM32
     20          *                                              on the
     21          *
     22          *                                     Micrium uC-Eval-STM32F107
     23          *                                        Evaluation Board
     24          *
     25          * Filename      : cstartup.c
     26          * Version       : V1.10
     27          * Programmer(s) : BAN
     28          *                 DC
     29          *********************************************************************************************************
     30          */
     31          
     32          #include <includes.h>
     33          #include <bsp_os.h>
     34          #include <global.h>
     35          
     36          
     37          /*
     38          *********************************************************************************************************
     39          *                                            LOCAL DEFINES
     40          *********************************************************************************************************
     41          */
     42          
     43          
     44          /*
     45          *********************************************************************************************************
     46          *                                          LOCAL DATA TYPES
     47          *********************************************************************************************************
     48          */
     49          
     50          typedef  union {
     51              CPU_FNCT_VOID   Fnct;
     52              void           *Ptr;
     53          } APP_INTVECT_ELEM;
     54          
     55          /*
     56          *********************************************************************************************************
     57          *                                            LOCAL TABLES
     58          *********************************************************************************************************
     59          */
     60          
     61          
     62          /*
     63          *********************************************************************************************************
     64          *                                       LOCAL GLOBAL VARIABLES
     65          *********************************************************************************************************
     66          */
     67          
     68          
     69          /*
     70          *********************************************************************************************************
     71          *                                      LOCAL FUNCTION PROTOTYPES
     72          *********************************************************************************************************
     73          */
     74          
     75          #pragma language=extended
     76          #pragma segment="CSTACK"
     77          
     78          static  void  App_NMI_ISR        (void);
     79          
     80          static  void  App_Fault_ISR      (void);
     81          
     82          static  void  App_BusFault_ISR   (void);
     83          
     84          static  void  App_UsageFault_ISR (void);
     85          
     86          static  void  App_MemFault_ISR   (void);
     87          
     88          static  void  App_Spurious_ISR   (void);
     89          
     90          static  void  App_Reserved_ISR   (void);
     91          
     92          extern  void  __iar_program_start(void);
     93          
     94          
     95          /*
     96          *********************************************************************************************************
     97          *                                     LOCAL CONFIGURATION ERRORS
     98          *********************************************************************************************************
     99          */
    100          
    101          /*
    102          *********************************************************************************************************
    103          *                                  EXCEPTION / INTERRUPT VECTOR TABLE
    104          *
    105          * Note(s) : (1) The Cortex-M3 may have up to 256 external interrupts, which are the final entries in the
    106          *               vector table.  The STM32 has 48 external interrupt vectors.
    107          *********************************************************************************************************
    108          */
    109          

   \                                 In section .intvec, align 4, root
    110          __root  const  APP_INTVECT_ELEM  __vector_table[] @ ".intvec" = {
   \                     __vector_table:
   \   00000000   0x........         DC32 SFE(CSTACK), __iar_program_start, App_NMI_ISR, App_Fault_ISR
   \              0x........   
   \              0x........   
   \              0x........   
   \   00000010   0x........         DC32 App_MemFault_ISR, App_BusFault_ISR, App_UsageFault_ISR
   \              0x........   
   \              0x........   
   \   0000001C   0x........         DC32 App_Spurious_ISR, App_Spurious_ISR, App_Spurious_ISR
   \              0x........   
   \              0x........   
   \   00000028   0x........         DC32 App_Spurious_ISR, App_Spurious_ISR, App_Spurious_ISR
   \              0x........   
   \              0x........   
   \   00000034   0x........         DC32 App_Spurious_ISR, OS_CPU_PendSVHandler, OS_CPU_SysTickHandler
   \              0x........   
   \              0x........   
   \   00000040   0x........         DC32 BSP_IntHandlerWWDG, BSP_IntHandlerPVD, BSP_IntHandlerTAMPER
   \              0x........   
   \              0x........   
   \   0000004C   0x........         DC32 BSP_IntHandlerRTC, BSP_IntHandlerFLASH, BSP_IntHandlerRCC
   \              0x........   
   \              0x........   
   \   00000058   0x........         DC32 BSP_IntHandlerEXTI0, BSP_IntHandlerEXTI1, BSP_IntHandlerEXTI2
   \              0x........   
   \              0x........   
   \   00000064   0x........         DC32 BSP_IntHandlerEXTI3, BSP_IntHandlerEXTI4, BSP_IntHandlerDMA1_CH1
   \              0x........   
   \              0x........   
   \   00000070   0x........         DC32 BSP_IntHandlerDMA1_CH2, BSP_IntHandlerDMA1_CH3
   \              0x........   
   \   00000078   0x........         DC32 BSP_IntHandlerDMA1_CH4, BSP_IntHandlerDMA1_CH5
   \              0x........   
   \   00000080   0x........         DC32 BSP_IntHandlerDMA1_CH6, BSP_IntHandlerDMA1_CH7
   \              0x........   
   \   00000088   0x........         DC32 BSP_IntHandlerADC1_2, BSP_IntHandlerCAN1_TX
   \              0x........   
   \   00000090   0x........         DC32 BSP_IntHandlerCAN1_RX0, BSP_IntHandlerCAN1_RX1
   \              0x........   
   \   00000098   0x........         DC32 BSP_IntHandlerCAN1_SCE, BSP_IntHandlerEXTI9_5
   \              0x........   
   \   000000A0   0x........         DC32 BSP_IntHandlerTIM1_BRK, BSP_IntHandlerTIM1_UP
   \              0x........   
   \   000000A8   0x........         DC32 BSP_IntHandlerTIM1_TRG_COM, BSP_IntHandlerTIM1_CC
   \              0x........   
   \   000000B0   0x........         DC32 BSP_IntHandlerTIM2, BSP_IntHandlerTIM3, BSP_IntHandlerTIM4
   \              0x........   
   \              0x........   
   \   000000BC   0x........         DC32 BSP_IntHandlerI2C1_EV, BSP_IntHandlerI2C1_ER
   \              0x........   
   \   000000C4   0x........         DC32 BSP_IntHandlerI2C2_EV, BSP_IntHandlerI2C2_ER, BSP_IntHandlerSPI1
   \              0x........   
   \              0x........   
   \   000000D0   0x........         DC32 BSP_IntHandlerSPI2, BSP_IntHandlerUSART1, BSP_IntHandlerUSART2
   \              0x........   
   \              0x........   
   \   000000DC   0x........         DC32 BSP_IntHandlerUSART3, BSP_IntHandlerEXTI15_10
   \              0x........   
   \   000000E4   0x........         DC32 BSP_IntHandlerRTCAlarm, BSP_IntHandlerUSBWakeUp, App_Reserved_ISR
   \              0x........   
   \              0x........   
   \   000000F0   0x........         DC32 App_Reserved_ISR, App_Reserved_ISR, App_Reserved_ISR
   \              0x........   
   \              0x........   
   \   000000FC   0x........         DC32 App_Reserved_ISR, App_Reserved_ISR, App_Reserved_ISR
   \              0x........   
   \              0x........   
   \   00000108   0x........         DC32 BSP_IntHandlerTIM5, BSP_IntHandlerSPI3, BSP_IntHandlerUSART4
   \              0x........   
   \              0x........   
   \   00000114   0x........         DC32 BSP_IntHandlerUSART5, BSP_IntHandlerTIM6, BSP_IntHandlerTIM7
   \              0x........   
   \              0x........   
   \   00000120   0x........         DC32 BSP_IntHandlerDMA2_CH1, BSP_IntHandlerDMA2_CH2
   \              0x........   
   \   00000128   0x........         DC32 BSP_IntHandlerDMA2_CH3, BSP_IntHandlerDMA2_CH4
   \              0x........   
   \   00000130   0x........         DC32 BSP_IntHandlerDMA2_CH5, BSP_IntHandlerETH, BSP_IntHandlerETHWakeup
   \              0x........   
   \              0x........   
   \   0000013C   0x........         DC32 BSP_IntHandlerCAN2_TX, BSP_IntHandlerCAN2_RX0
   \              0x........   
   \   00000144   0x........         DC32 BSP_IntHandlerCAN2_RX1, BSP_IntHandlerCAN2_SCE, BSP_IntHandlerOTG
   \              0x........   
   \              0x........   
    111              { .Ptr = (void *)__sfe( "CSTACK" )},                        /*  0, SP start value.                                  */
    112              __iar_program_start,                                        /*  1, PC start value.                                  */
    113              App_NMI_ISR,                                                /*  2, NMI.                                             */
    114              App_Fault_ISR,                                              /*  3, Hard Fault.                                      */
    115              App_MemFault_ISR,                                           /*  4, Memory Management.                               */
    116              App_BusFault_ISR,                                           /*  5, Bus Fault.                                       */
    117              App_UsageFault_ISR,                                         /*  6, Usage Fault.                                     */
    118              App_Spurious_ISR,                                           /*  7, Reserved.                                        */
    119              App_Spurious_ISR,                                           /*  8, Reserved.                                        */
    120              App_Spurious_ISR,                                           /*  9, Reserved.                                        */
    121              App_Spurious_ISR,                                           /* 10, Reserved.                                        */
    122              App_Spurious_ISR,                                           /* 11, SVCall.                                          */
    123              App_Spurious_ISR,                                           /* 12, Debug Monitor.                                   */
    124              App_Spurious_ISR,                                           /* 13, Reserved.                                        */
    125              OS_CPU_PendSVHandler,                                       /* 14, PendSV Handler.                                  */
    126              OS_CPU_SysTickHandler,                                      /* 15, uC/OS-II Tick ISR Handler.                       */
    127          
    128              BSP_IntHandlerWWDG,                                         /* 16, INTISR[  0]  Window Watchdog.                    */
    129              BSP_IntHandlerPVD,                                          /* 17, INTISR[  1]  PVD through EXTI Line Detection.    */
    130              BSP_IntHandlerTAMPER,                                       /* 18, INTISR[  2]  Tamper Interrupt.                   */
    131              BSP_IntHandlerRTC,                                          /* 19, INTISR[  3]  RTC Global Interrupt.               */
    132              BSP_IntHandlerFLASH,                                        /* 20, INTISR[  4]  FLASH Global Interrupt.             */
    133              BSP_IntHandlerRCC,                                          /* 21, INTISR[  5]  RCC Global Interrupt.               */
    134              BSP_IntHandlerEXTI0,                                        /* 22, INTISR[  6]  EXTI Line0 Interrupt.               */
    135              BSP_IntHandlerEXTI1,                                        /* 23, INTISR[  7]  EXTI Line1 Interrupt.               */
    136              BSP_IntHandlerEXTI2,                                        /* 24, INTISR[  8]  EXTI Line2 Interrupt.               */
    137              BSP_IntHandlerEXTI3,                                        /* 25, INTISR[  9]  EXTI Line3 Interrupt.               */
    138              BSP_IntHandlerEXTI4,                                        /* 26, INTISR[ 10]  EXTI Line4 Interrupt.               */
    139              BSP_IntHandlerDMA1_CH1,                                     /* 27, INTISR[ 11]  DMA Channel1 Global Interrupt.      */
    140              BSP_IntHandlerDMA1_CH2,                                     /* 28, INTISR[ 12]  DMA Channel2 Global Interrupt.      */
    141              BSP_IntHandlerDMA1_CH3,                                     /* 29, INTISR[ 13]  DMA Channel3 Global Interrupt.      */
    142              BSP_IntHandlerDMA1_CH4,                                     /* 30, INTISR[ 14]  DMA Channel4 Global Interrupt.      */
    143              BSP_IntHandlerDMA1_CH5,                                     /* 31, INTISR[ 15]  DMA Channel5 Global Interrupt.      */
    144          
    145              BSP_IntHandlerDMA1_CH6,                                     /* 32, INTISR[ 16]  DMA Channel6 Global Interrupt.      */
    146              BSP_IntHandlerDMA1_CH7,                                     /* 33, INTISR[ 17]  DMA Channel7 Global Interrupt.      */
    147              BSP_IntHandlerADC1_2,                                       /* 34, INTISR[ 18]  ADC1 & ADC2 Global Interrupt.       */
    148              BSP_IntHandlerCAN1_TX,                                      /* 35, INTISR[ 19]  USB High Prio / CAN TX  Interrupts. */
    149              BSP_IntHandlerCAN1_RX0,                                     /* 36, INTISR[ 20]  USB Low  Prio / CAN RX0 Interrupts. */
    150              BSP_IntHandlerCAN1_RX1,                                     /* 37, INTISR[ 21]  CAN RX1 Interrupt.                  */
    151              BSP_IntHandlerCAN1_SCE,                                     /* 38, INTISR[ 22]  CAN SCE Interrupt.                  */
    152              BSP_IntHandlerEXTI9_5,                                      /* 39, INTISR[ 23]  EXTI Line[9:5] Interrupt.           */
    153              BSP_IntHandlerTIM1_BRK,                                     /* 40, INTISR[ 24]  TIM1 Break  Interrupt.              */
    154              BSP_IntHandlerTIM1_UP,                                      /* 41, INTISR[ 25]  TIM1 Update Interrupt.              */
    155              BSP_IntHandlerTIM1_TRG_COM,                                 /* 42, INTISR[ 26]  TIM1 Trig & Commutation Interrupts. */
    156              BSP_IntHandlerTIM1_CC,                                      /* 43, INTISR[ 27]  TIM1 Capture Compare Interrupt.     */
    157              BSP_IntHandlerTIM2,                                         /* 44, INTISR[ 28]  TIM2 Global Interrupt.              */
    158              BSP_IntHandlerTIM3,                                         /* 45, INTISR[ 29]  TIM3 Global Interrupt.              */
    159              BSP_IntHandlerTIM4,                                         /* 46, INTISR[ 30]  TIM4 Global Interrupt.              */
    160              BSP_IntHandlerI2C1_EV,                                      /* 47, INTISR[ 31]  I2C1 Event  Interrupt.              */
    161              BSP_IntHandlerI2C1_ER,                                      /* 48, INTISR[ 32]  I2C1 Error  Interrupt.              */
    162              BSP_IntHandlerI2C2_EV,                                      /* 49, INTISR[ 33]  I2C2 Event  Interrupt.              */
    163              BSP_IntHandlerI2C2_ER,                                      /* 50, INTISR[ 34]  I2C2 Error  Interrupt.              */
    164              BSP_IntHandlerSPI1,                                         /* 51, INTISR[ 35]  SPI1 Global Interrupt.              */
    165              BSP_IntHandlerSPI2,                                         /* 52, INTISR[ 36]  SPI2 Global Interrupt.              */
    166              BSP_IntHandlerUSART1,                                       /* 53, INTISR[ 37]  USART1 Global Interrupt.            */
    167              BSP_IntHandlerUSART2,                                       /* 54, INTISR[ 38]  USART2 Global Interrupt.            */
    168              BSP_IntHandlerUSART3,                                       /* 55, INTISR[ 39]  USART3 Global Interrupt.            */
    169              BSP_IntHandlerEXTI15_10,                                    /* 56, INTISR[ 40]  EXTI Line [15:10] Interrupts.       */
    170              BSP_IntHandlerRTCAlarm,                                     /* 57, INTISR[ 41]  RTC Alarm EXT Line Interrupt.       */
    171              BSP_IntHandlerUSBWakeUp,                                    /* 58, INTISR[ 42]  USB Wakeup from Suspend EXTI Int.   */
    172          
    173              App_Reserved_ISR,                                           /* 59, INTISR[ 43]  USB Wakeup from Suspend EXTI Int.   */
    174              App_Reserved_ISR,                                           /* 60, INTISR[ 44]  USB Wakeup from Suspend EXTI Int.   */
    175              App_Reserved_ISR,                                           /* 61, INTISR[ 45]  USB Wakeup from Suspend EXTI Int.   */
    176              App_Reserved_ISR,                                           /* 62, INTISR[ 46]  USB Wakeup from Suspend EXTI Int.   */
    177              App_Reserved_ISR,                                           /* 63, INTISR[ 47]  USB Wakeup from Suspend EXTI Int.   */
    178              App_Reserved_ISR,                                           /* 64, INTISR[ 48]  USB Wakeup from Suspend EXTI Int.   */
    179              App_Reserved_ISR,                                           /* 65, INTISR[ 49]  USB Wakeup from Suspend EXTI Int.   */
    180          
    181              BSP_IntHandlerTIM5,                                         /* 66, INTISR[ 50]  TIM5 global Interrupt.              */
    182              BSP_IntHandlerSPI3,                                         /* 67, INTISR[ 51]  SPI3 global Interrupt.              */
    183              BSP_IntHandlerUSART4,                                       /* 68, INTISR[ 52]  UART4 global Interrupt.             */
    184              BSP_IntHandlerUSART5,                                       /* 69, INTISR[ 53]  UART5 global Interrupt.             */
    185              BSP_IntHandlerTIM6,                                         /* 70, INTISR[ 54]  TIM6 global Interrupt.              */
    186              BSP_IntHandlerTIM7,                                         /* 71, INTISR[ 55]  TIM7 global Interrupt.              */
    187              BSP_IntHandlerDMA2_CH1,                                     /* 72, INTISR[ 56]  DMA2 Channel 1 global Interrupt.    */
    188              BSP_IntHandlerDMA2_CH2,                                     /* 73, INTISR[ 57]  DMA2 Channel 2 global Interrupt.    */
    189              BSP_IntHandlerDMA2_CH3,                                     /* 74, INTISR[ 58]  DMA2 Channel 3 global Interrupt.    */
    190              BSP_IntHandlerDMA2_CH4,                                     /* 75, INTISR[ 59]  DMA2 Channel 4 global Interrupt.    */
    191              BSP_IntHandlerDMA2_CH5,                                     /* 76, INTISR[ 60]  DMA2 Channel 5 global Interrupt.    */
    192              BSP_IntHandlerETH,                                          /* 77, INTISR[ 61]  ETH global Interrupt.               */
    193              BSP_IntHandlerETHWakeup,                                    /* 78, INTISR[ 62]  ETH WakeUp from EXTI line Int.      */
    194              BSP_IntHandlerCAN2_TX,                                      /* 79, INTISR[ 63]  CAN2 TX Interrupts.                 */
    195              BSP_IntHandlerCAN2_RX0,                                     /* 80, INTISR[ 64]  CAN2 RX0 Interrupts.                */
    196              BSP_IntHandlerCAN2_RX1,                                     /* 81, INTISR[ 65]  CAN2 RX1 Interrupt.                 */
    197              BSP_IntHandlerCAN2_SCE,                                     /* 82, INTISR[ 66]  CAN2 SCE Interrupt.                 */
    198              BSP_IntHandlerOTG,                                          /* 83, INTISR[ 67]  OTG global Interrupt.               */
    199          };
    200          
    201          /*
    202          *********************************************************************************************************
    203          *                                            App_NMI_ISR()
    204          *
    205          * Description : Handle Non-Maskable Interrupt (NMI).
    206          *
    207          * Argument(s) : none.
    208          *
    209          * Return(s)   : none.
    210          *
    211          * Caller(s)   : This is an ISR.
    212          *
    213          * Note(s)     : (1) Since the NMI is not being used, this serves merely as a catch for a spurious
    214          *                   exception.
    215          *********************************************************************************************************
    216          */
    217          

   \                                 In section .text, align 2, keep-with-next
    218          static  void  App_NMI_ISR (void)
    219          {
   \                     App_NMI_ISR: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    220              while (DEF_TRUE) {
    221                  BSP_LED_Toggle(0);
   \                     ??App_NMI_ISR_0: (+1)
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x.... 0x....      BL       BSP_LED_Toggle
    222                  Delay_Nms(100);
   \   00000008   0x2064             MOVS     R0,#+100
   \   0000000A   0x.... 0x....      BL       Delay_Nms
   \   0000000E   0xE7F8             B.N      ??App_NMI_ISR_0
    223              }
    224          }
    225          
    226          /*
    227          *********************************************************************************************************
    228          *                                             App_Fault_ISR()
    229          *
    230          * Description : Handle hard fault.
    231          *
    232          * Argument(s) : none.
    233          *
    234          * Return(s)   : none.
    235          *
    236          * Caller(s)   : This is an ISR.
    237          *
    238          * Note(s)     : none.
    239          *********************************************************************************************************
    240          */
    241          

   \                                 In section .text, align 2, keep-with-next
    242          static  void  App_Fault_ISR (void)
    243          {
   \                     App_Fault_ISR: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    244          #if (STORAGE_TYPE == INTNER_FLASH )
    245              Ctrl.Para.dat.SysSts.udat.App_Fault_ISR = 1;
    246              Ctrl.Para.dat.SysSts.udat.FanMode       = Ctrl.Fan.Mode;
    247              Ctrl.Para.dat.SysSts.udat.FanLevel      = Ctrl.Fan.Level;
    248              BSP_FlashWriteBytes((u32) 126*2, (u8 *)&Ctrl.Para.dat.SysSts.udat, (u16) 1*2);
    249          #elif (STORAGE_TYPE == INTNER_EEPROM )
    250          #elif (STORAGE_TYPE == EXTERN_EEPROM )
    251          #endif
    252                  
    253              BSP_RST_SystemRst();
   \   00000002   0x.... 0x....      BL       BSP_RST_SystemRst
    254              
    255              while (DEF_TRUE) {
    256                  BSP_LED_Toggle(0);
   \                     ??App_Fault_ISR_0: (+1)
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x.... 0x....      BL       BSP_LED_Toggle
    257                  Delay_Nms(100);
   \   0000000C   0x2064             MOVS     R0,#+100
   \   0000000E   0x.... 0x....      BL       Delay_Nms
   \   00000012   0xE7F8             B.N      ??App_Fault_ISR_0
    258              }
    259          }
    260          
    261          
    262          /*
    263          *********************************************************************************************************
    264          *                                           App_BusFault_ISR()
    265          *
    266          * Description : Handle bus fault.
    267          *
    268          * Argument(s) : none.
    269          *
    270          * Return(s)   : none.
    271          *
    272          * Caller(s)   : This is an ISR.
    273          *
    274          * Note(s)     : none.
    275          *********************************************************************************************************
    276          */
    277          

   \                                 In section .text, align 2, keep-with-next
    278          static  void  App_BusFault_ISR (void)
    279          {
   \                     App_BusFault_ISR: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    280              while (DEF_TRUE) {
    281                  BSP_LED_Toggle(0);
   \                     ??App_BusFault_ISR_0: (+1)
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x.... 0x....      BL       BSP_LED_Toggle
    282                  Delay_Nms(100);
   \   00000008   0x2064             MOVS     R0,#+100
   \   0000000A   0x.... 0x....      BL       Delay_Nms
   \   0000000E   0xE7F8             B.N      ??App_BusFault_ISR_0
    283              }
    284          }
    285          
    286          
    287          /*
    288          *********************************************************************************************************
    289          *                                          App_UsageFault_ISR()
    290          *
    291          * Description : Handle usage fault.
    292          *
    293          * Argument(s) : none.
    294          *
    295          * Return(s)   : none.
    296          *
    297          * Caller(s)   : This is an ISR.
    298          *
    299          * Note(s)     : none.
    300          *********************************************************************************************************
    301          */
    302          

   \                                 In section .text, align 2, keep-with-next
    303          static  void  App_UsageFault_ISR (void)
    304          {
   \                     App_UsageFault_ISR: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    305              while (DEF_TRUE) {
    306                  BSP_LED_Toggle(0);
   \                     ??App_UsageFault_ISR_0: (+1)
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x.... 0x....      BL       BSP_LED_Toggle
    307                  Delay_Nms(100);
   \   00000008   0x2064             MOVS     R0,#+100
   \   0000000A   0x.... 0x....      BL       Delay_Nms
   \   0000000E   0xE7F8             B.N      ??App_UsageFault_ISR_0
    308              }
    309          }
    310          
    311          
    312          /*
    313          *********************************************************************************************************
    314          *                                           App_MemFault_ISR()
    315          *
    316          * Description : Handle memory fault.
    317          *
    318          * Argument(s) : none.
    319          *
    320          * Return(s)   : none.
    321          *
    322          * Caller(s)   : This is an ISR.
    323          *
    324          * Note(s)     : none.
    325          *********************************************************************************************************
    326          */
    327          

   \                                 In section .text, align 2, keep-with-next
    328          static  void  App_MemFault_ISR (void)
    329          {
   \                     App_MemFault_ISR: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    330              while (DEF_TRUE) {
    331                  BSP_LED_Toggle(0);
   \                     ??App_MemFault_ISR_0: (+1)
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x.... 0x....      BL       BSP_LED_Toggle
    332                  Delay_Nms(100);
   \   00000008   0x2064             MOVS     R0,#+100
   \   0000000A   0x.... 0x....      BL       Delay_Nms
   \   0000000E   0xE7F8             B.N      ??App_MemFault_ISR_0
    333              }
    334          }
    335          
    336          
    337          /*
    338          *********************************************************************************************************
    339          *                                           App_Spurious_ISR()
    340          *
    341          * Description : Handle spurious interrupt.
    342          *
    343          * Argument(s) : none.
    344          *
    345          * Return(s)   : none.
    346          *
    347          * Caller(s)   : This is an ISR.
    348          *
    349          * Note(s)     : none.
    350          *********************************************************************************************************
    351          */
    352          

   \                                 In section .text, align 2, keep-with-next
    353          static  void  App_Spurious_ISR (void)
    354          {
   \                     App_Spurious_ISR: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    355              while (DEF_TRUE) {
    356                  BSP_LED_Toggle(0);
   \                     ??App_Spurious_ISR_0: (+1)
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x.... 0x....      BL       BSP_LED_Toggle
    357                  Delay_Nms(100);
   \   00000008   0x2064             MOVS     R0,#+100
   \   0000000A   0x.... 0x....      BL       Delay_Nms
   \   0000000E   0xE7F8             B.N      ??App_Spurious_ISR_0
    358              }
    359          }
    360          
    361          
    362          /*
    363          *********************************************************************************************************
    364          *                                           App_Reserved_ISR()
    365          *
    366          * Description : Reserved interrupt vector place holder.
    367          *
    368          * Argument(s) : none.
    369          *
    370          * Return(s)   : none.
    371          *
    372          * Caller(s)   : This is an ISR.
    373          *
    374          * Note(s)     : none.
    375          *********************************************************************************************************
    376          */
    377          

   \                                 In section .text, align 2, keep-with-next
    378          static  void  App_Reserved_ISR (void)
    379          {
    380          }
   \                     App_Reserved_ISR: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   App_BusFault_ISR
         8   -> BSP_LED_Toggle
         8   -> Delay_Nms
       8   App_Fault_ISR
         8   -> BSP_LED_Toggle
         8   -> BSP_RST_SystemRst
         8   -> Delay_Nms
       8   App_MemFault_ISR
         8   -> BSP_LED_Toggle
         8   -> Delay_Nms
       8   App_NMI_ISR
         8   -> BSP_LED_Toggle
         8   -> Delay_Nms
       0   App_Reserved_ISR
       8   App_Spurious_ISR
         8   -> BSP_LED_Toggle
         8   -> Delay_Nms
       8   App_UsageFault_ISR
         8   -> BSP_LED_Toggle
         8   -> Delay_Nms


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      16  App_BusFault_ISR
      20  App_Fault_ISR
      16  App_MemFault_ISR
      16  App_NMI_ISR
       2  App_Reserved_ISR
      16  App_Spurious_ISR
      16  App_UsageFault_ISR
     336  __vector_table

 
 336 bytes in section .intvec
 102 bytes in section .text
 
 102 bytes of CODE  memory
 336 bytes of CONST memory

Errors: none
Warnings: none

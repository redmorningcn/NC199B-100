###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.1.8447/W32 for ARM        13/Feb/2017  13:48:13
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Source\Micrium\uC-OS-III\Source\os_int.c
#    Command line =  
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Source\Micrium\uC-OS-III\Source\os_int.c" -D
#        USE_STDPERIPH_DRIVER -D STM32F10X_HD -D DEBUG -D STM32F103RB -D
#        STM32_FLASH_SIZE=128 -lCN "V:\我的项目\04
#        长沙南车\2015年后项目\NC16-011-A 智能电表\04 程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\Debug-RB\List\" -o "V:\我的项目\04
#        长沙南车\2015年后项目\NC16-011-A 智能电表\04 程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\Debug-RB\Obj\" --debug --endian=little
#        --cpu=ARM7TDMI -e --fpu=None --dlib_config "D:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01 智能电表\Library\Project\IAR\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\APP\" -I "V:\我的项目\04
#        长沙南车\2015年后项目\NC16-011-A 智能电表\04 程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\APP\User\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\APP\AES\" -I "V:\我的项目\04
#        长沙南车\2015年后项目\NC16-011-A 智能电表\04 程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\APP\Config\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\APP\OS\" -I "V:\我的项目\04
#        长沙南车\2015年后项目\NC16-011-A 智能电表\04 程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\APP\User\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\APP\SIM900A\Source\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\APP\SIM900A\Port\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\APP\SIM900A\OS\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\APP\SIM900A\Config\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\APP\Protocol\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\BSP\" -I "V:\我的项目\04
#        长沙南车\2015年后项目\NC16-011-A 智能电表\04 程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\BSP\Driver\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\BSP\IAR\" -I "V:\我的项目\04
#        长沙南车\2015年后项目\NC16-011-A 智能电表\04 程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\BSP\Os\" -I "V:\我的项目\04
#        长沙南车\2015年后项目\NC16-011-A 智能电表\04 程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\BSP\Os\uCOS-III\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\BSP\St\" -I "V:\我的项目\04
#        长沙南车\2015年后项目\NC16-011-A 智能电表\04 程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\BSP\St\FWLib\CMSIS\CM3\CoreSupport\"
#        -I "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\BSP\St\FWLib\CMSIS\CM3\DeviceSupport\ST\STM32F10x\"
#        -I "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\BSP\St\FWLib\STM32F10x_StdPeriph_Driver\inc\"
#        -I "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\Micrium\uC-CPU\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\Micrium\uC-CPU\ARM-Cortex-M3\IAR\"
#        -I "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\Micrium\uC-LIB\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\BSP\Os\OSAL\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\OSAL\OS\" -I "V:\我的项目\04
#        长沙南车\2015年后项目\NC16-011-A 智能电表\04 程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\Micrium\uC-MB\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\Micrium\uC-MB\Cfg\Template\"
#        -I "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\Micrium\uC-MB\OS\uCOS-III\"
#        -I "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\Micrium\uC-MB\Source\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\Ports\ARM-Cortex-M3\Generic\IAR\"
#        -I "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\Source\"
#        -I "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\FatFs\" -I "V:\我的项目\04
#        长沙南车\2015年后项目\NC16-011-A 智能电表\04 程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\FatFs\option\" --cpu_mode
#        thumb -Oh --use_c++_inline
#    List file    =  
#        V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\Debug-RB\List\os_int.lst
#    Object file  =  
#        V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\Debug-RB\Obj\os_int.o
#
###############################################################################

V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04 程序\NC014-001-000.CX_01 智能电表\Library\Source\Micrium\uC-OS-III\Source\os_int.c
      1          /*
      2          ************************************************************************************************************************
      3          *                                                      uC/OS-III
      4          *                                                 The Real-Time Kernel
      5          *
      6          *                                  (c) Copyright 2009-2012; Micrium, Inc.; Weston, FL
      7          *                           All rights reserved.  Protected by international copyright laws.
      8          *
      9          *                                                 ISR QUEUE MANAGEMENT
     10          *
     11          * File    : OS_INT.C
     12          * By      : JJL
     13          * Version : V3.03.01
     14          *
     15          * LICENSING TERMS:
     16          * ---------------
     17          *           uC/OS-III is provided in source form for FREE short-term evaluation, for educational use or 
     18          *           for peaceful research.  If you plan or intend to use uC/OS-III in a commercial application/
     19          *           product then, you need to contact Micrium to properly license uC/OS-III for its use in your 
     20          *           application/product.   We provide ALL the source code for your convenience and to help you 
     21          *           experience uC/OS-III.  The fact that the source is provided does NOT mean that you can use 
     22          *           it commercially without paying a licensing fee.
     23          *
     24          *           Knowledge of the source code may NOT be used to develop a similar product.
     25          *
     26          *           Please help us continue to provide the embedded community with the finest software available.
     27          *           Your honesty is greatly appreciated.
     28          *
     29          *           You can contact us at www.micrium.com, or by phone at +1 (954) 217-2036.
     30          ************************************************************************************************************************
     31          */
     32          
     33          #define   MICRIUM_SOURCE
     34          #include  <os.h>
     35          
     36          #ifdef VSC_INCLUDE_SOURCE_FILE_NAMES
     37          const  CPU_CHAR  *os_int__c = "$Id: $";
     38          #endif
     39          
     40          
     41          #if OS_CFG_ISR_POST_DEFERRED_EN > 0u
     42          /*$PAGE*/
     43          /*
     44          ************************************************************************************************************************
     45          *                                                   POST TO ISR QUEUE
     46          *
     47          * Description: This function places contents of posts into an intermediate queue to help defer processing of interrupts
     48          *              at the task level.
     49          *
     50          * Arguments  : type       is the type of kernel object the post is destined to:
     51          *
     52          *                             OS_OBJ_TYPE_SEM
     53          *                             OS_OBJ_TYPE_Q
     54          *                             OS_OBJ_TYPE_FLAG
     55          *                             OS_OBJ_TYPE_TASK_MSG
     56          *                             OS_OBJ_TYPE_TASK_SIGNAL
     57          *
     58          *              p_obj      is a pointer to the kernel object to post to.  This can be a pointer to a semaphore,
     59          *              -----      a message queue or a task control clock.
     60          *
     61          *              p_void     is a pointer to a message that is being posted.  This is used when posting to a message
     62          *                         queue or directly to a task.
     63          *
     64          *              msg_size   is the size of the message being posted
     65          *
     66          *              flags      if the post is done to an event flag group then this corresponds to the flags being
     67          *                         posted
     68          *
     69          *              ts         is a timestamp as to when the post was done
     70          *
     71          *              opt        this corresponds to post options and applies to:
     72          *
     73          *                             OSFlagPost()
     74          *                             OSSemPost()
     75          *                             OSQPost()
     76          *                             OSTaskQPost()
     77          *
     78          *              p_err      is a pointer to a variable that will contain an error code returned by this function.
     79          *
     80          *                             OS_ERR_NONE         if the post to the ISR queue was successful
     81          *                             OS_ERR_INT_Q_FULL   if the ISR queue is full and cannot accepts any further posts.  This
     82          *                                                 generally indicates that you are receiving interrupts faster than you
     83          *                                                 can process them or, that you didn't make the ISR queue large enough.
     84          *
     85          * Returns    : none
     86          *
     87          * Note(s)    : none
     88          ************************************************************************************************************************
     89          */
     90          

   \                                 In section .text, align 2, keep-with-next
     91          void  OS_IntQPost (OS_OBJ_TYPE   type,
     92                             void         *p_obj,
     93                             void         *p_void,
     94                             OS_MSG_SIZE   msg_size,
     95                             OS_FLAGS      flags,
     96                             OS_OPT        opt,
     97                             CPU_TS        ts,
     98                             OS_ERR       *p_err)
     99          {
   \                     OS_IntQPost: (+1)
   \   00000000   0xB5F7             PUSH     {R0-R2,R4-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x001F             MOVS     R7,R3
    100              CPU_SR_ALLOC();
    101          
    102          
    103          
    104          #ifdef OS_SAFETY_CRITICAL
    105              if (p_err == (OS_ERR *)0) {
    106                  OS_SAFETY_CRITICAL_EXCEPTION();
    107                  return;
    108              }
    109          #endif
    110          
    111              CPU_CRITICAL_ENTER();
   \   00000006   0x.... 0x....      BL       CPU_SR_Save
   \   0000000A   0x0005             MOVS     R5,R0
   \   0000000C   0x.... 0x....      BL       CPU_IntDisMeasStart
    112              if (OSIntQNbrEntries < OSCfg_IntQSize) {                /* Make sure we haven't already filled the ISR queue      */
   \   00000010   0x....             LDR      R1,??DataTable3
   \   00000012   0x8808             LDRH     R0,[R1, #+0]
   \   00000014   0x9E0B             LDR      R6,[SP, #+44]
   \   00000016   0x....             LDR      R2,??DataTable3_1
   \   00000018   0x8812             LDRH     R2,[R2, #+0]
   \   0000001A   0x4290             CMP      R0,R2
   \   0000001C   0xD229             BCS      ??OS_IntQPost_0
    113                  OSIntQNbrEntries++;
   \   0000001E   0x1C40             ADDS     R0,R0,#+1
   \   00000020   0x8008             STRH     R0,[R1, #+0]
    114          
    115                  if (OSIntQNbrEntriesMax < OSIntQNbrEntries) {
   \   00000022   0x....             LDR      R1,??DataTable3_2
   \   00000024   0x880A             LDRH     R2,[R1, #+0]
   \   00000026   0x0400             LSLS     R0,R0,#+16
   \   00000028   0x0C00             LSRS     R0,R0,#+16
   \   0000002A   0x4282             CMP      R2,R0
   \   0000002C   0xD200             BCS      ??OS_IntQPost_1
    116                      OSIntQNbrEntriesMax = OSIntQNbrEntries;
   \   0000002E   0x8008             STRH     R0,[R1, #+0]
    117                  }
    118          
    119                  OSIntQInPtr->Type       = type;                     /* Save object type being posted                          */
   \                     ??OS_IntQPost_1: (+1)
   \   00000030   0x....             LDR      R0,??DataTable3_3
   \   00000032   0x6801             LDR      R1,[R0, #+0]
   \   00000034   0x600C             STR      R4,[R1, #+0]
    120                  OSIntQInPtr->ObjPtr     = p_obj;                    /* Save pointer to object being posted                    */
   \   00000036   0x9A01             LDR      R2,[SP, #+4]
   \   00000038   0x608A             STR      R2,[R1, #+8]
    121                  OSIntQInPtr->MsgPtr     = p_void;                   /* Save pointer to message if posting to a message queue  */
   \   0000003A   0x9A02             LDR      R2,[SP, #+8]
   \   0000003C   0x60CA             STR      R2,[R1, #+12]
    122                  OSIntQInPtr->MsgSize    = msg_size;                 /* Save the message size   if posting to a message queue  */
   \   0000003E   0x820F             STRH     R7,[R1, #+16]
    123                  OSIntQInPtr->Flags      = flags;                    /* Save the flags if posting to an event flag group       */
   \   00000040   0x9A08             LDR      R2,[SP, #+32]
   \   00000042   0x614A             STR      R2,[R1, #+20]
    124                  OSIntQInPtr->Opt        = opt;                      /* Save post options                                      */
   \   00000044   0x9A09             LDR      R2,[SP, #+36]
   \   00000046   0x830A             STRH     R2,[R1, #+24]
    125                  OSIntQInPtr->TS         = ts;                       /* Save time stamp                                        */
   \   00000048   0x9A0A             LDR      R2,[SP, #+40]
   \   0000004A   0x61CA             STR      R2,[R1, #+28]
    126          
    127                  OSIntQInPtr             =  OSIntQInPtr->NextPtr;    /* Point to the next interrupt handler queue entry        */
   \   0000004C   0x6849             LDR      R1,[R1, #+4]
   \   0000004E   0x6001             STR      R1,[R0, #+0]
    128          
    129                  OSRdyList[0].NbrEntries = (OS_OBJ_QTY)1;            /* Make the interrupt handler task ready to run           */
   \   00000050   0x....             LDR      R0,??DataTable3_4
   \   00000052   0x2101             MOVS     R1,#+1
   \   00000054   0x8101             STRH     R1,[R0, #+8]
    130                  OSRdyList[0].HeadPtr    = &OSIntQTaskTCB;
   \   00000056   0x....             LDR      R1,??DataTable3_5
   \   00000058   0x6001             STR      R1,[R0, #+0]
    131                  OSRdyList[0].TailPtr    = &OSIntQTaskTCB;
   \   0000005A   0x6041             STR      R1,[R0, #+4]
    132                  OS_PrioInsert(0u);                                  /* Add task priority 0 in the priority table              */
   \   0000005C   0x2000             MOVS     R0,#+0
   \   0000005E   0x.... 0x....      BL       OS_PrioInsert
    133                  if (OSPrioCur != 0) {                               /* Chk if OSIntQTask is not running                       */
   \   00000062   0x....             LDR      R0,??DataTable3_6
   \   00000064   0x7800             LDRB     R0,[R0, #+0]
   \   00000066   0x2800             CMP      R0,#+0
   \   00000068   0xD001             BEQ      ??OS_IntQPost_2
    134                      OSPrioSaved         = OSPrioCur;                /* Save current priority                                  */
   \   0000006A   0x....             LDR      R1,??DataTable3_7
   \   0000006C   0x7008             STRB     R0,[R1, #+0]
    135                  }
    136          
    137                 *p_err                   = OS_ERR_NONE;
   \                     ??OS_IntQPost_2: (+1)
   \   0000006E   0x2000             MOVS     R0,#+0
   \   00000070   0xE004             B        ??OS_IntQPost_3
    138              } else {
    139                  OSIntQOvfCtr++;                                     /* Count the number of ISR queue overflows                */
   \                     ??OS_IntQPost_0: (+1)
   \   00000072   0x....             LDR      R0,??DataTable3_8
   \   00000074   0x8801             LDRH     R1,[R0, #+0]
   \   00000076   0x1C49             ADDS     R1,R1,#+1
   \   00000078   0x8001             STRH     R1,[R0, #+0]
    140                 *p_err                   = OS_ERR_INT_Q_FULL;
   \   0000007A   0x....             LDR      R0,??DataTable4  ;; 0x4653
   \                     ??OS_IntQPost_3: (+1)
   \   0000007C   0x8030             STRH     R0,[R6, #+0]
    141              }
    142              CPU_CRITICAL_EXIT();
   \   0000007E   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   00000082   0x0028             MOVS     R0,R5
   \   00000084   0x.... 0x....      BL       CPU_SR_Restore
    143          }
   \   00000088   0xB003             ADD      SP,SP,#+12
   \   0000008A   0xBDF0             POP      {R4-R7,PC}       ;; return
    144          
    145          /*$PAGE*/
    146          /*
    147          ************************************************************************************************************************
    148          *                                               INTERRUPT QUEUE MANAGEMENT TASK
    149          *
    150          * Description: This task is created by OS_IntQTaskInit().
    151          *
    152          * Arguments  : p_arg     is a pointer to an optional argument that is passed during task creation.  For this function
    153          *                        the argument is not used and will be a NULL pointer.
    154          *
    155          * Returns    : none
    156          ************************************************************************************************************************
    157          */
    158          

   \                                 In section .text, align 2, keep-with-next
    159          void  OS_IntQRePost (void)
    160          {
   \                     OS_IntQRePost: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
    161              CPU_TS  ts;
    162              OS_ERR  err;
    163          
    164          
    165              switch (OSIntQOutPtr->Type) {                           /* Re-post to task                                        */
   \   00000004   0x....             LDR      R4,??DataTable4_1
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0x6801             LDR      R1,[R0, #+0]
   \   0000000A   0x....             LDR      R2,??DataTable4_2  ;; 0x414d4553
   \   0000000C   0x4291             CMP      R1,R2
   \   0000000E   0xD029             BEQ      ??OS_IntQRePost_0
   \   00000010   0x....             LDR      R2,??DataTable4_3  ;; 0x47414c46
   \   00000012   0x4291             CMP      R1,R2
   \   00000014   0xD012             BEQ      ??OS_IntQRePost_1
   \   00000016   0x....             LDR      R2,??DataTable4_4  ;; 0x47495354
   \   00000018   0x4291             CMP      R1,R2
   \   0000001A   0xD03A             BEQ      ??OS_IntQRePost_2
   \   0000001C   0x....             LDR      R2,??DataTable4_5  ;; 0x47534d54
   \   0000001E   0x4291             CMP      R1,R2
   \   00000020   0xD027             BEQ      ??OS_IntQRePost_3
   \   00000022   0x....             LDR      R2,??DataTable4_6  ;; 0x4b434954
   \   00000024   0x4291             CMP      R1,R2
   \   00000026   0xD03E             BEQ      ??OS_IntQRePost_4
   \   00000028   0x....             LDR      R2,??DataTable4_7  ;; 0x53455254
   \   0000002A   0x4291             CMP      R1,R2
   \   0000002C   0xD02C             BEQ      ??OS_IntQRePost_5
   \   0000002E   0x....             LDR      R2,??DataTable4_8  ;; 0x53555354
   \   00000030   0x4291             CMP      R1,R2
   \   00000032   0xD033             BEQ      ??OS_IntQRePost_6
   \   00000034   0x....             LDR      R2,??DataTable4_9  ;; 0x55455551
   \   00000036   0x4291             CMP      R1,R2
   \   00000038   0xD009             BEQ      ??OS_IntQRePost_7
   \   0000003A   0xE052             B        ??OS_IntQRePost_8
    166                  case OS_OBJ_TYPE_FLAG:
    167          #if OS_CFG_FLAG_EN > 0u
    168                       (void)OS_FlagPost((OS_FLAG_GRP *) OSIntQOutPtr->ObjPtr,
    169                                         (OS_FLAGS     ) OSIntQOutPtr->Flags,
    170                                         (OS_OPT       ) OSIntQOutPtr->Opt,
    171                                         (CPU_TS       ) OSIntQOutPtr->TS,
    172                                         (OS_ERR      *)&err);
   \                     ??OS_IntQRePost_1: (+1)
   \   0000003C   0xA902             ADD      R1,SP,#+8
   \   0000003E   0x9100             STR      R1,[SP, #+0]
   \   00000040   0x69C3             LDR      R3,[R0, #+28]
   \   00000042   0x8B02             LDRH     R2,[R0, #+24]
   \   00000044   0x6941             LDR      R1,[R0, #+20]
   \   00000046   0x6880             LDR      R0,[R0, #+8]
   \   00000048   0x.... 0x....      BL       OS_FlagPost
    173          #endif
    174                       break;
   \   0000004C   0xE049             B        ??OS_IntQRePost_8
    175          
    176                  case OS_OBJ_TYPE_Q:
    177          #if OS_CFG_Q_EN > 0u
    178                       OS_QPost((OS_Q      *) OSIntQOutPtr->ObjPtr,
    179                                (void      *) OSIntQOutPtr->MsgPtr,
    180                                (OS_MSG_SIZE) OSIntQOutPtr->MsgSize,
    181                                (OS_OPT     ) OSIntQOutPtr->Opt,
    182                                (CPU_TS     ) OSIntQOutPtr->TS,
    183                                (OS_ERR    *)&err);
   \                     ??OS_IntQRePost_7: (+1)
   \   0000004E   0xA902             ADD      R1,SP,#+8
   \   00000050   0x9101             STR      R1,[SP, #+4]
   \   00000052   0x69C1             LDR      R1,[R0, #+28]
   \   00000054   0x9100             STR      R1,[SP, #+0]
   \   00000056   0x8B03             LDRH     R3,[R0, #+24]
   \   00000058   0x8A02             LDRH     R2,[R0, #+16]
   \   0000005A   0x68C1             LDR      R1,[R0, #+12]
   \   0000005C   0x6880             LDR      R0,[R0, #+8]
   \   0000005E   0x.... 0x....      BL       OS_QPost
    184          #endif
    185                       break;
   \   00000062   0xE03E             B        ??OS_IntQRePost_8
    186          
    187                  case OS_OBJ_TYPE_SEM:
    188          #if OS_CFG_SEM_EN > 0u
    189                       (void)OS_SemPost((OS_SEM *) OSIntQOutPtr->ObjPtr,
    190                                        (OS_OPT  ) OSIntQOutPtr->Opt,
    191                                        (CPU_TS  ) OSIntQOutPtr->TS,
    192                                        (OS_ERR *)&err);
   \                     ??OS_IntQRePost_0: (+1)
   \   00000064   0xAB02             ADD      R3,SP,#+8
   \   00000066   0x69C2             LDR      R2,[R0, #+28]
   \   00000068   0x8B01             LDRH     R1,[R0, #+24]
   \   0000006A   0x6880             LDR      R0,[R0, #+8]
   \   0000006C   0x.... 0x....      BL       OS_SemPost
    193          #endif
    194                       break;
   \   00000070   0xE037             B        ??OS_IntQRePost_8
    195          
    196                  case OS_OBJ_TYPE_TASK_MSG:
    197          #if OS_CFG_TASK_Q_EN > 0u
    198                       OS_TaskQPost((OS_TCB    *) OSIntQOutPtr->ObjPtr,
    199                                    (void      *) OSIntQOutPtr->MsgPtr,
    200                                    (OS_MSG_SIZE) OSIntQOutPtr->MsgSize,
    201                                    (OS_OPT     ) OSIntQOutPtr->Opt,
    202                                    (CPU_TS     ) OSIntQOutPtr->TS,
    203                                    (OS_ERR    *)&err);
   \                     ??OS_IntQRePost_3: (+1)
   \   00000072   0xA902             ADD      R1,SP,#+8
   \   00000074   0x9101             STR      R1,[SP, #+4]
   \   00000076   0x69C1             LDR      R1,[R0, #+28]
   \   00000078   0x9100             STR      R1,[SP, #+0]
   \   0000007A   0x8B03             LDRH     R3,[R0, #+24]
   \   0000007C   0x8A02             LDRH     R2,[R0, #+16]
   \   0000007E   0x68C1             LDR      R1,[R0, #+12]
   \   00000080   0x6880             LDR      R0,[R0, #+8]
   \   00000082   0x.... 0x....      BL       OS_TaskQPost
    204          #endif
    205                       break;
   \   00000086   0xE02C             B        ??OS_IntQRePost_8
    206          
    207                  case OS_OBJ_TYPE_TASK_RESUME:
    208          #if OS_CFG_TASK_SUSPEND_EN > 0u
    209                       (void)OS_TaskResume((OS_TCB *) OSIntQOutPtr->ObjPtr,
    210                                           (OS_ERR *)&err);
   \                     ??OS_IntQRePost_5: (+1)
   \   00000088   0xA902             ADD      R1,SP,#+8
   \   0000008A   0x6880             LDR      R0,[R0, #+8]
   \   0000008C   0x.... 0x....      BL       OS_TaskResume
    211          #endif
    212                       break;
   \   00000090   0xE027             B        ??OS_IntQRePost_8
    213          
    214                  case OS_OBJ_TYPE_TASK_SIGNAL:
    215                       (void)OS_TaskSemPost((OS_TCB *) OSIntQOutPtr->ObjPtr,
    216                                            (OS_OPT  ) OSIntQOutPtr->Opt,
    217                                            (CPU_TS  ) OSIntQOutPtr->TS,
    218                                            (OS_ERR *)&err);
   \                     ??OS_IntQRePost_2: (+1)
   \   00000092   0xAB02             ADD      R3,SP,#+8
   \   00000094   0x69C2             LDR      R2,[R0, #+28]
   \   00000096   0x8B01             LDRH     R1,[R0, #+24]
   \   00000098   0x6880             LDR      R0,[R0, #+8]
   \   0000009A   0xE020             B        ??OS_IntQRePost_9
    219                       break;
    220          
    221                  case OS_OBJ_TYPE_TASK_SUSPEND:
    222          #if OS_CFG_TASK_SUSPEND_EN > 0u
    223                       (void)OS_TaskSuspend((OS_TCB *) OSIntQOutPtr->ObjPtr,
    224                                            (OS_ERR *)&err);
   \                     ??OS_IntQRePost_6: (+1)
   \   0000009C   0xA902             ADD      R1,SP,#+8
   \   0000009E   0x6880             LDR      R0,[R0, #+8]
   \   000000A0   0x.... 0x....      BL       OS_TaskSuspend
    225          #endif
    226                       break;
   \   000000A4   0xE01D             B        ??OS_IntQRePost_8
    227          
    228                  case OS_OBJ_TYPE_TICK:
    229          #if OS_CFG_SCHED_ROUND_ROBIN_EN > 0u
    230                       OS_SchedRoundRobin(&OSRdyList[OSPrioSaved]);
   \                     ??OS_IntQRePost_4: (+1)
   \   000000A6   0x....             LDR      R0,??DataTable3_4
   \   000000A8   0x....             LDR      R1,??DataTable3_7
   \   000000AA   0x7809             LDRB     R1,[R1, #+0]
   \   000000AC   0x004A             LSLS     R2,R1,#+1
   \   000000AE   0x1851             ADDS     R1,R2,R1
   \   000000B0   0x0089             LSLS     R1,R1,#+2
   \   000000B2   0x1840             ADDS     R0,R0,R1
   \   000000B4   0x.... 0x....      BL       OS_SchedRoundRobin
    231          #endif
    232          
    233                       (void)OS_TaskSemPost((OS_TCB *)&OSTickTaskTCB,                /* Signal tick task                        */
    234                                            (OS_OPT  ) OS_OPT_POST_NONE,
    235                                            (CPU_TS  ) OSIntQOutPtr->TS,
    236                                            (OS_ERR *)&err);
   \   000000B8   0xAB02             ADD      R3,SP,#+8
   \   000000BA   0x6820             LDR      R0,[R4, #+0]
   \   000000BC   0x69C2             LDR      R2,[R0, #+28]
   \   000000BE   0x2100             MOVS     R1,#+0
   \   000000C0   0x....             LDR      R0,??DataTable4_10
   \   000000C2   0x.... 0x....      BL       OS_TaskSemPost
    237          #if OS_CFG_TMR_EN > 0u
    238                       OSTmrUpdateCtr--;
   \   000000C6   0x....             LDR      R0,??DataTable4_11
   \   000000C8   0x6801             LDR      R1,[R0, #+0]
   \   000000CA   0x1E49             SUBS     R1,R1,#+1
   \   000000CC   0x6001             STR      R1,[R0, #+0]
    239                       if (OSTmrUpdateCtr == (OS_CTR)0u) {
   \   000000CE   0xD108             BNE      ??OS_IntQRePost_8
    240                           OSTmrUpdateCtr = OSTmrUpdateCnt;
   \   000000D0   0x....             LDR      R1,??DataTable4_12
   \   000000D2   0x6809             LDR      R1,[R1, #+0]
   \   000000D4   0x6001             STR      R1,[R0, #+0]
    241                           ts             = OS_TS_GET();                             /* Get timestamp                           */
    242                           (void)OS_TaskSemPost((OS_TCB *)&OSTmrTaskTCB,             /* Signal timer task                       */
    243                                                (OS_OPT  ) OS_OPT_POST_NONE,
    244                                                (CPU_TS  ) ts,
    245                                                (OS_ERR *)&err);
   \   000000D6   0xAB02             ADD      R3,SP,#+8
   \   000000D8   0x2200             MOVS     R2,#+0
   \   000000DA   0x2100             MOVS     R1,#+0
   \   000000DC   0x....             LDR      R0,??DataTable4_13
   \                     ??OS_IntQRePost_9: (+1)
   \   000000DE   0x.... 0x....      BL       OS_TaskSemPost
    246                       }
    247          #endif
    248                       break;
    249          
    250                  default:
    251                       break;
    252              }
    253          }
   \                     ??OS_IntQRePost_8: (+1)
   \   000000E2   0xB004             ADD      SP,SP,#+16
   \   000000E4   0xBD10             POP      {R4,PC}          ;; return
    254          
    255          /*$PAGE*/
    256          /*
    257          ************************************************************************************************************************
    258          *                                               INTERRUPT QUEUE MANAGEMENT TASK
    259          *
    260          * Description: This task is created by OS_IntQTaskInit().
    261          *
    262          * Arguments  : p_arg     is a pointer to an optional argument that is passed during task creation.  For this function
    263          *                        the argument is not used and will be a NULL pointer.
    264          *
    265          * Returns    : none
    266          ************************************************************************************************************************
    267          */
    268          

   \                                 In section .text, align 2, keep-with-next
    269          void  OS_IntQTask (void  *p_arg)
    270          {
   \                     OS_IntQTask: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x2700             MOVS     R7,#+0
   \   00000004   0x....             LDR      R4,??DataTable3_4
   \   00000006   0x....             LDR      R5,??DataTable3
   \   00000008   0xE018             B        ??OS_IntQTask_0
    271              CPU_BOOLEAN  done;
    272              CPU_TS       ts_start;
    273              CPU_TS       ts_end;
    274              CPU_SR_ALLOC();
    275          
    276          
    277          
    278              p_arg = p_arg;                                          /* Not using 'p_arg', prevent compiler warning            */
    279              while (DEF_ON) {
    280                  done = DEF_FALSE;
    281                  while (done == DEF_FALSE) {
    282                      CPU_CRITICAL_ENTER();
    283                      if (OSIntQNbrEntries == (OS_OBJ_QTY)0u) {
    284                          OSRdyList[0].NbrEntries = (OS_OBJ_QTY)0u;   /* Remove from ready list                                 */
    285                          OSRdyList[0].HeadPtr    = (OS_TCB   *)0;
    286                          OSRdyList[0].TailPtr    = (OS_TCB   *)0;
    287                          OS_PrioRemove(0u);                          /* Remove from the priority table                         */
    288                          CPU_CRITICAL_EXIT();
    289                          OSSched();
    290                          done = DEF_TRUE;                            /* No more entries in the queue, we are done              */
    291                      } else {
    292                          CPU_CRITICAL_EXIT();
   \                     ??OS_IntQTask_1: (+1)
   \   0000000A   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   0000000E   0x0030             MOVS     R0,R6
   \   00000010   0x.... 0x....      BL       CPU_SR_Restore
    293                          ts_start = OS_TS_GET();
    294                          OS_IntQRePost();
   \   00000014   0x.... 0x....      BL       OS_IntQRePost
    295                          ts_end   = OS_TS_GET() - ts_start;          /* Measure execution time of tick task                    */
    296                          if (OSIntQTaskTimeMax < ts_end) {
    297                              OSIntQTaskTimeMax = ts_end;
    298                          }
    299                          CPU_CRITICAL_ENTER();
   \   00000018   0x.... 0x....      BL       CPU_SR_Save
   \   0000001C   0x0006             MOVS     R6,R0
   \   0000001E   0x.... 0x....      BL       CPU_IntDisMeasStart
    300                          OSIntQOutPtr = OSIntQOutPtr->NextPtr;       /* Point to next item in the ISR queue                    */
   \   00000022   0x....             LDR      R0,??DataTable4_1
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0x6840             LDR      R0,[R0, #+4]
   \   00000028   0x....             LDR      R1,??DataTable4_1
   \   0000002A   0x6008             STR      R0,[R1, #+0]
    301                          OSIntQNbrEntries--;
   \   0000002C   0x8828             LDRH     R0,[R5, #+0]
   \   0000002E   0x1E40             SUBS     R0,R0,#+1
   \   00000030   0x8028             STRH     R0,[R5, #+0]
    302                          CPU_CRITICAL_EXIT();
   \   00000032   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   00000036   0x0030             MOVS     R0,R6
   \   00000038   0x.... 0x....      BL       CPU_SR_Restore
    303                      }
   \                     ??OS_IntQTask_0: (+1)
   \   0000003C   0x.... 0x....      BL       CPU_SR_Save
   \   00000040   0x0006             MOVS     R6,R0
   \   00000042   0x.... 0x....      BL       CPU_IntDisMeasStart
   \   00000046   0x8828             LDRH     R0,[R5, #+0]
   \   00000048   0x2800             CMP      R0,#+0
   \   0000004A   0xD1DE             BNE      ??OS_IntQTask_1
   \   0000004C   0x8120             STRH     R0,[R4, #+8]
   \   0000004E   0x6027             STR      R7,[R4, #+0]
   \   00000050   0x6067             STR      R7,[R4, #+4]
   \   00000052   0x.... 0x....      BL       OS_PrioRemove
   \   00000056   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   0000005A   0x0030             MOVS     R0,R6
   \   0000005C   0x.... 0x....      BL       CPU_SR_Restore
   \   00000060   0x.... 0x....      BL       OSSched
   \   00000064   0xE7EA             B        ??OS_IntQTask_0
    304                  }
    305              }
    306          }
    307          
    308          /*$PAGE*/
    309          /*
    310          ************************************************************************************************************************
    311          *                                                 INITIALIZE THE ISR QUEUE
    312          *
    313          * Description: This function is called by OSInit() to initialize the ISR queue.
    314          *
    315          * Arguments  : p_err    is a pointer to a variable that will contain an error code returned by this function.
    316          *
    317          *                           OS_ERR_INT_Q             If you didn't provide an ISR queue in OS_CFG.C
    318          *                           OS_ERR_INT_Q_SIZE        If you didn't specify a large enough ISR queue.
    319          *                           OS_ERR_STK_INVALID       If you specified a NULL pointer for the task of the ISR task
    320          *                                                    handler
    321          *                           OS_ERR_STK_SIZE_INVALID  If you didn't specify a stack size greater than the minimum
    322          *                                                    specified by OS_CFG_STK_SIZE_MIN
    323          *                           OS_ERR_???               An error code returned by OSTaskCreate().
    324          *
    325          * Returns    : none
    326          *
    327          * Note(s)    : none
    328          ************************************************************************************************************************
    329          */
    330          

   \                                 In section .text, align 4, keep-with-next
    331          void  OS_IntQTaskInit (OS_ERR  *p_err)
    332          {
   \                     OS_IntQTaskInit: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB089             SUB      SP,SP,#+36
    333              OS_INT_Q      *p_int_q;
    334              OS_INT_Q      *p_int_q_next;
    335              OS_OBJ_QTY     i;
    336          
    337          
    338          
    339          #ifdef OS_SAFETY_CRITICAL
    340              if (p_err == (OS_ERR *)0) {
    341                  OS_SAFETY_CRITICAL_EXCEPTION();
    342                  return;
    343              }
    344          #endif
    345          
    346              OSIntQOvfCtr = (OS_QTY)0u;                              /* Clear the ISR queue overflow counter                   */
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x....             LDR      R3,??DataTable4_14
   \   00000008   0x8019             STRH     R1,[R3, #+0]
    347          
    348              if (OSCfg_IntQBasePtr == (OS_INT_Q *)0) {
   \   0000000A   0x....             LDR      R2,??DataTable4_15
   \   0000000C   0x6812             LDR      R2,[R2, #+0]
   \   0000000E   0x2A00             CMP      R2,#+0
   \   00000010   0xD101             BNE      ??OS_IntQTaskInit_0
    349                 *p_err = OS_ERR_INT_Q;
   \   00000012   0x....             LDR      R1,??DataTable4_16  ;; 0x4652
   \   00000014   0xE02E             B.N      ??OS_IntQTaskInit_1
    350                  return;
    351              }
    352          
    353              if (OSCfg_IntQSize < (OS_OBJ_QTY)2u) {
   \                     ??OS_IntQTaskInit_0: (+1)
   \   00000016   0x....             LDR      R3,??DataTable4_17
   \   00000018   0x881B             LDRH     R3,[R3, #+0]
   \   0000001A   0x2B02             CMP      R3,#+2
   \   0000001C   0xDA01             BGE      ??OS_IntQTaskInit_2
    354                 *p_err = OS_ERR_INT_Q_SIZE;
   \   0000001E   0x....             LDR      R1,??DataTable4_18  ;; 0x4654
   \   00000020   0xE028             B.N      ??OS_IntQTaskInit_1
    355                  return;
    356              }
    357          
    358              OSIntQTaskTimeMax = (CPU_TS)0;
   \                     ??OS_IntQTaskInit_2: (+1)
   \   00000022   0x....             LDR      R4,??DataTable4_19
   \   00000024   0x6021             STR      R1,[R4, #+0]
    359          
    360              p_int_q           = OSCfg_IntQBasePtr;                  /* Initialize the circular ISR queue                      */
   \   00000026   0x0014             MOVS     R4,R2
    361              p_int_q_next      = p_int_q;
    362              p_int_q_next++;
   \   00000028   0x0025             MOVS     R5,R4
   \   0000002A   0x3520             ADDS     R5,R5,#+32
    363              for (i = 0u; i < OSCfg_IntQSize; i++) {
   \   0000002C   0x....             LDR      R6,??DataTable4_20  ;; 0x454e4f4e
   \   0000002E   0x2700             MOVS     R7,#+0
    364                  p_int_q->Type    =  OS_OBJ_TYPE_NONE;
   \                     ??OS_IntQTaskInit_3: (+1)
   \   00000030   0x6026             STR      R6,[R4, #+0]
    365                  p_int_q->ObjPtr  = (void      *)0;
   \   00000032   0x60A1             STR      R1,[R4, #+8]
    366                  p_int_q->MsgPtr  = (void      *)0;
   \   00000034   0x60E1             STR      R1,[R4, #+12]
    367                  p_int_q->MsgSize = (OS_MSG_SIZE)0u;
   \   00000036   0x8227             STRH     R7,[R4, #+16]
    368                  p_int_q->Flags   = (OS_FLAGS   )0u;
   \   00000038   0x6161             STR      R1,[R4, #+20]
    369                  p_int_q->Opt     = (OS_OPT     )0u;
   \   0000003A   0x8327             STRH     R7,[R4, #+24]
    370                  p_int_q->NextPtr = p_int_q_next;
   \   0000003C   0x6065             STR      R5,[R4, #+4]
    371                  p_int_q++;
   \   0000003E   0x3420             ADDS     R4,R4,#+32
    372                  p_int_q_next++;
   \   00000040   0x3520             ADDS     R5,R5,#+32
    373              }
   \   00000042   0x1E5B             SUBS     R3,R3,#+1
   \   00000044   0xD1F4             BNE      ??OS_IntQTaskInit_3
    374              p_int_q--;
    375              p_int_q_next        = OSCfg_IntQBasePtr;
    376              p_int_q->NextPtr    = p_int_q_next;
   \   00000046   0x3C1C             SUBS     R4,R4,#+28
   \   00000048   0x6022             STR      R2,[R4, #+0]
    377              OSIntQInPtr         = p_int_q_next;
   \   0000004A   0x....             LDR      R3,??DataTable4_21
   \   0000004C   0x601A             STR      R2,[R3, #+0]
    378              OSIntQOutPtr        = p_int_q_next;
   \   0000004E   0x....             LDR      R3,??DataTable4_1
   \   00000050   0x601A             STR      R2,[R3, #+0]
    379              OSIntQNbrEntries    = (OS_OBJ_QTY)0u;
   \   00000052   0x....             LDR      R3,??DataTable4_22
   \   00000054   0x8019             STRH     R1,[R3, #+0]
    380              OSIntQNbrEntriesMax = (OS_OBJ_QTY)0u;
   \   00000056   0x....             LDR      R2,??DataTable4_23
   \   00000058   0x8011             STRH     R1,[R2, #+0]
    381          
    382                                                                      /* -------------- CREATE THE ISR QUEUE TASK ------------- */
    383              if (OSCfg_IntQTaskStkBasePtr == (CPU_STK *)0) {
   \   0000005A   0x....             LDR      R1,??DataTable4_24
   \   0000005C   0x6809             LDR      R1,[R1, #+0]
   \   0000005E   0x2900             CMP      R1,#+0
   \   00000060   0xD101             BNE      ??OS_IntQTaskInit_4
    384                 *p_err = OS_ERR_INT_Q_STK_INVALID;
   \   00000062   0x....             LDR      R1,??DataTable4_25  ;; 0x4655
   \   00000064   0xE006             B.N      ??OS_IntQTaskInit_1
    385                  return;
    386              }
    387          
    388              if (OSCfg_IntQTaskStkSize < OSCfg_StkSizeMin) {
   \                     ??OS_IntQTaskInit_4: (+1)
   \   00000066   0x....             LDR      R2,??DataTable4_26
   \   00000068   0x6812             LDR      R2,[R2, #+0]
   \   0000006A   0x....             LDR      R3,??DataTable4_27
   \   0000006C   0x681B             LDR      R3,[R3, #+0]
   \   0000006E   0x429A             CMP      R2,R3
   \   00000070   0xD202             BCS      ??OS_IntQTaskInit_5
    389                 *p_err = OS_ERR_INT_Q_STK_SIZE_INVALID;
   \   00000072   0x....             LDR      R1,??DataTable4_28  ;; 0x4656
   \                     ??OS_IntQTaskInit_1: (+1)
   \   00000074   0x8001             STRH     R1,[R0, #+0]
    390                  return;
   \   00000076   0xE011             B        ??OS_IntQTaskInit_6
    391              }
    392          
    393              OSTaskCreate((OS_TCB     *)&OSIntQTaskTCB,
    394                           (CPU_CHAR   *)((void *)"uC/OS-III ISR Queue Task"),
    395                           (OS_TASK_PTR )OS_IntQTask,
    396                           (void       *)0,
    397                           (OS_PRIO     )0u,                          /* This task is ALWAYS at priority '0' (i.e. highest)     */
    398                           (CPU_STK    *)OSCfg_IntQTaskStkBasePtr,
    399                           (CPU_STK_SIZE)OSCfg_IntQTaskStkLimit,
    400                           (CPU_STK_SIZE)OSCfg_IntQTaskStkSize,
    401                           (OS_MSG_QTY  )0u,
    402                           (OS_TICK     )0u,
    403                           (void       *)0,
    404                           (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
    405                           (OS_ERR     *)p_err);
   \                     ??OS_IntQTaskInit_5: (+1)
   \   00000078   0x9008             STR      R0,[SP, #+32]
   \   0000007A   0x2003             MOVS     R0,#+3
   \   0000007C   0x9007             STR      R0,[SP, #+28]
   \   0000007E   0x9706             STR      R7,[SP, #+24]
   \   00000080   0x9705             STR      R7,[SP, #+20]
   \   00000082   0x9704             STR      R7,[SP, #+16]
   \   00000084   0x9203             STR      R2,[SP, #+12]
   \   00000086   0x....             LDR      R0,??DataTable4_29
   \   00000088   0x6800             LDR      R0,[R0, #+0]
   \   0000008A   0x9002             STR      R0,[SP, #+8]
   \   0000008C   0x9101             STR      R1,[SP, #+4]
   \   0000008E   0x9700             STR      R7,[SP, #+0]
   \   00000090   0x2300             MOVS     R3,#+0
   \   00000092   0x....             LDR      R2,??DataTable4_30
   \   00000094   0x....             ADR.N    R1,?_0
   \   00000096   0x....             LDR      R0,??DataTable4_31
   \   00000098   0x.... 0x....      BL       OSTaskCreate
    406          }
   \                     ??OS_IntQTaskInit_6: (+1)
   \   0000009C   0xB009             ADD      SP,SP,#+36
   \   0000009E   0xBDF0             POP      {R4-R7,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     OSIntQNbrEntries

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     OSCfg_IntQSize

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x........         DC32     OSIntQNbrEntriesMax

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x........         DC32     OSIntQInPtr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x........         DC32     OSRdyList

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x........         DC32     OSIntQTaskTCB

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x........         DC32     OSPrioCur

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   0x........         DC32     OSPrioSaved

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \   00000000   0x........         DC32     OSIntQOvfCtr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x00004653         DC32     0x4653

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x........         DC32     OSIntQOutPtr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x414D4553         DC32     0x414d4553

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x47414C46         DC32     0x47414c46

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x47495354         DC32     0x47495354

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x47534D54         DC32     0x47534d54

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0x4B434954         DC32     0x4b434954

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   0x53455254         DC32     0x53455254

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \   00000000   0x53555354         DC32     0x53555354

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_9:
   \   00000000   0x55455551         DC32     0x55455551

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_10:
   \   00000000   0x........         DC32     OSTickTaskTCB

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_11:
   \   00000000   0x........         DC32     OSTmrUpdateCtr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_12:
   \   00000000   0x........         DC32     OSTmrUpdateCnt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_13:
   \   00000000   0x........         DC32     OSTmrTaskTCB

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_14:
   \   00000000   0x........         DC32     OSIntQOvfCtr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_15:
   \   00000000   0x........         DC32     OSCfg_IntQBasePtr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_16:
   \   00000000   0x00004652         DC32     0x4652

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_17:
   \   00000000   0x........         DC32     OSCfg_IntQSize

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_18:
   \   00000000   0x00004654         DC32     0x4654

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_19:
   \   00000000   0x........         DC32     OSIntQTaskTimeMax

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_20:
   \   00000000   0x454E4F4E         DC32     0x454e4f4e

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_21:
   \   00000000   0x........         DC32     OSIntQInPtr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_22:
   \   00000000   0x........         DC32     OSIntQNbrEntries

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_23:
   \   00000000   0x........         DC32     OSIntQNbrEntriesMax

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_24:
   \   00000000   0x........         DC32     OSCfg_IntQTaskStkBasePtr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_25:
   \   00000000   0x00004655         DC32     0x4655

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_26:
   \   00000000   0x........         DC32     OSCfg_IntQTaskStkSize

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_27:
   \   00000000   0x........         DC32     OSCfg_StkSizeMin

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_28:
   \   00000000   0x00004656         DC32     0x4656

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_29:
   \   00000000   0x........         DC32     OSCfg_IntQTaskStkLimit

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_30:
   \   00000000   0x........         DC32     OS_IntQTask

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_31:
   \   00000000   0x........         DC32     OSIntQTaskTCB

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x75 0x43          DC8 "uC/OS-III ISR Queue Task"
   \              0x2F 0x4F    
   \              0x53 0x2D    
   \              0x49 0x49    
   \              0x49 0x20    
   \              0x49 0x53    
   \              0x52 0x20    
   \              0x51 0x75    
   \              0x65 0x75    
   \              0x65 0x20    
   \              0x54 0x61    
   \              0x73 0x6B    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    407          
    408          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   OS_IntQPost
        32   -> CPU_IntDisMeasStart
        32   -> CPU_IntDisMeasStop
        32   -> CPU_SR_Restore
        32   -> CPU_SR_Save
        32   -> OS_PrioInsert
      24   OS_IntQRePost
        24   -> OS_FlagPost
        24   -> OS_QPost
        24   -> OS_SchedRoundRobin
        24   -> OS_SemPost
        24   -> OS_TaskQPost
        24   -> OS_TaskResume
        24   -> OS_TaskSemPost
        24   -> OS_TaskSuspend
      24   OS_IntQTask
        24   -> CPU_IntDisMeasStart
        24   -> CPU_IntDisMeasStop
        24   -> CPU_SR_Restore
        24   -> CPU_SR_Save
        24   -> OSSched
        24   -> OS_IntQRePost
        24   -> OS_PrioRemove
      56   OS_IntQTaskInit
        56   -> OSTaskCreate


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_10
       4  ??DataTable4_11
       4  ??DataTable4_12
       4  ??DataTable4_13
       4  ??DataTable4_14
       4  ??DataTable4_15
       4  ??DataTable4_16
       4  ??DataTable4_17
       4  ??DataTable4_18
       4  ??DataTable4_19
       4  ??DataTable4_2
       4  ??DataTable4_20
       4  ??DataTable4_21
       4  ??DataTable4_22
       4  ??DataTable4_23
       4  ??DataTable4_24
       4  ??DataTable4_25
       4  ??DataTable4_26
       4  ??DataTable4_27
       4  ??DataTable4_28
       4  ??DataTable4_29
       4  ??DataTable4_3
       4  ??DataTable4_30
       4  ??DataTable4_31
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
       4  ??DataTable4_9
      28  ?_0
     140  OS_IntQPost
     230  OS_IntQRePost
     102  OS_IntQTask
     160  OS_IntQTaskInit

 
 824 bytes in section .text
 
 824 bytes of CODE memory

Errors: none
Warnings: none

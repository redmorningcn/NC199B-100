###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       20/Nov/2017  11:27:14
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\iar\NC199B-100\Library\Source\APP\User\csnc_package_deal.c
#    Command line =  
#        F:\iar\NC199B-100\Library\Source\APP\User\csnc_package_deal.c -D
#        USE_STDPERIPH_DRIVER -D _STM32F10X_HD -D STM32F10X_CL -D DEBUG -D
#        STM32F103RC -D STM32_FLASH_SIZE=256 -D HSE_VALUE=25000000 -lCN
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\List\
#        -o
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        F:\iar\NC199B-100\Library\Project\IAR\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\User\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\AES\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Config\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\OS\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\User\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Source\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Port\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\OS\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Config\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Protocol\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Iap\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Driver\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\IAR\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\uCOS-III\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\CMSIS\CM3\CoreSupport\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\CMSIS\CM3\DeviceSupport\ST\STM32F10x\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\STM32F10x_StdPeriph_Driver\inc\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-CPU\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-CPU\ARM-Cortex-M3\IAR\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-LIB\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\OSAL\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\OSAL\OS\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\OS\uCOS-III\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\Source\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\Source\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\FatFs\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\FatFs\option\ -Om
#        --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\List\csnc_package_deal.lst
#    Object file  =  
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\Obj\csnc_package_deal.o
#
###############################################################################

F:\iar\NC199B-100\Library\Source\APP\User\csnc_package_deal.c
      1          #ifdef  CVI
      2          #include  <ansi_c.h>
      3          #endif
      4          
      5          #include  "csnc_package_deal.h"
      6          #include  "CrcCheck.h"
      7          
      8          
      9          //数据打包，根据stcCsnrProtocolPara信息，将数据打包成CNSR数据
     10          //

   \                                 In section .text, align 2, keep-with-next
     11          void	DataPackage_CSNC(stcCsncProtocolPara *sprotocolpara)
     12          {
   \                     DataPackage_CSNC: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
     13          	unsigned char	SumCheck8;
     14          	unsigned short	Crc16;
     15          	unsigned short	AddHeadNum;
     16          	unsigned short	i,j;
     17          	unsigned char	ByteStation;
     18          	//unsigned char 	FramNum =0;						//序号
     19          	unsigned char	DataLen;
     20          
     21          	//////////////////////////////////////////////准备数据
     22          	ByteStation = 0;
     23          	sprotocolpara->rxtxbuf[ByteStation++] = FRAM_HERD0;
   \   00000004   0x2010             MOVS     R0,#+16
   \   00000006   0x68A1             LDR      R1,[R4, #+8]
   \   00000008   0x7008             STRB     R0,[R1, #+0]
     24          	sprotocolpara->rxtxbuf[ByteStation++] = FRAM_HERD1;
   \   0000000A   0x2028             MOVS     R0,#+40
   \   0000000C   0x68A1             LDR      R1,[R4, #+8]
   \   0000000E   0x7048             STRB     R0,[R1, #+1]
     25          	sprotocolpara->rxtxbuf[ByteStation++] = sprotocolpara->sourceaddr;	 
   \   00000010   0x7820             LDRB     R0,[R4, #+0]
   \   00000012   0x68A1             LDR      R1,[R4, #+8]
   \   00000014   0x7088             STRB     R0,[R1, #+2]
     26          	sprotocolpara->rxtxbuf[ByteStation++] = sprotocolpara->destaddr;				//地址
   \   00000016   0x7860             LDRB     R0,[R4, #+1]
   \   00000018   0x68A1             LDR      R1,[R4, #+8]
   \   0000001A   0x70C8             STRB     R0,[R1, #+3]
     27          	sprotocolpara->rxtxbuf[ByteStation++] = sprotocolpara->framnum;
   \   0000001C   0x78A0             LDRB     R0,[R4, #+2]
   \   0000001E   0x68A1             LDR      R1,[R4, #+8]
   \   00000020   0x7108             STRB     R0,[R1, #+4]
     28          	sprotocolpara->rxtxbuf[ByteStation++] = (RS485_CHK_CRC<<4) + sprotocolpara->framcode;	
   \   00000022   0x78E0             LDRB     R0,[R4, #+3]
   \   00000024   0x3010             ADDS     R0,R0,#+16
   \   00000026   0x68A1             LDR      R1,[R4, #+8]
   \   00000028   0x7148             STRB     R0,[R1, #+5]
     29          	sprotocolpara->rxtxbuf[ByteStation++] = sprotocolpara->datalen;
   \   0000002A   0x7B20             LDRB     R0,[R4, #+12]
   \   0000002C   0x68A1             LDR      R1,[R4, #+8]
   \   0000002E   0x7188             STRB     R0,[R1, #+6]
     30          	
     31          	DataLen = sprotocolpara->datalen;
   \   00000030   0x7B25             LDRB     R5,[R4, #+12]
     32          	
     33          	SumCheck8 = GetCheckSumNR(&sprotocolpara->rxtxbuf[2],5);		   	//索引区校验
   \   00000032   0x2105             MOVS     R1,#+5
   \   00000034   0x68A0             LDR      R0,[R4, #+8]
   \   00000036   0x1C80             ADDS     R0,R0,#+2
   \   00000038   0x.... 0x....      BL       GetCheckSumNR
     34          
     35          	sprotocolpara->rxtxbuf[ByteStation++] = SumCheck8;
   \   0000003C   0x68A1             LDR      R1,[R4, #+8]
   \   0000003E   0x71C8             STRB     R0,[R1, #+7]
     36          
     37          	memcpy(&sprotocolpara->rxtxbuf[8],sprotocolpara->databuf,DataLen);
   \   00000040   0x462A             MOV      R2,R5
   \   00000042   0x6861             LDR      R1,[R4, #+4]
   \   00000044   0x68A0             LDR      R0,[R4, #+8]
   \   00000046   0x3008             ADDS     R0,R0,#+8
   \   00000048   0x.... 0x....      BL       memcpy
     38          	ByteStation += DataLen; 
   \   0000004C   0x3508             ADDS     R5,R5,#+8
   \   0000004E   0xB2ED             UXTB     R5,R5
     39          	
     40          	Crc16 = GetCrc16Check(&sprotocolpara->rxtxbuf[2],6+sprotocolpara->datalen);
   \   00000050   0x7B20             LDRB     R0,[R4, #+12]
   \   00000052   0x1D81             ADDS     R1,R0,#+6
   \   00000054   0xB289             UXTH     R1,R1
   \   00000056   0x68A0             LDR      R0,[R4, #+8]
   \   00000058   0x1C80             ADDS     R0,R0,#+2
   \   0000005A   0x.... 0x....      BL       GetCrc16Check
     41          	
     42          	sprotocolpara->rxtxbuf[ByteStation+1] = (unsigned char)Crc16;
   \   0000005E   0x68A1             LDR      R1,[R4, #+8]
   \   00000060   0x1869             ADDS     R1,R5,R1
   \   00000062   0x7048             STRB     R0,[R1, #+1]
     43          	sprotocolpara->rxtxbuf[ByteStation]   = (unsigned char)(Crc16>>8);
   \   00000064   0x1200             ASRS     R0,R0,#+8
   \   00000066   0x68A1             LDR      R1,[R4, #+8]
   \   00000068   0x5468             STRB     R0,[R5, R1]
     44          	ByteStation += sizeof(Crc16);
   \   0000006A   0x1CA8             ADDS     R0,R5,#+2
   \   0000006C   0xB2C0             UXTB     R0,R0
     45          	
     46          	////////////////////////////////////////////////			按照协议补位
     47          	AddHeadNum = 0;
   \   0000006E   0x2100             MOVS     R1,#+0
     48          	for(i = 2; i< ByteStation;i++ )							//	数据，补移位 FRAM_HERD0
   \   00000070   0x2202             MOVS     R2,#+2
   \   00000072   0xE00D             B.N      ??DataPackage_CSNC_0
     49          	{
     50          		if(sprotocolpara->rxtxbuf[i] == FRAM_HERD0)
     51          		{
     52          			for(j = ByteStation + AddHeadNum; j >i; j-- ) 	//	移位
     53          			{
     54          				sprotocolpara->rxtxbuf[j] = sprotocolpara->rxtxbuf[j-1];
   \                     ??DataPackage_CSNC_1: (+1)
   \   00000074   0x68A3             LDR      R3,[R4, #+8]
   \   00000076   0x18EE             ADDS     R6,R5,R3
   \   00000078   0xF816 0x6C01      LDRB     R6,[R6, #-1]
   \   0000007C   0x54EE             STRB     R6,[R5, R3]
     55          			}
   \   0000007E   0x1E6D             SUBS     R5,R5,#+1
   \   00000080   0xB2AD             UXTH     R5,R5
   \                     ??DataPackage_CSNC_2: (+1)
   \   00000082   0x42AA             CMP      R2,R5
   \   00000084   0xDBF6             BLT.N    ??DataPackage_CSNC_1
     56          			
     57          			i++;											//跳过移位字节
   \   00000086   0x1C52             ADDS     R2,R2,#+1
   \   00000088   0xB292             UXTH     R2,R2
     58          			AddHeadNum++;
   \   0000008A   0x1C49             ADDS     R1,R1,#+1
   \                     ??DataPackage_CSNC_3: (+1)
   \   0000008C   0x1C52             ADDS     R2,R2,#+1
   \   0000008E   0xB292             UXTH     R2,R2
   \                     ??DataPackage_CSNC_0: (+1)
   \   00000090   0x68A3             LDR      R3,[R4, #+8]
   \   00000092   0x4282             CMP      R2,R0
   \   00000094   0xDA05             BGE.N    ??DataPackage_CSNC_4
   \   00000096   0x5CD3             LDRB     R3,[R2, R3]
   \   00000098   0x2B10             CMP      R3,#+16
   \   0000009A   0xD1F7             BNE.N    ??DataPackage_CSNC_3
   \   0000009C   0x180D             ADDS     R5,R1,R0
   \   0000009E   0xB2AD             UXTH     R5,R5
   \   000000A0   0xE7EF             B.N      ??DataPackage_CSNC_2
     59          		}
     60          	}
     61          
     62          	sprotocolpara->rxtxbuf[ByteStation +AddHeadNum] 		= FRAM_END0;
   \                     ??DataPackage_CSNC_4: (+1)
   \   000000A2   0xB289             UXTH     R1,R1
   \   000000A4   0x180A             ADDS     R2,R1,R0
   \   000000A6   0x2510             MOVS     R5,#+16
   \   000000A8   0x54D5             STRB     R5,[R2, R3]
     63          	sprotocolpara->rxtxbuf[ByteStation +AddHeadNum+1] 	= FRAM_END1;  
   \   000000AA   0x232C             MOVS     R3,#+44
   \   000000AC   0x68A5             LDR      R5,[R4, #+8]
   \   000000AE   0x1952             ADDS     R2,R2,R5
   \   000000B0   0x7053             STRB     R3,[R2, #+1]
     64          	
     65          	sprotocolpara->rxtxlen = (unsigned char)(ByteStation + AddHeadNum + 2);
   \   000000B2   0x1808             ADDS     R0,R1,R0
   \   000000B4   0x1C80             ADDS     R0,R0,#+2
   \   000000B6   0x7360             STRB     R0,[R4, #+13]
     66          }
   \   000000B8   0xBD70             POP      {R4-R6,PC}       ;; return
     67          
     68          
     69          //数据解包，将接受到的数据解包到，stcCsnrProtocolPara信息
     70          //能简析，返回1；否则，返回0

   \                                 In section .text, align 2, keep-with-next
     71          unsigned char   DataUnpack_CSNC(stcCsncProtocolPara *sprotocolpara)
     72          {
   \                     DataUnpack_CSNC: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x4604             MOV      R4,R0
     73              unsigned short			i,j,k;
     74              unsigned char			SumCheck8;
     75              unsigned char			Tmp;
     76              unsigned short			RecCRC16,Check16 = 0;
   \   00000006   0x2500             MOVS     R5,#+0
     77          	int						DataLen = 0;
     78          	
     79          	if(sprotocolpara->rxtxlen< 2+6+2+2)
   \   00000008   0x7B60             LDRB     R0,[R4, #+13]
   \   0000000A   0x280C             CMP      R0,#+12
   \   0000000C   0xDB74             BLT.N    ??DataUnpack_CSNC_0
     80          		return 0;
     81          	
     82          	for(j = 0;j < sprotocolpara->rxtxlen;j++ )		    //去重复通讯首字节
   \   0000000E   0x4628             MOV      R0,R5
   \   00000010   0xE009             B.N      ??DataUnpack_CSNC_1
     83          	{
     84          		if(	 	
     85          				sprotocolpara->rxtxbuf[j] 	== FRAM_HERD0
     86          			&& 	sprotocolpara->rxtxbuf[j+1] == FRAM_HERD0
     87          		   )
     88          		{
     89          			for(k = j;k < sprotocolpara->rxtxlen; k++)
     90          			{
     91          				Tmp	 = sprotocolpara->rxtxbuf[k+1];
     92          				
     93          				sprotocolpara->rxtxbuf[k] = Tmp;
   \                     ??DataUnpack_CSNC_2: (+1)
   \   00000012   0x68A1             LDR      R1,[R4, #+8]
   \   00000014   0x1853             ADDS     R3,R2,R1
   \   00000016   0x785B             LDRB     R3,[R3, #+1]
   \   00000018   0x5453             STRB     R3,[R2, R1]
     94          			}
   \   0000001A   0x1C52             ADDS     R2,R2,#+1
   \   0000001C   0xB292             UXTH     R2,R2
   \                     ??DataUnpack_CSNC_3: (+1)
   \   0000001E   0x7B61             LDRB     R1,[R4, #+13]
   \   00000020   0x428A             CMP      R2,R1
   \   00000022   0xDBF6             BLT.N    ??DataUnpack_CSNC_2
   \                     ??DataUnpack_CSNC_4: (+1)
   \   00000024   0x1C40             ADDS     R0,R0,#+1
   \                     ??DataUnpack_CSNC_1: (+1)
   \   00000026   0x7B61             LDRB     R1,[R4, #+13]
   \   00000028   0xB280             UXTH     R0,R0
   \   0000002A   0x4288             CMP      R0,R1
   \   0000002C   0xD209             BCS.N    ??DataUnpack_CSNC_5
   \   0000002E   0x68A1             LDR      R1,[R4, #+8]
   \   00000030   0x4602             MOV      R2,R0
   \   00000032   0x5C53             LDRB     R3,[R2, R1]
   \   00000034   0x2B10             CMP      R3,#+16
   \   00000036   0xD1F5             BNE.N    ??DataUnpack_CSNC_4
   \   00000038   0x1851             ADDS     R1,R2,R1
   \   0000003A   0x7849             LDRB     R1,[R1, #+1]
   \   0000003C   0x2910             CMP      R1,#+16
   \   0000003E   0xD1F1             BNE.N    ??DataUnpack_CSNC_4
   \   00000040   0xE7ED             B.N      ??DataUnpack_CSNC_3
     95          		}
     96          	}
     97          	
     98              for(i = 0; i < sprotocolpara->rxtxlen- 10;i++)					//循环遍历
   \                     ??DataUnpack_CSNC_5: (+1)
   \   00000042   0x462E             MOV      R6,R5
   \   00000044   0xE005             B.N      ??DataUnpack_CSNC_6
     99              {
    100          		if(		((sprotocolpara->rxtxbuf[i+0]) == FRAM_HERD0) 
    101          			&& 	((sprotocolpara->rxtxbuf[i+1]) == FRAM_HERD1)		
    102          		  )															//报头
    103          		{
    104          			DataLen = sprotocolpara->rxtxbuf[i+6];
    105          			
    106          			if(		
    107          			 		(sprotocolpara->rxtxbuf[i+10+DataLen] 	!= FRAM_END0)	||
    108          			 	 	(sprotocolpara->rxtxbuf[i+11+DataLen] 	!= FRAM_END1)
    109          			 )
    110          			 {	
    111          			 	i = (unsigned short)(i + 10 + DataLen);								//地址不对或帧尾错误，跳过此帧
   \                     ??DataUnpack_CSNC_7: (+1)
   \   00000046   0x19B8             ADDS     R0,R7,R6
   \   00000048   0xF100 0x060A      ADD      R6,R0,#+10
   \   0000004C   0xB2B6             UXTH     R6,R6
    112          			 	continue;
    113          			 }
   \                     ??DataUnpack_CSNC_8: (+1)
   \   0000004E   0x1C76             ADDS     R6,R6,#+1
   \   00000050   0xB2B6             UXTH     R6,R6
   \                     ??DataUnpack_CSNC_6: (+1)
   \   00000052   0x7B60             LDRB     R0,[R4, #+13]
   \   00000054   0x380A             SUBS     R0,R0,#+10
   \   00000056   0x4286             CMP      R6,R0
   \   00000058   0xDA4E             BGE.N    ??DataUnpack_CSNC_0
   \   0000005A   0x68A0             LDR      R0,[R4, #+8]
   \   0000005C   0x1832             ADDS     R2,R6,R0
   \   0000005E   0x7811             LDRB     R1,[R2, #+0]
   \   00000060   0x2910             CMP      R1,#+16
   \   00000062   0xD1F4             BNE.N    ??DataUnpack_CSNC_8
   \   00000064   0x7851             LDRB     R1,[R2, #+1]
   \   00000066   0x2928             CMP      R1,#+40
   \   00000068   0xD1F1             BNE.N    ??DataUnpack_CSNC_8
   \   0000006A   0x7997             LDRB     R7,[R2, #+6]
   \   0000006C   0xEB07 0x0806      ADD      R8,R7,R6
   \   00000070   0x4440             ADD      R0,R8,R0
   \   00000072   0x7A81             LDRB     R1,[R0, #+10]
   \   00000074   0x2910             CMP      R1,#+16
   \   00000076   0xD1E6             BNE.N    ??DataUnpack_CSNC_7
   \   00000078   0x7AC0             LDRB     R0,[R0, #+11]
   \   0000007A   0x282C             CMP      R0,#+44
   \   0000007C   0xD1E3             BNE.N    ??DataUnpack_CSNC_7
    114          			
    115          
    116          			DataLen = sprotocolpara->rxtxbuf[i+6];
    117          			
    118          			SumCheck8 = GetCheckSumNR((unsigned char *)&sprotocolpara->rxtxbuf[i+2],5);		   				//索引区校验
   \   0000007E   0x2105             MOVS     R1,#+5
   \   00000080   0x1C90             ADDS     R0,R2,#+2
   \   00000082   0x.... 0x....      BL       GetCheckSumNR
   \   00000086   0x4681             MOV      R9,R0
    119          						
    120          			RecCRC16 = ((unsigned short)sprotocolpara->rxtxbuf[i+8+DataLen]) *256 + sprotocolpara->rxtxbuf[i+9+DataLen];	//校验	
   \   00000088   0x68A0             LDR      R0,[R4, #+8]
   \   0000008A   0xEB08 0x0100      ADD      R1,R8,R0
   \   0000008E   0x7A0A             LDRB     R2,[R1, #+8]
   \   00000090   0x7A49             LDRB     R1,[R1, #+9]
   \   00000092   0xEB01 0x2802      ADD      R8,R1,R2, LSL #+8
    121          
    122          			switch(sprotocolpara->rxtxbuf[i+5]>>4)													//校验和算法判断
   \   00000096   0x1830             ADDS     R0,R6,R0
   \   00000098   0x7941             LDRB     R1,[R0, #+5]
   \   0000009A   0x0909             LSRS     R1,R1,#+4
   \   0000009C   0x2901             CMP      R1,#+1
   \   0000009E   0xD105             BNE.N    ??DataUnpack_CSNC_9
    123          			{
    124          					case	RS485_CHK_SUM:
    125          									//Check16 = GetCheckSum16(&sprotocolpara->rxtxbuf[i+2],6+DataLen);
    126          									////PrintfCOM0(("\r\n 16位校验和！");
    127          									break;
    128          					case	RS485_CHK_CRC:
    129          									Check16 = GetCrc16Check(&sprotocolpara->rxtxbuf[i+2],(unsigned char )(6+DataLen));
   \   000000A0   0x1DB9             ADDS     R1,R7,#+6
   \   000000A2   0xB2C9             UXTB     R1,R1
   \   000000A4   0x1C80             ADDS     R0,R0,#+2
   \   000000A6   0x.... 0x....      BL       GetCrc16Check
   \   000000AA   0x4605             MOV      R5,R0
    130          									////PrintfCOM0(("\r\n CRC校验！");
    131          									break;
    132          					case	RS485_CHK_RESUM:
    133          									break;
    134          			}
    135          			
    136          			if(			
    137          						SumCheck8 == 	sprotocolpara->rxtxbuf[i+7] 
    138          					&& 	RecCRC16  ==	Check16 				
    139          			  )
   \                     ??DataUnpack_CSNC_9: (+1)
   \   000000AC   0x68A0             LDR      R0,[R4, #+8]
   \   000000AE   0x1830             ADDS     R0,R6,R0
   \   000000B0   0x79C1             LDRB     R1,[R0, #+7]
   \   000000B2   0xFA5F 0xF989      UXTB     R9,R9
   \   000000B6   0x4589             CMP      R9,R1
   \   000000B8   0xD1C9             BNE.N    ??DataUnpack_CSNC_8
   \   000000BA   0xFA1F 0xF888      UXTH     R8,R8
   \   000000BE   0x45A8             CMP      R8,R5
   \   000000C0   0xD1C5             BNE.N    ??DataUnpack_CSNC_8
    140          			{
    141          				sprotocolpara->sourceaddr 	= sprotocolpara->rxtxbuf[i+2];	
   \   000000C2   0x7880             LDRB     R0,[R0, #+2]
   \   000000C4   0x7020             STRB     R0,[R4, #+0]
    142          				sprotocolpara->destaddr 	= sprotocolpara->rxtxbuf[i+3];	
   \   000000C6   0x68A0             LDR      R0,[R4, #+8]
   \   000000C8   0x1830             ADDS     R0,R6,R0
   \   000000CA   0x78C0             LDRB     R0,[R0, #+3]
   \   000000CC   0x7060             STRB     R0,[R4, #+1]
    143          				sprotocolpara->framnum   	= sprotocolpara->rxtxbuf[i+4];
   \   000000CE   0x68A0             LDR      R0,[R4, #+8]
   \   000000D0   0x1830             ADDS     R0,R6,R0
   \   000000D2   0x7900             LDRB     R0,[R0, #+4]
   \   000000D4   0x70A0             STRB     R0,[R4, #+2]
    144          				sprotocolpara->framcode  	= sprotocolpara->rxtxbuf[i+5]&0x0f;
   \   000000D6   0x68A0             LDR      R0,[R4, #+8]
   \   000000D8   0x1830             ADDS     R0,R6,R0
   \   000000DA   0x7940             LDRB     R0,[R0, #+5]
   \   000000DC   0xF000 0x000F      AND      R0,R0,#0xF
   \   000000E0   0x70E0             STRB     R0,[R4, #+3]
    145          				sprotocolpara->datalen     	= (unsigned char )DataLen; 
   \   000000E2   0x7327             STRB     R7,[R4, #+12]
    146          
    147          				memcpy(sprotocolpara->databuf,&sprotocolpara->rxtxbuf[i+8],DataLen);				//数据拷贝
   \   000000E4   0x463A             MOV      R2,R7
   \   000000E6   0x68A0             LDR      R0,[R4, #+8]
   \   000000E8   0x1830             ADDS     R0,R6,R0
   \   000000EA   0xF100 0x0108      ADD      R1,R0,#+8
   \   000000EE   0x6860             LDR      R0,[R4, #+4]
   \   000000F0   0x.... 0x....      BL       memcpy
    148          				 
    149          				return	1;
   \   000000F4   0x2001             MOVS     R0,#+1
   \   000000F6   0xE000             B.N      ??DataUnpack_CSNC_10
    150          			}
    151          		}
    152          	}
    153            
    154              return	0;
   \                     ??DataUnpack_CSNC_0: (+1)
   \   000000F8   0x2000             MOVS     R0,#+0
   \                     ??DataUnpack_CSNC_10: (+1)
   \   000000FA   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
    155          }
    156          
    157          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   DataPackage_CSNC
        16   -> GetCheckSumNR
        16   -> GetCrc16Check
        16   -> memcpy
      32   DataUnpack_CSNC
        32   -> GetCheckSumNR
        32   -> GetCrc16Check
        32   -> memcpy


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     186  DataPackage_CSNC
     254  DataUnpack_CSNC

 
 440 bytes in section .text
 
 440 bytes of CODE memory

Errors: none
Warnings: 4

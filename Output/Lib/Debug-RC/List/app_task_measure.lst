###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       30/Nov/2017  10:06:07
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\iar\NC199B-100\Library\Source\APP\Tasks\app_task_measure.c
#    Command line =  
#        F:\iar\NC199B-100\Library\Source\APP\Tasks\app_task_measure.c -D
#        USE_STDPERIPH_DRIVER -D _STM32F10X_HD -D STM32F10X_CL -D DEBUG -D
#        STM32F103RC -D STM32_FLASH_SIZE=256 -D HSE_VALUE=25000000 -lCN
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\List\
#        -o
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        F:\iar\NC199B-100\Library\Project\IAR\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\User\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\AES\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Config\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\OS\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\User\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Source\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Port\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\OS\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Config\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Protocol\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Iap\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Driver\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\IAR\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\uCOS-III\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\CMSIS\CM3\CoreSupport\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\CMSIS\CM3\DeviceSupport\ST\STM32F10x\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\STM32F10x_StdPeriph_Driver\inc\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-CPU\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-CPU\ARM-Cortex-M3\IAR\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-LIB\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\OSAL\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\OSAL\OS\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\OS\uCOS-III\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\Source\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\Source\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\FatFs\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\FatFs\option\ -Om
#        --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\List\app_task_measure.lst
#    Object file  =  
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\Obj\app_task_measure.o
#
###############################################################################

F:\iar\NC199B-100\Library\Source\APP\Tasks\app_task_measure.c
      1          /*******************************************************************************
      2           *   Revised:        All copyrights reserved to redmorningcn.
      3           *   Revision:       v1.0
      4           *   Writer:	     redmorningcn.
      5           *
      6           *   Description:    双击选中 store 按 Ctrl + H, 钩选 Match the case, Replace with
      7           *                   输入您要的名字，点击 Replace All
      8           *                   双击选中 Store 按 Ctrl + H, 钩选 Match the case, Replace with
      9           *                   输入您要的名字，点击 Replace All
     10           *                   双击选中 STORE 按 Ctrl + H, 钩选 Match the case, Replace with
     11           *                   输入您要的名字，点击 Replace All
     12           *                   在 app_cfg.h 中指定本任务的 优先级  （ APP_TASK_STORE_PRIO ）
     13           *                                            和 任务堆栈（ APP_TASK_STORE_STK_SIZE ）大小
     14           *                   在 app.h 中声明本任务的     创建函数（ void  App_TaskStoreCreate(void) ）
     15           *                                            和 看门狗标志位 （ WDTFLAG_Store ）
     16           *
     17           *   Notes:
     18           *     				E-mail: redmorningcn@qq.com
     19           *
     20           *******************************************************************************/
     21          
     22          /*******************************************************************************
     23           * INCLUDES
     24           */
     25          #define  SNL_APP_SOURCE
     26          #include <includes.h>
     27          
     28          
     29          //#ifdef VSC_INCLUDE_SOURCE_FILE_NAMES
     30          //const  CPU_CHAR  *app_task_key__c = "$Id: $";
     31          //#endif
     32          
     33          #define APP_TASK_KEY_EN     DEF_ENABLED
     34          #if APP_TASK_KEY_EN == DEF_ENABLED
     35          /*******************************************************************************
     36           * CONSTANTS
     37           */
     38          
     39          /*******************************************************************************
     40           * MACROS
     41           */
     42          //该任务的控制周期   (OS_CFG_TICK_RATE_HZ)为1S
     43          //#define  KEY_CYCLE_TIME_TICKS     (OS_CFG_TICK_RATE_HZ * 1u)
     44          
     45          //进气口电磁阀  pd.3
     46          #define     DCF_GPIO_AIR_IN      303  
     47          //出气口电磁阀 pd.2
     48          #define     DCF_GPIO_AIR_OUT     302   
     49               
     50               
     51          /*******************************************************************************
     52           * TYPEDEFS
     53           */
     54          /***********************************************
     55          * 描述： 任务控制块（TCB）
     56          */

   \                                 In section .bss, align 4
     57          static  OS_TCB   AppTaskMeasureTCB;
   \                     AppTaskMeasureTCB:
   \   00000000                      DS8 184
   \   000000B8                      DS8 512
     58          
     59          /***********************************************
     60          * 描述： 任务堆栈（STACKS）
     61          */
     62          static  CPU_STK  AppTaskMeasureStk[ APP_TASK_MEASURE_STK_SIZE ];
     63          
     64          /*******************************************************************************
     65           * LOCAL VARIABLES
     66           */
     67          
     68          /*******************************************************************************
     69           * GLOBAL VARIABLES
     70           */
     71          /*******************************************************************************
     72           * LOCAL FUNCTIONS
     73           */
     74          static  void    AppTaskMeasure          (void *p_arg);
     75          static  void    APP_MeasureInit         (void);
     76          void            StartAirMeasure         (void);
     77          
     78          //static  void    MeasureValueHandle      (StrCtrlDCB *dcb);
     79          
     80          
     81          /*******************************************************************************
     82           * GLOBAL FUNCTIONS
     83           */
     84          
     85          /*******************************************************************************
     86           * EXTERN VARIABLES
     87           */
     88          extern OS_SEM   App_BeepSem;
     89          
     90          /*******************************************************************************
     91           * EXTERN FUNCTIONS
     92           */
     93          
     94          /*******************************************************************************/
     95          
     96          /*******************************************************************************
     97           * 名    称： App_TaskMeasureCreate
     98           * 功    能： **任务创建
     99           * 入口参数： 无
    100           * 出口参数： 无
    101           * 作　　者： Roger-WY.
    102           * 创建日期： 2015-02-05
    103           * 修    改：
    104           * 修改日期：
    105           * 备    注： 任务创建函数需要在app.h文件中声明
    106           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    107          void  App_TaskMeasureCreate(void)
    108          {
   \                     App_TaskMeasureCreate: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB08B             SUB      SP,SP,#+44
    109              OS_ERR  err;
    110          
    111              /***********************************************
    112              * 描述： 任务创建
    113              */
    114              OSTaskCreate((OS_TCB     *)&AppTaskMeasureTCB,                  // 任务控制块  （当前文件中定义）
    115                           (CPU_CHAR   *)"App Task Measure",                  // 任务名称
    116                           (OS_TASK_PTR ) AppTaskMeasure,                     // 任务函数指针（当前文件中定义）
    117                           (void       *) 0,                              // 任务函数参数
    118                           (OS_PRIO     ) APP_TASK_KEY_PRIO,              // 任务优先级，不同任务优先级可以相同，0 < 优先级 < OS_CFG_PRIO_MAX - 2（app_cfg.h中定义）
    119                           (CPU_STK    *)&AppTaskMeasureStk[0],               // 任务栈顶
    120                           (CPU_STK_SIZE) APP_TASK_KEY_STK_SIZE / 10,     // 任务栈溢出报警值
    121                           (CPU_STK_SIZE) APP_TASK_KEY_STK_SIZE,          // 任务栈大小（CPU数据宽度 * 8 * size = 4 * 8 * size(字节)）（app_cfg.h中定义）
    122                           (OS_MSG_QTY  ) 5u,                             // 可以发送给任务的最大消息队列数量
    123                           (OS_TICK     ) 0u,                             // 相同优先级任务的轮循时间（ms），0为默认
    124                           (void       *) 0,                              // 是一个指向它被用作一个TCB扩展用户提供的存储器位置
    125                           (OS_OPT      )(OS_OPT_TASK_STK_CHK |           // 允许堆栈检查该任务
    126                                          OS_OPT_TASK_STK_CLR),           // 创建任务时堆栈清零
    127                           (OS_ERR     *)&err);                           // 指向错误代码的指针，用于创建结果处理
   \   00000004   0x....             LDR.N    R0,??DataTable3
   \   00000006   0xA909             ADD      R1,SP,#+36
   \   00000008   0x9108             STR      R1,[SP, #+32]
   \   0000000A   0x2103             MOVS     R1,#+3
   \   0000000C   0x9107             STR      R1,[SP, #+28]
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0x9106             STR      R1,[SP, #+24]
   \   00000012   0x9105             STR      R1,[SP, #+20]
   \   00000014   0x2105             MOVS     R1,#+5
   \   00000016   0x9104             STR      R1,[SP, #+16]
   \   00000018   0x2180             MOVS     R1,#+128
   \   0000001A   0x9103             STR      R1,[SP, #+12]
   \   0000001C   0x210C             MOVS     R1,#+12
   \   0000001E   0x9102             STR      R1,[SP, #+8]
   \   00000020   0xF100 0x01B8      ADD      R1,R0,#+184
   \   00000024   0x9101             STR      R1,[SP, #+4]
   \   00000026   0x2117             MOVS     R1,#+23
   \   00000028   0x9100             STR      R1,[SP, #+0]
   \   0000002A   0x2300             MOVS     R3,#+0
   \   0000002C   0x.... 0x....      ADR.W    R2,AppTaskMeasure
   \   00000030   0x.... 0x....      ADR.W    R1,?_0
   \   00000034   0x.... 0x....      BL       OSTaskCreate
    128          
    129          }
   \   00000038   0xB00B             ADD      SP,SP,#+44
   \   0000003A   0xBD00             POP      {PC}             ;; return
    130          
    131          /*******************************************************************************
    132           * 名    称： AppTaskMeasure
    133           * 功    能： 控制任务
    134           * 入口参数： p_arg - 由任务创建函数传入
    135           * 出口参数： 无
    136           * 作　　者： Roger-WY.
    137           * 创建日期： 2015-02-05
    138           * 修    改：
    139           * 修改日期：
    140           *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    141          static  void  AppTaskMeasure (void *p_arg)
    142          {
   \                     AppTaskMeasure: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    143          //    OS_ERR      err;
    144              /***********************************************
    145              * 描述： 任务初始化
    146              */
    147              APP_MeasureInit();
   \   00000002   0x.... 0x....      BL       APP_MeasureInit
    148          
    149              /***********************************************
    150              * 描述：Task body, always written as an infinite loop.
    151              */
    152              while (DEF_TRUE) {
    153          
    154                  /***********************************************
    155                  * 描述： 本任务看门狗标志置位
    156                  */
    157          //        OS_FlagPost ((OS_FLAG_GRP *)&WdtFlagGRP,
    158          //                     (OS_FLAGS     ) WDT_FLAG_KEY,
    159          //                     (OS_OPT       ) OS_OPT_POST_FLAG_SET,
    160          //                     (CPU_TS       ) 0,
    161          //                     (OS_ERR      *) &err);
    162                  /***********************************************
    163                  * 描述： 当有按键事件时获取键值和按键事件
    164                  */
    165                  StartAirMeasure();
   \                     ??AppTaskMeasure_0: (+1)
   \   00000006   0x.... 0x....      BL       StartAirMeasure
    166                  
    167                  BSP_OS_TimeDlyHMSM(0,10,0,0);       //10min
   \   0000000A   0x2300             MOVS     R3,#+0
   \   0000000C   0x461A             MOV      R2,R3
   \   0000000E   0x210A             MOVS     R1,#+10
   \   00000010   0x4610             MOV      R0,R2
   \   00000012   0x.... 0x....      BL       BSP_OS_TimeDlyHMSM
   \   00000016   0xE7F6             B.N      ??AppTaskMeasure_0
    168              }
    169          }
    170          /*******************************************************************************
    171           * 作　　者： redmorningcn.
    172           * 创建日期： 2017-11-22
    173           * 修    改：
    174           * 修改日期：
    175           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    176          void        Measure_GPIO_Init(void)
    177          {
   \                     Measure_GPIO_Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    178              //端口初始化为I/O口
    179              GPIO_PinselConfig(DCF_GPIO_AIR_IN,0);
   \   00000002   0xF240 0x142F      MOVW     R4,#+303
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x4620             MOV      R0,R4
   \   0000000A   0x.... 0x....      BL       GPIO_PinselConfig
    180              GPIO_PinselConfig(DCF_GPIO_AIR_OUT,0);
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0xF44F 0x7097      MOV      R0,#+302
   \   00000014   0x.... 0x....      BL       GPIO_PinselConfig
    181              
    182              GPIO_SetOrClearValue(DCF_GPIO_AIR_IN, 0);   //关闭电磁阀
   \   00000018   0x2100             MOVS     R1,#+0
   \   0000001A   0x4620             MOV      R0,R4
   \   0000001C   0x.... 0x....      BL       GPIO_SetOrClearValue
    183              GPIO_SetOrClearValue(DCF_GPIO_AIR_OUT,0);   //关闭电磁阀
   \   00000020   0x2100             MOVS     R1,#+0
   \   00000022   0xF44F 0x7097      MOV      R0,#+302
   \   00000026   0x.... 0x....      BL       GPIO_SetOrClearValue
    184              
    185              Ctrl.Para.dat.sRunPara.SysSta.OpenAir = 0;  //气路打开标识置1
    186              Ctrl.Para.dat.sRunPara.SysSta.CloseAir= 1;         
   \   0000002A   0x....             LDR.N    R0,??DataTable3_1
   \   0000002C   0xF890 0x1048      LDRB     R1,[R0, #+72]
   \   00000030   0xF001 0x01FE      AND      R1,R1,#0xFE
   \   00000034   0xF041 0x0102      ORR      R1,R1,#0x2
   \   00000038   0xF880 0x1048      STRB     R1,[R0, #+72]
    187          }
   \   0000003C   0xBD10             POP      {R4,PC}          ;; return
    188          
    189          /*******************************************************************************
    190           * 作　　者： redmorningcn.
    191           * 创建日期： 2017-11-23
    192           * 修    改： 打开 电磁阀，先打开输出，再打开输入。然后置测量标识
    193                        关闭 电磁阀，先关输入，在关输出。然后置测试标识
    194           * 修改日期：
    195           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    196          void    CloseAir(void)
    197          {
   \                     CloseAir: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    198              OS_ERR  err;
    199          
    200              ////////关闭测试
    201              GPIO_SetOrClearValue(DCF_GPIO_AIR_IN,0);    //先关输入
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0xF240 0x102F      MOVW     R0,#+303
   \   00000008   0x.... 0x....      BL       GPIO_SetOrClearValue
    202              OSTimeDly(500, OS_OPT_TIME_DLY, &err);      //延时0.1s
   \   0000000C   0x466A             MOV      R2,SP
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0xF44F 0x70FA      MOV      R0,#+500
   \   00000014   0x.... 0x....      BL       OSTimeDly
    203              
    204              GPIO_SetOrClearValue(DCF_GPIO_AIR_OUT,0);   //再关输出
   \   00000018   0x2100             MOVS     R1,#+0
   \   0000001A   0xF44F 0x7097      MOV      R0,#+302
   \   0000001E   0x.... 0x....      BL       GPIO_SetOrClearValue
    205              OSTimeDly(500, OS_OPT_TIME_DLY, &err);      //延时0.5s    
   \   00000022   0x466A             MOV      R2,SP
   \   00000024   0x2100             MOVS     R1,#+0
   \   00000026   0xF44F 0x70FA      MOV      R0,#+500
   \   0000002A   0x.... 0x....      BL       OSTimeDly
    206          }
   \   0000002E   0xBD01             POP      {R0,PC}          ;; return
    207          
    208          /*******************************************************************************
    209           * 作　　者： redmorningcn.
    210           * 创建日期： 2017-11-22
    211           * 修    改： 打开 电磁阀，先打开输出，再打开输入。然后置测量标识
    212                        关闭 电磁阀，先关输入，在关输出。然后置测试标识
    213           * 修改日期：
    214           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    215          void    StartAirMeasure(void)
    216          {
   \                     StartAirMeasure: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    217              OS_ERR  err;
    218          
    219              ////////启动测试
    220              GPIO_SetOrClearValue(DCF_GPIO_AIR_OUT,1);   //打开输出
   \   00000004   0x2101             MOVS     R1,#+1
   \   00000006   0xF44F 0x7097      MOV      R0,#+302
   \   0000000A   0x.... 0x....      BL       GPIO_SetOrClearValue
    221              OSTimeDly(500, OS_OPT_TIME_DLY, &err);      //延时0.5s
   \   0000000E   0x466A             MOV      R2,SP
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0xF44F 0x70FA      MOV      R0,#+500
   \   00000016   0x.... 0x....      BL       OSTimeDly
    222              
    223              GPIO_SetOrClearValue(DCF_GPIO_AIR_IN,1);    //打开输出
   \   0000001A   0x2101             MOVS     R1,#+1
   \   0000001C   0xF240 0x102F      MOVW     R0,#+303
   \   00000020   0x.... 0x....      BL       GPIO_SetOrClearValue
    224              OSTimeDly(100, OS_OPT_TIME_DLY, &err);      //延时0.1s
   \   00000024   0x466A             MOV      R2,SP
   \   00000026   0x2100             MOVS     R1,#+0
   \   00000028   0x2064             MOVS     R0,#+100
   \   0000002A   0x.... 0x....      BL       OSTimeDly
    225          
    226              Ctrl.Para.dat.sRunPara.SysSta.OpenAir = 1;  //气路打开标识置1
    227              Ctrl.Para.dat.sRunPara.SysSta.CloseAir= 0; 
   \   0000002E   0x....             LDR.N    R4,??DataTable3_1
   \   00000030   0xF894 0x0048      LDRB     R0,[R4, #+72]
   \   00000034   0xF000 0x00FD      AND      R0,R0,#0xFD
   \   00000038   0xF040 0x0001      ORR      R0,R0,#0x1
   \   0000003C   0xF884 0x0048      STRB     R0,[R4, #+72]
    228              
    229              OSTimeDly(10000, OS_OPT_TIME_DLY, &err);    //延时10s
   \   00000040   0x466A             MOV      R2,SP
   \   00000042   0x2100             MOVS     R1,#+0
   \   00000044   0xF242 0x7010      MOVW     R0,#+10000
   \   00000048   0x.... 0x....      BL       OSTimeDly
    230              Ctrl.Para.dat.sRunPara.SysSta.StartMeasure = 1;
   \   0000004C   0xF894 0x0048      LDRB     R0,[R4, #+72]
   \   00000050   0xF040 0x0004      ORR      R0,R0,#0x4
   \   00000054   0xF884 0x0048      STRB     R0,[R4, #+72]
    231              
    232              OSTimeDly(2000, OS_OPT_TIME_DLY, &err);     //延时2s    
   \   00000058   0x466A             MOV      R2,SP
   \   0000005A   0x2100             MOVS     R1,#+0
   \   0000005C   0xF44F 0x60FA      MOV      R0,#+2000
   \   00000060   0x.... 0x....      BL       OSTimeDly
    233              //初始化定时器
    234              osal_start_timerEx( OS_TASK_ID_STORE,
    235                                OS_EVT_STORE_TICKS,
    236                                1);                       //置存储定时器1，马上启动存储
   \   00000064   0x2201             MOVS     R2,#+1
   \   00000066   0x4611             MOV      R1,R2
   \   00000068   0x2004             MOVS     R0,#+4
   \   0000006A   0x.... 0x....      BL       osal_start_timerEx
    237              Ctrl.Para.dat.sRunPara.SysSta.Store   = 1;  //可以进行数据储存（测量过程的数据）
   \   0000006E   0xF894 0x0048      LDRB     R0,[R4, #+72]
   \   00000072   0xF040 0x0010      ORR      R0,R0,#0x10
   \   00000076   0xF884 0x0048      STRB     R0,[R4, #+72]
    238              
    239              OSTimeDly(2000, OS_OPT_TIME_DLY, &err);     //延时2s   
   \   0000007A   0x466A             MOV      R2,SP
   \   0000007C   0x2100             MOVS     R1,#+0
   \   0000007E   0xF44F 0x60FA      MOV      R0,#+2000
   \   00000082   0x.... 0x....      BL       OSTimeDly
    240              
    241              CloseAir();                                 //关闭气路
   \   00000086   0x.... 0x....      BL       CloseAir
    242                
    243              Ctrl.Para.dat.sRunPara.SysSta.OpenAir = 0;  //气路打开标识置1
    244              Ctrl.Para.dat.sRunPara.SysSta.CloseAir= 1;     
    245              
    246              Ctrl.Para.dat.sRunPara.SysSta.StartMeasure = 0;
   \   0000008A   0xF894 0x0048      LDRB     R0,[R4, #+72]
   \   0000008E   0xF000 0x00FA      AND      R0,R0,#0xFA
   \   00000092   0xF040 0x0002      ORR      R0,R0,#0x2
   \   00000096   0xF884 0x0048      STRB     R0,[R4, #+72]
    247          }
   \   0000009A   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    248          
    249          
    250          /*******************************************************************************
    251           * 名    称： APP_MeasureInit
    252           * 功    能： 任务初始化
    253           * 入口参数： 无
    254           * 出口参数： 无
    255           * 作　　者： Roger-WY.
    256           * 创建日期： 2015-03-28
    257           * 修    改：
    258           * 修改日期：
    259           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    260          static void APP_MeasureInit(void)
    261          {
    262              /***********************************************
    263              * 描述： 初始化本任务用到的相关硬件
    264              */
    265              Measure_GPIO_Init();            //初始化端口
   \                     APP_MeasureInit: (+1)
   \   00000000   0x....             B.N      Measure_GPIO_Init
    266          
    267              /***********************************************
    268              * 描述： 在看门狗标志组注册本任务的看门狗标志
    269              */
    270              //WdtFlags |= WDT_FLAG_KEY;
    271          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     AppTaskMeasureTCB

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     Ctrl

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x41 0x70          DC8 "App Task Measure"
   \              0x70 0x20    
   \              0x54 0x61    
   \              0x73 0x6B    
   \              0x20 0x4D    
   \              0x65 0x61    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    272          
    273          /*******************************************************************************
    274           * 				end of file
    275           *******************************************************************************/
    276          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   APP_MeasureInit
         0   -> Measure_GPIO_Init
       8   AppTaskMeasure
         8   -> APP_MeasureInit
         8   -> BSP_OS_TimeDlyHMSM
         8   -> StartAirMeasure
      48   App_TaskMeasureCreate
        48   -> OSTaskCreate
       8   CloseAir
         8   -> GPIO_SetOrClearValue
         8   -> OSTimeDly
       8   Measure_GPIO_Init
         8   -> GPIO_PinselConfig
         8   -> GPIO_SetOrClearValue
      16   StartAirMeasure
        16   -> CloseAir
        16   -> GPIO_SetOrClearValue
        16   -> OSTimeDly
        16   -> osal_start_timerEx


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
      20  ?_0
       2  APP_MeasureInit
      24  AppTaskMeasure
     696  AppTaskMeasureTCB
          AppTaskMeasureStk
      60  App_TaskMeasureCreate
      48  CloseAir
      62  Measure_GPIO_Init
     156  StartAirMeasure

 
 696 bytes in section .bss
 380 bytes in section .text
 
 380 bytes of CODE memory
 696 bytes of DATA memory

Errors: none
Warnings: none

###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       23/Nov/2017  13:36:21
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  F:\iar\NC199B-100\Library\Source\BSP\Driver\bsp_max7219.c
#    Command line =  
#        F:\iar\NC199B-100\Library\Source\BSP\Driver\bsp_max7219.c -D
#        USE_STDPERIPH_DRIVER -D _STM32F10X_HD -D STM32F10X_CL -D DEBUG -D
#        STM32F103RC -D STM32_FLASH_SIZE=256 -D HSE_VALUE=25000000 -lCN
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\List\
#        -o
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        F:\iar\NC199B-100\Library\Project\IAR\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\User\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\AES\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Config\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\OS\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\User\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Source\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Port\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\OS\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Config\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Protocol\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Iap\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Driver\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\IAR\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\uCOS-III\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\CMSIS\CM3\CoreSupport\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\CMSIS\CM3\DeviceSupport\ST\STM32F10x\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\STM32F10x_StdPeriph_Driver\inc\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-CPU\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-CPU\ARM-Cortex-M3\IAR\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-LIB\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\OSAL\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\OSAL\OS\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\OS\uCOS-III\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\Source\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\Source\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\FatFs\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\FatFs\option\ -Om
#        --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\List\bsp_max7219.lst
#    Object file  =  
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\Obj\bsp_max7219.o
#
###############################################################################

F:\iar\NC199B-100\Library\Source\BSP\Driver\bsp_max7219.c
      1          /*******************************************************************************
      2           *   Filename:      bsp_max7219.c
      3           *   Revised:       $Date: 2015-12-07$
      4           *   Revision:      $
      5           *	 Writer:		Wuming Shen.
      6           *
      7           *   Description:
      8           *   Notes:
      9           *					QQ:276193028
     10           *     				E-mail:shenchangwei945@163.com
     11           *
     12           *   All copyrights reserved to Wuming Shen.
     13           *
     14           *******************************************************************************/
     15          
     16          /*******************************************************************************
     17          * INCLUDES
     18          */
     19          #include <includes.h>
     20          #include <global.h>
     21          #include <app_lib.h>
     22          #include <string.h>
     23          #include <stdlib.h> 
     24          #include <bsp_max7219.h>
     25          
     26          #define BSP_MAX7219_MODULE_EN 1
     27          #if BSP_MAX7219_MODULE_EN > 0
     28          /*******************************************************************************
     29           * CONSTANTS
     30           */
     31          /***********************************************
     32          * 描述： max7219寄存器地址定义
     33          */
     34          #define MAX7279_NON_OPT         0x00            // 空操作寄存器
     35          #define Digit0                  0x01            // 数码管1寄存器
     36          #define Digit1                  0x02            // 数码管2寄存器
     37          #define Digit2                  0x03            // 数码管3寄存器
     38          #define Digit3                  0x04            // 数码管4寄存器
     39          #define Digit4                  0x05            // 数码管5寄存器
     40          #define Digit5                  0x06            // 数码管6寄存器
     41          #define Digit6                  0x07            // 数码管7寄存器
     42          #define Digit7                  0x08            // 数码管8寄存器
     43          /**/
     44          #define MAX7279_DECODE_MODE     0x09            // 译码模式寄存器
     45          #define MAX7279_BRIGHTNESS      0x0a            // 亮度寄存器
     46          #define MAX7279_SCAN            0x0b            // 扫描位数寄存器
     47          #define MAX7279_LOW_PWR         0x0c            // 低功耗模式寄存器
     48          #define MAX7279_DISP_TEST       0x0f            // 显示测试寄存器
     49          
     50          /***********************************************
     51          * 描述： max7219控制寄存器命令
     52          */
     53          #define MAX7279_LOW_PWR_MODE    0x00            // 低功耗方式
     54          #define MAX7279_NORMAL_MODE     0x01            // 正常操作方式
     55          #define MAX7279_DECODE_SET      0x00            // 译码设置，8位均为BCD码;对8个数都编码
     56          #define MAX7279_8_DIGIT_SCAN    0x07            // 扫描位数设置，显示8位数码管
     57          #define MAX7279_4_DIGIT_SCAN    0x03            // 扫描位数设置，显示4位数码管
     58          //#define MAX7279_BRIGHTNESS_LEVEL    0x00      // 亮度级别设置
     59          #define MAX7279_BRIGHTNESS_LEVEL 0X0A           // 亮度级别设置
     60          //#define MAX7279_BRIGHTNESS_LEVEL    0xf       // 亮度级别设置
     61          #define MAX7279_TEST_ENTER      0x01            // 显示测试模式
     62          #define MAX7279_TEST_EXIT       0x00            // 显示测试结束，恢复正常工作模式
     63          
     64          
     65          /***********************************************
     66          * 描述： 
     67          */
     68          
     69          /***********************************************
     70          * 描述： 
     71          */
     72          uint8           dis_num_pos = 0;                //显示位置
     73          
     74          StrLedDisp    LedDispCtrl[DISPLAY_FRAME_NUM]  = {0};
     75          //uint8_t       LedDispBuf[DISPLAY_LED_NUM]     = {Digit0,Digit1,Digit2,Digit3,Digit4,Digit5,Digit6,Digit7};

   \                                 In section .data, align 4
     76          uint8_t       LedDispBuf[DISPLAY_LED_NUM]     = {Digit0,Digit1,Digit2,Digit3};
   \                     LedDispBuf:
   \   00000000   0x01 0x02          DC8 1, 2, 3, 4
   \              0x03 0x04    
     77          
     78          /***********************************************
     79          * 描述： redmorningcn 2017-05-22
     80          */

   \                                 In section .text, align 4, keep-with-next
     81          const uint8_t LED_SEG_CODE[]    = {
   \                     LED_SEG_CODE:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000017   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 229, 229, 229, 229, 229, 229, 229
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0xE5 0xE5    
   \              0xE5 0xE5    
   \              0xE5 0xE5    
   \              0xE5         
   \   00000028   0xE5 0xE5          DC8 229, 229, 229, 229, 128, 1, 128, 229, 126, 48, 109, 121, 51, 91, 95
   \              0xE5 0xE5    
   \              0x80 0x01    
   \              0x80 0xE5    
   \              0x7E 0x30    
   \              0x6D 0x79    
   \              0x33 0x5B    
   \              0x5F         
   \   00000037   0x70 0x7F          DC8 112, 127, 123, 229, 229, 229, 229, 229, 229, 229, 119, 31, 78, 61
   \              0x7B 0xE5    
   \              0xE5 0xE5    
   \              0xE5 0xE5    
   \              0xE5 0xE5    
   \              0x77 0x1F    
   \              0x4E 0x3D    
   \   00000045   0x4F 0x47          DC8 79, 71, 95, 55, 48, 60, 135, 14, 229, 118, 126, 103, 254, 102, 91
   \              0x5F 0x37    
   \              0x30 0x3C    
   \              0x87 0x0E    
   \              0xE5 0x76    
   \              0x7E 0x67    
   \              0xFE 0x66    
   \              0x5B         
   \   00000054   0x0F 0x3E          DC8 15, 62, 62, 229, 55, 51, 109, 229, 229, 229, 229, 8, 229, 119, 31
   \              0x3E 0xE5    
   \              0x37 0x33    
   \              0x6D 0xE5    
   \              0xE5 0xE5    
   \              0xE5 0x08    
   \              0xE5 0x77    
   \              0x1F         
   \   00000063   0x0D 0x3D          DC8 13, 61, 79, 71, 123, 23, 48, 60, 135, 14, 229, 21, 29, 103, 115, 5
   \              0x4F 0x47    
   \              0x7B 0x17    
   \              0x30 0x3C    
   \              0x87 0x0E    
   \              0xE5 0x15    
   \              0x1D 0x67    
   \              0x73 0x05    
   \   00000073   0x5B 0x0F          DC8 91, 15, 28, 28, 211, 55, 51, 109, 229, 229, 229, 229, 229, 0
   \              0x1C 0x1C    
   \              0xD3 0x37    
   \              0x33 0x6D    
   \              0xE5 0xE5    
   \              0xE5 0xE5    
   \              0xE5 0x00    
   \   00000081   0x00 0x00          DC8 0, 0, 0
   \              0x00         
     82              //
     83              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
     84              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
     85          
     86          //    //空格 !    "    #    $    %    &    '    (     )    *    +    ,    -    .   /
     87          //    0x00,0xE5,0xE5,0xE5,0xE5,0xE5,0xE5,0xE5,0xE5,0xE5,0xE5,0xE5,0xE5,0x01,0xE5,0xE5,
     88          //    // 0    1    2      3        4    5    6    7    8    9
     89          //    0x7E,0x30,0x6D,0x79,0x33,0x5B,0x5F,0x70,0x7F,0x7B,
     90          //    // :    ;    <    =     >   ?    @
     91          //    0xE5,0xE5,0xE5,0xE5,0xE5,0xE5,0xE5,
     92          //    //  A    B   C    D     E    F    G    H   I    J    K    L    M
     93          //    0x77,0x1F,0x4E,0x3d,0x4F,0x47,0x5F,0x37,0x30,0x3c,0x87,0x0e,0xE5,
     94          //    //  N    O    P   Q    R     S    T    U    V   W    X    Y    Z
     95          //    0x76,0x7E,0x67,0xFE,0x66,0x5B,0x0F,0x3E,0x3E,0xE5,0x37,0x33,0x6D,
     96          //    // [    \    ]    ^    _    `
     97          //    0xE5,0xE5,0xE5,0xE5,0xE5,0xE5,
     98          //    // a    b   c    d     e    f    g    h    i    j     k    l    m
     99          //    0x77,0x1F,0x0D,0x3D,0x4F,0x47,0x5F,0x17,0x30,0x3c,0x87,0x0e,0xE5,
    100          //    // n    o   p    q     r    s    t    u    v   w    x    y    z
    101          //    0x15,0x1D,0x67,0x73,0x05,0x5B,0x0F,0x1C,0x1C,0xD3,0x37,0x33,0x6D,
    102          //    // {    |    }    ~       灭
    103          //    0xE5,0xE5,0xE5,0xE5,0xE5,0x00
    104              
    105              
    106              0x00,0xE5,0xE5,0xE5,0xE5,0xE5,0xE5,0xE5,0xE5,0xE5,0xE5,0xE5,0x80,0x01,0x80,0xE5,
    107              //       !    "    #    $    %    &    '    (     )    *    +    ,    -    .   /
    108                0x7E,0x30,0x6D,0x79,0x33,0x5B,0x5F,0x70,0x7F,0x7B, 
    109              // 0    1    2		3   4    5    6    7    8    9	
    110                0xE5,0xE5,0xE5,0xE5,0xE5,0xE5,0xE5,
    111              // :    ;    <    =     >   ?    @
    112                0x77,0x1F,0x4E,0x3d,0x4F,0x47,0x5F,0x37,0x30,0x3c,0x87,0x0e,0xE5,
    113              //  A    B   C    D     E    F    G    H   I    J    K    L    M    
    114                0x76,0x7E,0x67,0xFE,0x66,0x5B,0x0F,0x3E,0x3E,0xE5,0x37,0x33,0x6D,
    115              //  N    O    P   Q    R     S    T    U    V   W    X    Y    Z     
    116                0xE5,0xE5,0xE5,0xE5,0x08,0xE5,
    117               // [    \    ]    ^    _    `
    118                0x77,0x1F,0x0D,0x3D,0x4F,0x47,0x7B,0x17,0x30,0x3c,0x87,0x0e,0xE5,
    119               // a    b   c    d     e    f    g    h    i    j     k    l    m
    120                0x15,0x1D,0x67,0x73,0x05,0x5B,0x0F,0x1C,0x1C,0xD3,0x37,0x33,0x6D,
    121               // n    o   p    q     r    s    t    u    v   w    x    y    z     
    122                0xE5,0xE5,0xE5,0xE5,0xE5,0x00//
    123                // {    |    }    ~       ?e
    124              
    125          };
    126          
    127          
    128          /*******************************************************************************
    129           * MACROS
    130           */
    131          /***********************************************
    132          * 描述： IO,时钟等定义
    133          */
    134          
    135          #define SPI_CS                208
    136          #define SPI_SCK               209
    137          #define SPI_MOSI              207
    138          
    139          /***********************************************
    140          * 描述： IO操作定义
    141          */
    142          
    143          #define SPI_CS_LOW()    		GPIO_SetOrClearValue(SPI_CS,0)
    144          #define SPI_CS_HIGH()           GPIO_SetOrClearValue(SPI_CS,1)
    145          
    146          #define SPI_SCK_LOW()           GPIO_SetOrClearValue(SPI_SCK,0)
    147          #define SPI_SCK_HIGH()          GPIO_SetOrClearValue(SPI_SCK,1)
    148          
    149          #define SPI_MOSI_LOW()          GPIO_SetOrClearValue(SPI_MOSI,0)
    150          #define SPI_MOSI_HIGH()         GPIO_SetOrClearValue(SPI_MOSI,1)
    151          
    152          /*******************************************************************************
    153           * TYPEDEFS
    154           */
    155          
    156          /*******************************************************************************
    157           * LOCAL VARIABLES
    158           */
    159          
    160          /*******************************************************************************
    161           * GLOBAL VARIABLES
    162           */
    163          
    164          /*******************************************************************************
    165           * LOCAL FUNCTIONS
    166           */
    167          
    168          /*******************************************************************************
    169           * GLOBAL FUNCTIONS
    170           */
    171          
    172          /*******************************************************************************
    173           * EXTERN VARIABLES
    174           */
    175          
    176          /*******************************************************************************
    177           * EXTERN FUNCTIONS
    178           */
    179          
    180          /*******************************************************************************
    181          * 名    称： SPI_GpioInit
    182          * 功    能： ADC GPIO初始化
    183          * 入口参数： 无
    184          * 出口参数： 无
    185          * 作　 　者： wumingshen.
    186          * 创建日期： 2015-12-07
    187          * 修    改：
    188          * 修改日期：
    189          * 备    注：
    190          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    191          static void SPI_GpioInit(void)
    192          {
   \                     SPI_GpioInit: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    193              //端口初始化为I/O口
    194              GPIO_PinselConfig(SPI_CS,0);
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x20D0             MOVS     R0,#+208
   \   00000006   0x.... 0x....      BL       GPIO_PinselConfig
    195              GPIO_PinselConfig(SPI_SCK,0);
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x20D1             MOVS     R0,#+209
   \   0000000E   0x.... 0x....      BL       GPIO_PinselConfig
    196              GPIO_PinselConfig(SPI_MOSI,0);
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0x20CF             MOVS     R0,#+207
   \   00000016   0x.... 0x....      BL       GPIO_PinselConfig
    197          
    198              SPI_CS_HIGH();
   \   0000001A   0x2101             MOVS     R1,#+1
   \   0000001C   0x20D0             MOVS     R0,#+208
   \   0000001E   0xE8BD 0x4004      POP      {R2,LR}
   \   00000022   0x.... 0x....      B.W      GPIO_SetOrClearValue
    199          }
    200          
    201          /*******************************************************************************
    202          * 名    称： SPI_SendByte
    203          * 功    能： 通过SPI总线发送一个字节数据(同时接收一个字节数据)
    204          * 入口参数： 要写入的一个字节数据
    205          * 出口参数： 在发数据时，MISO信号线上接收的一个字节
    206          * 作　 　者： wumingshen.
    207          * 创建日期： 2015-12-07
    208          * 修    改：
    209          * 修改日期：
    210          * 备    注：
    211          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    212          static void SPI_SendByte(uint8_t byte)
    213          {
   \                     SPI_SendByte: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    214              uint8_t i;
    215              
    216              /***********************************************
    217              * 描述： 
    218              */
    219              for(i=0;i<8;i++) {		
   \   00000004   0x2500             MOVS     R5,#+0
   \   00000006   0xE00F             B.N      ??SPI_SendByte_0
    220          		SPI_SCK_LOW();
    221          		Delay_Nus(10);
    222          		if(byte & 0x80)
    223          			SPI_MOSI_HIGH();
    224          		else
    225          			SPI_MOSI_LOW();
   \                     ??SPI_SendByte_1: (+1)
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x20CF             MOVS     R0,#+207
   \   0000000C   0x.... 0x....      BL       GPIO_SetOrClearValue
    226          		byte = byte << 1;
   \                     ??SPI_SendByte_2: (+1)
   \   00000010   0x0064             LSLS     R4,R4,#+1
    227          		Delay_Nus(5);
   \   00000012   0x2005             MOVS     R0,#+5
   \   00000014   0x.... 0x....      BL       Delay_Nus
    228          		SPI_SCK_HIGH();
   \   00000018   0x2101             MOVS     R1,#+1
   \   0000001A   0x20D1             MOVS     R0,#+209
   \   0000001C   0x.... 0x....      BL       GPIO_SetOrClearValue
    229          		Delay_Nus(10);
   \   00000020   0x200A             MOVS     R0,#+10
   \   00000022   0x.... 0x....      BL       Delay_Nus
   \   00000026   0x1C6D             ADDS     R5,R5,#+1
   \                     ??SPI_SendByte_0: (+1)
   \   00000028   0x2D08             CMP      R5,#+8
   \   0000002A   0xDA0D             BGE.N    ??SPI_SendByte_3
   \   0000002C   0x2100             MOVS     R1,#+0
   \   0000002E   0x20D1             MOVS     R0,#+209
   \   00000030   0x.... 0x....      BL       GPIO_SetOrClearValue
   \   00000034   0x200A             MOVS     R0,#+10
   \   00000036   0x.... 0x....      BL       Delay_Nus
   \   0000003A   0x0620             LSLS     R0,R4,#+24
   \   0000003C   0xD5E4             BPL.N    ??SPI_SendByte_1
   \   0000003E   0x2101             MOVS     R1,#+1
   \   00000040   0x20CF             MOVS     R0,#+207
   \   00000042   0x.... 0x....      BL       GPIO_SetOrClearValue
   \   00000046   0xE7E3             B.N      ??SPI_SendByte_2
    230          	}
    231          }	
   \                     ??SPI_SendByte_3: (+1)
   \   00000048   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    232          
    233          /*******************************************************************************
    234          * 名    称： BSP_MAX7219Init
    235          * 功    能： MAX7219初始化
    236          * 入口参数： 无
    237          * 出口参数： 无
    238          * 作　 　者： wumingshen.
    239          * 创建日期： 2015-12-07
    240          * 修    改：
    241          * 修改日期：
    242          * 备    注：
    243          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    244          void BSP_MAX7219Init( void )
    245          {
   \                     BSP_MAX7219Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    246          	SPI_GpioInit(); 
   \   00000002   0x.... 0x....      BL       SPI_GpioInit
    247              
    248          	SPI_CS_HIGH();
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x20D0             MOVS     R0,#+208
   \   0000000A   0x.... 0x....      BL       GPIO_SetOrClearValue
    249          	SPI_SCK_HIGH();
   \   0000000E   0x2101             MOVS     R1,#+1
   \   00000010   0x20D1             MOVS     R0,#+209
   \   00000012   0x.... 0x....      BL       GPIO_SetOrClearValue
    250              
    251          	Delay_Nus(30);
   \   00000016   0x201E             MOVS     R0,#+30
   \   00000018   0xE8BD 0x4002      POP      {R1,LR}
   \   0000001C   0x.... 0x....      B.W      Delay_Nus
    252          }
    253          
    254          /*******************************************************************************
    255          * 名    称： LED_SPI_SendData
    256          * 功    能： 向7219发送1Byte数据或命令
    257          * 入口参数：-addr:   数据接收地址
    258          *           -num:   要存的数据
    259          * 出口参数： 
    260          * 作　 　者： wumingshen.
    261          * 创建日期： 2015-12-08
    262          * 修    改：
    263          * 修改日期：
    264          * 备    注：
    265          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    266          void LED_SPI_SendData(uint8_t Addr,uint8_t Num)
    267          {    
   \                     LED_SPI_SendData: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    268              SPI_CS_LOW();                                  //7219允许接接收
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x20D0             MOVS     R0,#+208
   \   0000000A   0x.... 0x....      BL       GPIO_SetOrClearValue
    269              SPI_SendByte( Addr );                          //送地址
   \   0000000E   0x4620             MOV      R0,R4
   \   00000010   0x.... 0x....      BL       SPI_SendByte
    270              SPI_SendByte( Num );                           //送数据
   \   00000014   0x4628             MOV      R0,R5
   \   00000016   0x.... 0x....      BL       SPI_SendByte
    271              SPI_CS_HIGH();                                 //关7219接收
   \   0000001A   0x2101             MOVS     R1,#+1
   \   0000001C   0x20D0             MOVS     R0,#+208
   \   0000001E   0xE8BD 0x4034      POP      {R2,R4,R5,LR}
   \   00000022   0x.... 0x....      B.W      GPIO_SetOrClearValue
    272          }
    273          
    274          /*******************************************************************************
    275          * 名    称： BSP_DispWrite
    276          * 功    能： 将显示数据写入显示缓存
    277          * 入口参数： - Num         显示数据
    278          *           - Fmt         显示数据格式。如："e%",显示字母‘e’和数据Num
    279          *           - Align       对齐方式 ‘1’为左对齐，’0‘为右对齐
    280          *           - FmtType     格式化模式。’1‘前面显示，’0‘后面显示
    281          *           - DotPosition 显示点的位置
    282          *           - Cycle       闪烁次数
    283          *           - Duty    亮的时间
    284          *           - OffX100ms   灭的时间
    285          *           - Index       显示序号
    286          * 出口参数： 
    287          * 作　 　者： wumingshen.
    288          * 创建日期： 2015-12-08
    289          * 修    改：
    290          * 修改日期：
    291          * 备    注：
    292          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    293          void BSP_DispWrite( int     Num,
    294                              char    *Fmt,
    295                              char    Align,
    296                              uint8_t   FmtType,
    297                              uint8_t   DotPosition,
    298                              uint8_t   Cycle,
    299                              uint8_t   Duty,
    300                              // uint8_t   OffX100ms,
    301                              uint8_t   Index)
    302          {
   \                     BSP_DispWrite: (+1)
   \   00000000   0xE92D 0x4FFA      PUSH     {R1,R3-R11,LR}
   \   00000004   0xB089             SUB      SP,SP,#+36
   \   00000006   0x4615             MOV      R5,R2
    303          
    304              char    i               = 0,    Nflag   = 0,    b       = 0;
   \   00000008   0xF04F 0x0A00      MOV      R10,#+0
    305              char    NbrCnt          = 0,    Chcnt   = 0;
   \   0000000C   0x4656             MOV      R6,R10
   \   0000000E   0x46B0             MOV      R8,R6
    306              char    NumPosition     = 0;
   \   00000010   0x4637             MOV      R7,R6
    307              int     temp            = 0;
    308              char    flag            = 0;
    309              uint8_t   BSP_DispBuff[8] = {0};
   \   00000012   0x4669             MOV      R1,SP
   \   00000014   0x4632             MOV      R2,R6
   \   00000016   0x4613             MOV      R3,R2
   \   00000018   0xC10C             STM      R1!,{R2,R3}
    310              uint8_t   CharBuffer[8]   = {0};
   \   0000001A   0xA906             ADD      R1,SP,#+24
   \   0000001C   0xC10C             STM      R1!,{R2,R3}
    311              uint8_t   NumbBuffer[8]   = {0};
   \   0000001E   0xA904             ADD      R1,SP,#+16
   \   00000020   0xC10C             STM      R1!,{R2,R3}
    312          //    uint8_t   buf[DISPLAY_LED_NUM]          = {128,128,128,128,128,128,128,128};
    313               uint8_t   buf[DISPLAY_LED_NUM]          = {128,128,128,128};
   \   00000022   0xA903             ADD      R1,SP,#+12
   \   00000024   0x.... 0x....      ADR.W    R2,?_3
   \   00000028   0x6813             LDR      R3,[R2, #0]
   \   0000002A   0x600B             STR      R3,[R1, #+0]
    314          
    315                      temp            = Num;
   \   0000002C   0x4604             MOV      R4,R0
   \   0000002E   0x9817             LDR      R0,[SP, #+92]
    316          
    317              /***********************************************
    318              * 描述： 
    319              */
    320              if(Index > sizeof(LedDispCtrl)/sizeof(StrLedDisp)-1) {
   \   00000030   0x2804             CMP      R0,#+4
   \   00000032   0xF080 0x8152      BCS.W    ??BSP_DispWrite_2
    321                  return;
    322              }
    323              
    324              LedDispCtrl[Index].Flag         = 1;
   \   00000036   0x.... 0x....      LDR.W    R1,??DataTable12
   \   0000003A   0xEBC0 0x00C0      RSB      R0,R0,R0, LSL #+3
   \   0000003E   0x1840             ADDS     R0,R0,R1
   \   00000040   0x9002             STR      R0,[SP, #+8]
   \   00000042   0x2001             MOVS     R0,#+1
   \   00000044   0x9902             LDR      R1,[SP, #+8]
   \   00000046   0x7008             STRB     R0,[R1, #+0]
    325              LedDispCtrl[Index].Cycle        = Cycle;
   \   00000048   0x9815             LDR      R0,[SP, #+84]
   \   0000004A   0x9902             LDR      R1,[SP, #+8]
   \   0000004C   0x7048             STRB     R0,[R1, #+1]
    326              LedDispCtrl[Index].Duty         = Duty;
   \   0000004E   0x9816             LDR      R0,[SP, #+88]
   \   00000050   0x9902             LDR      R1,[SP, #+8]
   \   00000052   0x7088             STRB     R0,[R1, #+2]
    327              // LedDispCtrl[Index].OffX100ms     = OffX100ms;
    328          
    329              /***********************************************
    330              * 描述： 
    331              */
    332              for(i = 0;i < strlen(Fmt);i++) {
   \   00000054   0x46B1             MOV      R9,R6
   \   00000056   0xF10D 0x0B10      ADD      R11,SP,#+16
   \   0000005A   0xE00A             B.N      ??BSP_DispWrite_3
    333                  if(Fmt[i] == '%') {
    334                      if ( FmtType == 0 ) {
    335                          if(temp < 0) {
    336                              Nflag = 1;
    337                              temp = abs(temp);
    338                              NumbBuffer[0] = '-';
    339                              NbrCnt++;
    340                          }
    341                          
    342                          do {
    343                              NumbBuffer[NbrCnt] = temp%10 + '0';
    344                              temp /= 10;
    345                              NbrCnt++;
    346                          } while((NbrCnt <= 8)&&temp);
    347                      } else {
    348                          do {
    349                              NumbBuffer[NbrCnt] = temp%10 + '0';
    350                              temp /= 10;
    351                              NbrCnt++;
    352                          } while((NbrCnt <= 8)&&temp);
    353                          
    354                          if(temp < 0) {
    355                              Nflag = 1;
    356                              temp = abs(temp);
    357                              NumbBuffer[NbrCnt] = '-';
    358                              NbrCnt++;
    359                          }
    360                      
    361                      }
    362                      
    363                      switch(i) {
    364                      case 0: NumPosition = 0;break;
    365                      case 1: NumPosition = 1;break;
    366                      case 2: NumPosition = 2;break;
    367                      case 3: NumPosition = 3;break;
    368                      }
    369                      
    370                      if(Nflag == 0) {
    371                          flag = 1;
    372                      } else {
    373                          flag = 0;
    374                      }
    375                      
    376                      for(b = 0;b < (NbrCnt - Nflag)/2;b++) {
    377                          temp = NumbBuffer[b + Nflag];
    378                          NumbBuffer[b + Nflag] = NumbBuffer[NbrCnt -flag- Nflag - b];
    379                          NumbBuffer[NbrCnt - flag - Nflag - b] = temp;
    380                      }
    381                  } else {
    382                      CharBuffer[Chcnt] = Fmt[i];
   \                     ??BSP_DispWrite_4: (+1)
   \   0000005C   0xA906             ADD      R1,SP,#+24
   \   0000005E   0xF808 0x0001      STRB     R0,[R8, R1]
    383                      Chcnt++;
   \   00000062   0xF108 0x0801      ADD      R8,R8,#+1
   \   00000066   0xFA5F 0xF888      UXTB     R8,R8
    384                  }
   \                     ??BSP_DispWrite_5: (+1)
   \   0000006A   0xF109 0x0901      ADD      R9,R9,#+1
   \   0000006E   0xFA5F 0xF989      UXTB     R9,R9
   \                     ??BSP_DispWrite_3: (+1)
   \   00000072   0x9809             LDR      R0,[SP, #+36]
   \   00000074   0x.... 0x....      BL       strlen
   \   00000078   0x4581             CMP      R9,R0
   \   0000007A   0xD271             BCS.N    ??BSP_DispWrite_6
   \   0000007C   0x9809             LDR      R0,[SP, #+36]
   \   0000007E   0xF819 0x0000      LDRB     R0,[R9, R0]
   \   00000082   0x2825             CMP      R0,#+37
   \   00000084   0xD1EA             BNE.N    ??BSP_DispWrite_4
   \   00000086   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   0000008A   0x2800             CMP      R0,#+0
   \   0000008C   0xD11F             BNE.N    ??BSP_DispWrite_7
   \   0000008E   0x2C00             CMP      R4,#+0
   \   00000090   0xD50A             BPL.N    ??BSP_DispWrite_8
   \   00000092   0xF04F 0x0A01      MOV      R10,#+1
   \   00000096   0x4620             MOV      R0,R4
   \   00000098   0x.... 0x....      BL       abs
   \   0000009C   0x4604             MOV      R4,R0
   \   0000009E   0x202D             MOVS     R0,#+45
   \   000000A0   0xF88D 0x0010      STRB     R0,[SP, #+16]
   \   000000A4   0x1C76             ADDS     R6,R6,#+1
   \   000000A6   0xB2F6             UXTB     R6,R6
   \                     ??BSP_DispWrite_8: (+1)
   \   000000A8   0x200A             MOVS     R0,#+10
   \   000000AA   0xFB94 0xF0F0      SDIV     R0,R4,R0
   \   000000AE   0x4601             MOV      R1,R0
   \   000000B0   0xEB01 0x0281      ADD      R2,R1,R1, LSL #+2
   \   000000B4   0xEBA4 0x0142      SUB      R1,R4,R2, LSL #+1
   \   000000B8   0x3130             ADDS     R1,R1,#+48
   \   000000BA   0xAA04             ADD      R2,SP,#+16
   \   000000BC   0x54B1             STRB     R1,[R6, R2]
   \   000000BE   0x4604             MOV      R4,R0
   \   000000C0   0x1C76             ADDS     R6,R6,#+1
   \   000000C2   0xB2F6             UXTB     R6,R6
   \   000000C4   0x2E09             CMP      R6,#+9
   \   000000C6   0xDA20             BGE.N    ??BSP_DispWrite_9
   \   000000C8   0x2C00             CMP      R4,#+0
   \   000000CA   0xD1ED             BNE.N    ??BSP_DispWrite_8
   \   000000CC   0xE01D             B.N      ??BSP_DispWrite_9
   \                     ??BSP_DispWrite_7: (+1)
   \   000000CE   0x200A             MOVS     R0,#+10
   \   000000D0   0xFB94 0xF0F0      SDIV     R0,R4,R0
   \   000000D4   0x4601             MOV      R1,R0
   \   000000D6   0xEB01 0x0281      ADD      R2,R1,R1, LSL #+2
   \   000000DA   0xEBA4 0x0142      SUB      R1,R4,R2, LSL #+1
   \   000000DE   0x3130             ADDS     R1,R1,#+48
   \   000000E0   0xF806 0x100B      STRB     R1,[R6, R11]
   \   000000E4   0x4604             MOV      R4,R0
   \   000000E6   0x1C76             ADDS     R6,R6,#+1
   \   000000E8   0xB2F6             UXTB     R6,R6
   \   000000EA   0x2E09             CMP      R6,#+9
   \   000000EC   0xDA01             BGE.N    ??BSP_DispWrite_10
   \   000000EE   0x2C00             CMP      R4,#+0
   \   000000F0   0xD1ED             BNE.N    ??BSP_DispWrite_7
   \                     ??BSP_DispWrite_10: (+1)
   \   000000F2   0x2C00             CMP      R4,#+0
   \   000000F4   0xD509             BPL.N    ??BSP_DispWrite_9
   \   000000F6   0xF04F 0x0A01      MOV      R10,#+1
   \   000000FA   0x.... 0x....      BL       abs
   \   000000FE   0x4604             MOV      R4,R0
   \   00000100   0x202D             MOVS     R0,#+45
   \   00000102   0xF806 0x000B      STRB     R0,[R6, R11]
   \   00000106   0x1C76             ADDS     R6,R6,#+1
   \   00000108   0xB2F6             UXTB     R6,R6
   \                     ??BSP_DispWrite_9: (+1)
   \   0000010A   0x4648             MOV      R0,R9
   \   0000010C   0x2803             CMP      R0,#+3
   \   0000010E   0xD80A             BHI.N    ??BSP_DispWrite_11
   \   00000110   0xE8DF 0xF000      TBB      [PC, R0]
   \                     ??BSP_DispWrite_0:
   \   00000114   0x02 0x04          DC8      0x2,0x4,0x6,0x8
   \              0x06 0x08    
   \                     ??BSP_DispWrite_12: (+1)
   \   00000118   0x2700             MOVS     R7,#+0
   \   0000011A   0xE004             B.N      ??BSP_DispWrite_11
   \                     ??BSP_DispWrite_13: (+1)
   \   0000011C   0x2701             MOVS     R7,#+1
   \   0000011E   0xE002             B.N      ??BSP_DispWrite_11
   \                     ??BSP_DispWrite_14: (+1)
   \   00000120   0x2702             MOVS     R7,#+2
   \   00000122   0xE000             B.N      ??BSP_DispWrite_11
   \                     ??BSP_DispWrite_15: (+1)
   \   00000124   0x2703             MOVS     R7,#+3
   \                     ??BSP_DispWrite_11: (+1)
   \   00000126   0x4650             MOV      R0,R10
   \   00000128   0x1E40             SUBS     R0,R0,#+1
   \   0000012A   0x4180             SBCS     R0,R0,R0
   \   0000012C   0x2100             MOVS     R1,#+0
   \                     ??BSP_DispWrite_16: (+1)
   \   0000012E   0xEBA6 0x020A      SUB      R2,R6,R10
   \   00000132   0xEB02 0x72D2      ADD      R2,R2,R2, LSR #+31
   \   00000136   0xEBB1 0x0F62      CMP      R1,R2, ASR #+1
   \   0000013A   0xDA96             BGE.N    ??BSP_DispWrite_5
   \   0000013C   0xEB0A 0x0201      ADD      R2,R10,R1
   \   00000140   0xF812 0x400B      LDRB     R4,[R2, R11]
   \   00000144   0xEBB6 0x73D0      SUBS     R3,R6,R0, LSR #+31
   \   00000148   0xEBA3 0x030A      SUB      R3,R3,R10
   \   0000014C   0x1A5B             SUBS     R3,R3,R1
   \   0000014E   0xF813 0xC00B      LDRB     R12,[R3, R11]
   \   00000152   0xF802 0xC00B      STRB     R12,[R2, R11]
   \   00000156   0xF803 0x400B      STRB     R4,[R3, R11]
   \   0000015A   0x1C49             ADDS     R1,R1,#+1
   \   0000015C   0xB2C9             UXTB     R1,R1
   \   0000015E   0xE7E6             B.N      ??BSP_DispWrite_16
    385              }
    386              /***********************************************
    387              * 描述： 
    388              */
    389              switch(NumPosition) {
   \                     ??BSP_DispWrite_6: (+1)
   \   00000160   0x2F03             CMP      R7,#+3
   \   00000162   0xF200 0x807A      BHI.W    ??BSP_DispWrite_17
   \   00000166   0xE8DF 0xF007      TBB      [PC, R7]
   \                     ??BSP_DispWrite_1:
   \   0000016A   0x02 0x1B          DC8      0x2,0x1B,0x3D,0x60
   \              0x3D 0x60    
    390              case 0: 
    391                  for(i = 0;i < 8;i++) {
   \                     ??BSP_DispWrite_18: (+1)
   \   0000016E   0x2000             MOVS     R0,#+0
   \   00000170   0x466A             MOV      R2,SP
   \   00000172   0xE003             B.N      ??BSP_DispWrite_19
    392                      BSP_DispBuff[i] = NumbBuffer[i];
   \                     ??BSP_DispWrite_20: (+1)
   \   00000174   0xA904             ADD      R1,SP,#+16
   \   00000176   0x5C41             LDRB     R1,[R0, R1]
   \   00000178   0x5481             STRB     R1,[R0, R2]
    393                  }
   \   0000017A   0x1C40             ADDS     R0,R0,#+1
   \                     ??BSP_DispWrite_19: (+1)
   \   0000017C   0x2808             CMP      R0,#+8
   \   0000017E   0xDBF9             BLT.N    ??BSP_DispWrite_20
    394                  for(i = NbrCnt;i < 8;i++) {
   \   00000180   0x46B1             MOV      R9,R6
   \                     ??BSP_DispWrite_21: (+1)
   \   00000182   0xF1B9 0x0F08      CMP      R9,#+8
   \   00000186   0xDA68             BGE.N    ??BSP_DispWrite_17
    395                      BSP_DispBuff[i] = CharBuffer[i - NbrCnt];
   \   00000188   0xA806             ADD      R0,SP,#+24
   \   0000018A   0xEBA9 0x0106      SUB      R1,R9,R6
   \   0000018E   0x5C08             LDRB     R0,[R1, R0]
   \   00000190   0x4669             MOV      R1,SP
   \   00000192   0xF809 0x0001      STRB     R0,[R9, R1]
    396                  }
   \   00000196   0xF109 0x0901      ADD      R9,R9,#+1
   \   0000019A   0xFA5F 0xF989      UXTB     R9,R9
   \   0000019E   0xE7F0             B.N      ??BSP_DispWrite_21
    397                  break;
    398              case 1: 
    399                  BSP_DispBuff[0] = CharBuffer[0];
   \                     ??BSP_DispWrite_22: (+1)
   \   000001A0   0xF89D 0x0018      LDRB     R0,[SP, #+24]
   \   000001A4   0xF88D 0x0000      STRB     R0,[SP, #+0]
    400                  for(i = 1;i < 8;i++) {
   \   000001A8   0x2001             MOVS     R0,#+1
   \   000001AA   0x466A             MOV      R2,SP
   \   000001AC   0xE005             B.N      ??BSP_DispWrite_23
    401                      BSP_DispBuff[i] = NumbBuffer[i - 1];
   \                     ??BSP_DispWrite_24: (+1)
   \   000001AE   0xA904             ADD      R1,SP,#+16
   \   000001B0   0x1841             ADDS     R1,R0,R1
   \   000001B2   0xF811 0x1C01      LDRB     R1,[R1, #-1]
   \   000001B6   0x5481             STRB     R1,[R0, R2]
    402                  }
   \   000001B8   0x1C40             ADDS     R0,R0,#+1
   \                     ??BSP_DispWrite_23: (+1)
   \   000001BA   0x2808             CMP      R0,#+8
   \   000001BC   0xDBF7             BLT.N    ??BSP_DispWrite_24
    403                  for(i = (NbrCnt + 1);i < 8;i++) {
   \   000001BE   0xF106 0x0901      ADD      R9,R6,#+1
   \   000001C2   0xFA5F 0xF989      UXTB     R9,R9
   \                     ??BSP_DispWrite_25: (+1)
   \   000001C6   0xF1B9 0x0F08      CMP      R9,#+8
   \   000001CA   0xDA46             BGE.N    ??BSP_DispWrite_17
    404                      BSP_DispBuff[i] = CharBuffer[i - NbrCnt];
   \   000001CC   0xA806             ADD      R0,SP,#+24
   \   000001CE   0xEBA9 0x0106      SUB      R1,R9,R6
   \   000001D2   0x5C08             LDRB     R0,[R1, R0]
   \   000001D4   0x4669             MOV      R1,SP
   \   000001D6   0xF809 0x0001      STRB     R0,[R9, R1]
    405                  }
   \   000001DA   0xF109 0x0901      ADD      R9,R9,#+1
   \   000001DE   0xFA5F 0xF989      UXTB     R9,R9
   \   000001E2   0xE7F0             B.N      ??BSP_DispWrite_25
    406              break;
    407              case 2: 
    408                  BSP_DispBuff[0] = CharBuffer[0];
   \                     ??BSP_DispWrite_26: (+1)
   \   000001E4   0xF89D 0x0018      LDRB     R0,[SP, #+24]
   \   000001E8   0xF88D 0x0000      STRB     R0,[SP, #+0]
    409                  BSP_DispBuff[1] = CharBuffer[1];
   \   000001EC   0xA806             ADD      R0,SP,#+24
   \   000001EE   0x4669             MOV      R1,SP
   \   000001F0   0x7842             LDRB     R2,[R0, #+1]
   \   000001F2   0x704A             STRB     R2,[R1, #+1]
    410                  for(i = 2;i < 8;i++) {
   \   000001F4   0x2202             MOVS     R2,#+2
   \   000001F6   0xE005             B.N      ??BSP_DispWrite_27
    411                      BSP_DispBuff[i] = NumbBuffer[i - 2];
   \                     ??BSP_DispWrite_28: (+1)
   \   000001F8   0xAB04             ADD      R3,SP,#+16
   \   000001FA   0x18D3             ADDS     R3,R2,R3
   \   000001FC   0xF813 0x3C02      LDRB     R3,[R3, #-2]
   \   00000200   0x5453             STRB     R3,[R2, R1]
    412                  }
   \   00000202   0x1C52             ADDS     R2,R2,#+1
   \                     ??BSP_DispWrite_27: (+1)
   \   00000204   0x2A08             CMP      R2,#+8
   \   00000206   0xDBF7             BLT.N    ??BSP_DispWrite_28
    413                  for(i = (NbrCnt + 2);i < 8;i++) {
   \   00000208   0xF106 0x0902      ADD      R9,R6,#+2
   \   0000020C   0xFA5F 0xF989      UXTB     R9,R9
   \                     ??BSP_DispWrite_29: (+1)
   \   00000210   0xF1B9 0x0F08      CMP      R9,#+8
   \   00000214   0xDA21             BGE.N    ??BSP_DispWrite_17
    414                      BSP_DispBuff[i] = CharBuffer[i - NbrCnt];
   \   00000216   0xEBA9 0x0206      SUB      R2,R9,R6
   \   0000021A   0x5C12             LDRB     R2,[R2, R0]
   \   0000021C   0xF809 0x2001      STRB     R2,[R9, R1]
    415                  }
   \   00000220   0xF109 0x0901      ADD      R9,R9,#+1
   \   00000224   0xFA5F 0xF989      UXTB     R9,R9
   \   00000228   0xE7F2             B.N      ??BSP_DispWrite_29
    416              break;
    417              case 3: 
    418                  for(i = 0;i < 3;i++) {
   \                     ??BSP_DispWrite_30: (+1)
   \   0000022A   0x2000             MOVS     R0,#+0
   \   0000022C   0x466A             MOV      R2,SP
   \   0000022E   0xE003             B.N      ??BSP_DispWrite_31
    419                      BSP_DispBuff[i] = CharBuffer[i];
   \                     ??BSP_DispWrite_32: (+1)
   \   00000230   0xA906             ADD      R1,SP,#+24
   \   00000232   0x5C41             LDRB     R1,[R0, R1]
   \   00000234   0x5481             STRB     R1,[R0, R2]
    420                  }
   \   00000236   0x1C40             ADDS     R0,R0,#+1
   \                     ??BSP_DispWrite_31: (+1)
   \   00000238   0x2803             CMP      R0,#+3
   \   0000023A   0xDBF9             BLT.N    ??BSP_DispWrite_32
    421                  for(i = 3;i < 8;i++) {
   \   0000023C   0xF04F 0x0903      MOV      R9,#+3
   \   00000240   0x4669             MOV      R1,SP
   \   00000242   0xE007             B.N      ??BSP_DispWrite_33
    422                      BSP_DispBuff[i] = NumbBuffer[i - 3];
   \                     ??BSP_DispWrite_34: (+1)
   \   00000244   0xA804             ADD      R0,SP,#+16
   \   00000246   0x4448             ADD      R0,R9,R0
   \   00000248   0xF810 0x0C03      LDRB     R0,[R0, #-3]
   \   0000024C   0xF809 0x0001      STRB     R0,[R9, R1]
    423                  }
   \   00000250   0xF109 0x0901      ADD      R9,R9,#+1
   \                     ??BSP_DispWrite_33: (+1)
   \   00000254   0xF1B9 0x0F08      CMP      R9,#+8
   \   00000258   0xDBF4             BLT.N    ??BSP_DispWrite_34
    424              }
    425              
    426              for(i = 0;i < DISPLAY_LED_NUM;i++) {
   \                     ??BSP_DispWrite_17: (+1)
   \   0000025A   0x2000             MOVS     R0,#+0
   \   0000025C   0x2180             MOVS     R1,#+128
   \   0000025E   0xAA03             ADD      R2,SP,#+12
   \   00000260   0xE001             B.N      ??BSP_DispWrite_35
    427                  buf[i] = 128;
   \                     ??BSP_DispWrite_36: (+1)
   \   00000262   0x5481             STRB     R1,[R0, R2]
    428              }
   \   00000264   0x1C40             ADDS     R0,R0,#+1
   \                     ??BSP_DispWrite_35: (+1)
   \   00000266   0x2804             CMP      R0,#+4
   \   00000268   0xDBFB             BLT.N    ??BSP_DispWrite_36
    429              
    430              /***********************************************
    431              * 描述： 
    432              */
    433          	if(Align == 1) {
   \   0000026A   0xEB08 0x0006      ADD      R0,R8,R6
   \   0000026E   0x2D01             CMP      R5,#+1
   \   00000270   0xD10B             BNE.N    ??BSP_DispWrite_37
    434                  for(i = 0;(i < (NbrCnt + Chcnt))&&(i < DISPLAY_LED_NUM);i++) {
   \   00000272   0x2100             MOVS     R1,#+0
   \   00000274   0xAB03             ADD      R3,SP,#+12
   \                     ??BSP_DispWrite_38: (+1)
   \   00000276   0x4281             CMP      R1,R0
   \   00000278   0xDA16             BGE.N    ??BSP_DispWrite_39
   \   0000027A   0x2904             CMP      R1,#+4
   \   0000027C   0xDA14             BGE.N    ??BSP_DispWrite_39
    435                      buf[i]      = BSP_DispBuff[i];
   \   0000027E   0x466A             MOV      R2,SP
   \   00000280   0x5C8A             LDRB     R2,[R1, R2]
   \   00000282   0x54CA             STRB     R2,[R1, R3]
    436                  }
   \   00000284   0x1C49             ADDS     R1,R1,#+1
   \   00000286   0xB2C9             UXTB     R1,R1
   \   00000288   0xE7F5             B.N      ??BSP_DispWrite_38
    437              } else {
    438                  for(i = 0;(i < (NbrCnt + Chcnt))&&(i < DISPLAY_LED_NUM);i++) {
   \                     ??BSP_DispWrite_37: (+1)
   \   0000028A   0x2100             MOVS     R1,#+0
   \   0000028C   0xE008             B.N      ??BSP_DispWrite_40
    439                      buf[3 - i]  = BSP_DispBuff[NbrCnt + Chcnt -1 -i];
   \                     ??BSP_DispWrite_41: (+1)
   \   0000028E   0x466A             MOV      R2,SP
   \   00000290   0x1E43             SUBS     R3,R0,#+1
   \   00000292   0x1A5B             SUBS     R3,R3,R1
   \   00000294   0x5C9A             LDRB     R2,[R3, R2]
   \   00000296   0xAB03             ADD      R3,SP,#+12
   \   00000298   0x1A5B             SUBS     R3,R3,R1
   \   0000029A   0x70DA             STRB     R2,[R3, #+3]
    440                  }
   \   0000029C   0x1C49             ADDS     R1,R1,#+1
   \   0000029E   0xB2C9             UXTB     R1,R1
   \                     ??BSP_DispWrite_40: (+1)
   \   000002A0   0x4281             CMP      R1,R0
   \   000002A2   0xDA01             BGE.N    ??BSP_DispWrite_39
   \   000002A4   0x2904             CMP      R1,#+4
   \   000002A6   0xDBF2             BLT.N    ??BSP_DispWrite_41
    441              }
    442              
    443              /***********************************************
    444              * 描述： 
    445              */
    446              for(i = 0;i < DISPLAY_LED_NUM;i++) {
   \                     ??BSP_DispWrite_39: (+1)
   \   000002A8   0x2100             MOVS     R1,#+0
   \   000002AA   0x9814             LDR      R0,[SP, #+80]
   \   000002AC   0xE001             B.N      ??BSP_DispWrite_42
    447                  if(DotPosition & (0x01 << (3 - i))) {
    448                      LedDispCtrl[Index].Code[i] = LED_SEG_CODE[buf[i]]|0x80;
    449                  } else {
    450                      LedDispCtrl[Index].Code[i] = LED_SEG_CODE[buf[i]];
   \                     ??BSP_DispWrite_43: (+1)
   \   000002AE   0x70D3             STRB     R3,[R2, #+3]
    451                  }
   \                     ??BSP_DispWrite_44: (+1)
   \   000002B0   0x1C49             ADDS     R1,R1,#+1
   \                     ??BSP_DispWrite_42: (+1)
   \   000002B2   0x2904             CMP      R1,#+4
   \   000002B4   0xDA11             BGE.N    ??BSP_DispWrite_2
   \   000002B6   0x.... 0x....      ADR.W    R2,LED_SEG_CODE
   \   000002BA   0xAB03             ADD      R3,SP,#+12
   \   000002BC   0x5CCB             LDRB     R3,[R1, R3]
   \   000002BE   0x5C9B             LDRB     R3,[R3, R2]
   \   000002C0   0x9A02             LDR      R2,[SP, #+8]
   \   000002C2   0x188A             ADDS     R2,R1,R2
   \   000002C4   0x2401             MOVS     R4,#+1
   \   000002C6   0xF1C1 0x0503      RSB      R5,R1,#+3
   \   000002CA   0x40AC             LSLS     R4,R4,R5
   \   000002CC   0x4605             MOV      R5,R0
   \   000002CE   0x4225             TST      R5,R4
   \   000002D0   0xD0ED             BEQ.N    ??BSP_DispWrite_43
   \   000002D2   0xF043 0x0380      ORR      R3,R3,#0x80
   \   000002D6   0x70D3             STRB     R3,[R2, #+3]
   \   000002D8   0xE7EA             B.N      ??BSP_DispWrite_44
    452              }
    453          }
   \                     ??BSP_DispWrite_2: (+1)
   \   000002DA   0xB00B             ADD      SP,SP,#+44
   \   000002DC   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    454          
    455          /*******************************************************************************
    456          * 名    称： BSP_Disp
    457          * 功    能： 根据序号，给7219送相应的数据
    458          * 入口参数： 
    459          * 出口参数： 
    460          * 作　 　者： wumingshen.
    461          * 创建日期： 2015-12-08
    462          * 修    改：
    463          * 修改日期：
    464          * 备    注：
    465          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    466          void WIN_DispMsg(const char *msg)
    467          {
   \                     WIN_DispMsg: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x....             LDR.N    R0,??DataTable12
   \   00000006   0xE001             B.N      ??WIN_DispMsg_0
    468          
    469              static  uint8   k = 0;
    470              
    471              
    472              while(k < DISPLAY_FRAME_NUM){
    473                  if(LedDispCtrl[k].Flag == 0){
    474                      break;
    475                  }
    476                  k++;
   \                     ??WIN_DispMsg_1: (+1)
   \   00000008   0x1C49             ADDS     R1,R1,#+1
   \   0000000A   0x7741             STRB     R1,[R0, #+29]
   \                     ??WIN_DispMsg_0: (+1)
   \   0000000C   0x7F41             LDRB     R1,[R0, #+29]
   \   0000000E   0x460A             MOV      R2,R1
   \   00000010   0x2A04             CMP      R2,#+4
   \   00000012   0xDA04             BGE.N    ??WIN_DispMsg_2
   \   00000014   0xEBC2 0x03C2      RSB      R3,R2,R2, LSL #+3
   \   00000018   0x5C1B             LDRB     R3,[R3, R0]
   \   0000001A   0x2B00             CMP      R3,#+0
   \   0000001C   0xD1F4             BNE.N    ??WIN_DispMsg_1
    477              }
    478              
    479              if(k == DISPLAY_FRAME_NUM)          //没有空数据，直接退出
   \                     ??WIN_DispMsg_2: (+1)
   \   0000001E   0x2A04             CMP      R2,#+4
   \   00000020   0xD102             BNE.N    ??WIN_DispMsg_3
    480              {   
    481                  k = 0;
   \   00000022   0x2100             MOVS     R1,#+0
   \   00000024   0x7741             STRB     R1,[R0, #+29]
    482                  return; 
   \   00000026   0xBDF1             POP      {R0,R4-R7,PC}
    483              }
    484              
    485              char i,j;
    486              LedDispCtrl[k].Flag         = 1;
   \                     ??WIN_DispMsg_3: (+1)
   \   00000028   0xEBC2 0x01C2      RSB      R1,R2,R2, LSL #+3
   \   0000002C   0x180D             ADDS     R5,R1,R0
   \   0000002E   0x2001             MOVS     R0,#+1
   \   00000030   0x7028             STRB     R0,[R5, #+0]
    487              LedDispCtrl[k].Cycle        = 1;
   \   00000032   0x7068             STRB     R0,[R5, #+1]
    488              LedDispCtrl[k].Duty         = 20;
   \   00000034   0x2014             MOVS     R0,#+20
   \   00000036   0x70A8             STRB     R0,[R5, #+2]
    489              
    490              /***********************************************
    491              * 描述：补齐8位数据,如果字节8，在前面补空格 
    492              * redmorningcn 
    493              * 2017-05-24
    494              */
    495              
    496              //对小数点处理。2017-05-24
    497              uint8   datalen = strlen(msg);
   \   00000038   0x4620             MOV      R0,R4
   \   0000003A   0x.... 0x....      BL       strlen
   \   0000003E   0x4606             MOV      R6,R0
    498              for(i = 0;i < strlen(msg);i++) {
   \   00000040   0x2700             MOVS     R7,#+0
   \   00000042   0xE00A             B.N      ??WIN_DispMsg_4
    499                  if(msg[i+1] == '.' && msg[i] != '.'){
   \                     ??WIN_DispMsg_5: (+1)
   \   00000044   0x4638             MOV      R0,R7
   \   00000046   0x1901             ADDS     R1,R0,R4
   \   00000048   0x7849             LDRB     R1,[R1, #+1]
   \   0000004A   0x292E             CMP      R1,#+46
   \   0000004C   0xD104             BNE.N    ??WIN_DispMsg_6
   \   0000004E   0x5D00             LDRB     R0,[R0, R4]
   \   00000050   0x282E             CMP      R0,#+46
   \   00000052   0xD001             BEQ.N    ??WIN_DispMsg_6
    500                      datalen--;
   \   00000054   0x1E76             SUBS     R6,R6,#+1
    501                      i++;
   \   00000056   0x1C7F             ADDS     R7,R7,#+1
    502                  }
    503              }
   \                     ??WIN_DispMsg_6: (+1)
   \   00000058   0x1C7F             ADDS     R7,R7,#+1
   \                     ??WIN_DispMsg_4: (+1)
   \   0000005A   0x4620             MOV      R0,R4
   \   0000005C   0x.... 0x....      BL       strlen
   \   00000060   0xB2FF             UXTB     R7,R7
   \   00000062   0x4287             CMP      R7,R0
   \   00000064   0xD3EE             BCC.N    ??WIN_DispMsg_5
    504              
    505              for(i = 0,j = 0;j < DISPLAY_LED_NUM;j++) {
   \   00000066   0x2000             MOVS     R0,#+0
   \   00000068   0x4601             MOV      R1,R0
   \   0000006A   0xE006             B.N      ??WIN_DispMsg_7
    506                  if(datalen < DISPLAY_LED_NUM)
    507                  {
    508                      LedDispCtrl[k].Code[j] = LED_SEG_CODE[0];
    509                      datalen++;
    510                  } else{
    511                      if(msg[i+1] == '.' && msg[i] != '.') {
    512                          LedDispCtrl[k].Code[j] = LED_SEG_CODE[msg[i]] | 0x80;
    513                          i++;
    514                      } else {
    515                          LedDispCtrl[k].Code[j] = LED_SEG_CODE[msg[i]];
   \                     ??WIN_DispMsg_8: (+1)
   \   0000006C   0x.... 0x....      ADR.W    R3,LED_SEG_CODE
   \   00000070   0x5CD2             LDRB     R2,[R2, R3]
   \   00000072   0x194B             ADDS     R3,R1,R5
   \   00000074   0x70DA             STRB     R2,[R3, #+3]
    516                      }
    517                      i++;
   \                     ??WIN_DispMsg_9: (+1)
   \   00000076   0x1C40             ADDS     R0,R0,#+1
   \                     ??WIN_DispMsg_10: (+1)
   \   00000078   0x1C49             ADDS     R1,R1,#+1
   \                     ??WIN_DispMsg_7: (+1)
   \   0000007A   0x2904             CMP      R1,#+4
   \   0000007C   0xDA18             BGE.N    ??WIN_DispMsg_11
   \   0000007E   0xB2F6             UXTB     R6,R6
   \   00000080   0x2E04             CMP      R6,#+4
   \   00000082   0xDA04             BGE.N    ??WIN_DispMsg_12
   \   00000084   0x2200             MOVS     R2,#+0
   \   00000086   0x194B             ADDS     R3,R1,R5
   \   00000088   0x70DA             STRB     R2,[R3, #+3]
   \   0000008A   0x1C76             ADDS     R6,R6,#+1
   \   0000008C   0xE7F4             B.N      ??WIN_DispMsg_10
   \                     ??WIN_DispMsg_12: (+1)
   \   0000008E   0xB2C0             UXTB     R0,R0
   \   00000090   0x5D02             LDRB     R2,[R0, R4]
   \   00000092   0x1903             ADDS     R3,R0,R4
   \   00000094   0x785B             LDRB     R3,[R3, #+1]
   \   00000096   0x2B2E             CMP      R3,#+46
   \   00000098   0xD1E8             BNE.N    ??WIN_DispMsg_8
   \   0000009A   0x2A2E             CMP      R2,#+46
   \   0000009C   0xD0E6             BEQ.N    ??WIN_DispMsg_8
   \   0000009E   0x.... 0x....      ADR.W    R3,LED_SEG_CODE
   \   000000A2   0x5CD2             LDRB     R2,[R2, R3]
   \   000000A4   0xF042 0x0280      ORR      R2,R2,#0x80
   \   000000A8   0x194B             ADDS     R3,R1,R5
   \   000000AA   0x70DA             STRB     R2,[R3, #+3]
   \   000000AC   0x1C40             ADDS     R0,R0,#+1
   \   000000AE   0xE7E2             B.N      ??WIN_DispMsg_9
    518                  }
    519              }
    520              
    521          //    /***********************************************
    522          //    * 描述： 
    523          //    */
    524          //    for(i = 0,j = 0;j < DISPLAY_LED_NUM;j++,i++) {
    525          //        if(msg[i] == '.') {
    526          //            i++;
    527          //            LedDispCtrl[k].Code[j] = LED_SEG_CODE[msg[i]] | 0x80;
    528          //        } else {
    529          //            LedDispCtrl[k].Code[j] = LED_SEG_CODE[msg[i]];
    530          //        }
    531          //    }    
    532              
    533              //BSP_DispSetBrightness(Ctrl.Para.dat.DispLevel);
    534              //BSP_DispEvtProcess();    
    535          }
   \                     ??WIN_DispMsg_11: (+1)
   \   000000B0   0xBDF1             POP      {R0,R4-R7,PC}    ;; return

   \                                 In section .bss, align 4
   \                     LedDispCtrl:
   \   00000000                      DS8 28
   \                     dis_num_pos:
   \   0000001C                      DS8 1
   \   0000001D                      DS8 1
    536          
    537          /*******************************************************************************
    538          * 名    称： BSP_Disp
    539          * 功    能： 根据序号，给7219送相应的数据
    540          * 入口参数： 
    541          * 出口参数： 
    542          * 作　 　者： wumingshen.
    543          * 创建日期： 2015-12-08
    544          * 修    改：
    545          * 修改日期：
    546          * 备    注：
    547          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    548          void BSP_Disp(uint8_t Index)
    549          {
   \                     BSP_Disp: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    550              uint8_t i;
    551              if(Index > sizeof(LedDispCtrl)/sizeof(StrLedDisp)-1) {
   \   00000004   0x2C04             CMP      R4,#+4
   \   00000006   0xD20E             BCS.N    ??BSP_Disp_0
    552                  return;
    553              }
    554              //BSP_DispInit();
    555              for(i = 0; i<DISPLAY_LED_NUM ; i++) {
   \   00000008   0x2500             MOVS     R5,#+0
   \   0000000A   0xE00A             B.N      ??BSP_Disp_1
    556                  LED_SPI_SendData(LedDispBuf[i],LedDispCtrl[Index].Code[i]);
   \                     ??BSP_Disp_2: (+1)
   \   0000000C   0x....             LDR.N    R0,??DataTable12
   \   0000000E   0xEBC4 0x01C4      RSB      R1,R4,R4, LSL #+3
   \   00000012   0x1808             ADDS     R0,R1,R0
   \   00000014   0x1828             ADDS     R0,R5,R0
   \   00000016   0x78C1             LDRB     R1,[R0, #+3]
   \   00000018   0x....             LDR.N    R0,??DataTable12_1
   \   0000001A   0x5C28             LDRB     R0,[R5, R0]
   \   0000001C   0x.... 0x....      BL       LED_SPI_SendData
    557              }
   \   00000020   0x1C6D             ADDS     R5,R5,#+1
   \                     ??BSP_Disp_1: (+1)
   \   00000022   0x2D04             CMP      R5,#+4
   \   00000024   0xDBF2             BLT.N    ??BSP_Disp_2
    558          }
   \                     ??BSP_Disp_0: (+1)
   \   00000026   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    559          
    560          /*******************************************************************************
    561          * 名    称： BSP_DispOff
    562          * 功    能： 通过给数码管送消隐段码来清除显示
    563          * 入口参数： 
    564          * 出口参数： 
    565          * 作　 　者： wumingshen.
    566          * 创建日期： 2015-12-08
    567          * 修    改：
    568          * 修改日期：
    569          * 备    注：
    570          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    571          void BSP_DispOff(void)
    572          {
   \                     BSP_DispOff: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    573              uint8_t i;
    574              BSP_DispInit();
   \   00000002   0x.... 0x....      BL       BSP_DispInit
    575              for(i = 0; i<DISPLAY_LED_NUM ; i++) {
   \   00000006   0x2400             MOVS     R4,#+0
   \   00000008   0xE005             B.N      ??BSP_DispOff_0
    576                  LED_SPI_SendData(LedDispBuf[i],0);
   \                     ??BSP_DispOff_1: (+1)
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x....             LDR.N    R2,??DataTable12_1
   \   0000000E   0x5C80             LDRB     R0,[R0, R2]
   \   00000010   0x.... 0x....      BL       LED_SPI_SendData
    577              }
   \   00000014   0x1C64             ADDS     R4,R4,#+1
   \                     ??BSP_DispOff_0: (+1)
   \   00000016   0xB2E4             UXTB     R4,R4
   \   00000018   0x4620             MOV      R0,R4
   \   0000001A   0x2804             CMP      R0,#+4
   \   0000001C   0xDBF5             BLT.N    ??BSP_DispOff_1
    578          }
   \   0000001E   0xBD10             POP      {R4,PC}          ;; return
    579          
    580          
    581          /*******************************************************************************
    582          * 名    称： BSP_DispEvtProcess
    583          * 功    能： 用数码管将整型数据显示出来
    584          * 入口参数： 
    585          * 出口参数： 有数据显示，返回1，无数据显示，返回0
    586          * 作　 　者： redmorningcn.
    587          * 创建日期： 2015-12-08
    588          * 修    改：
    589          * 修改日期：
    590          * 备    注：
    591          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    592          uint8 BSP_DispEvtProcess(void)
    593          {    
   \                     BSP_DispEvtProcess: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    594              uint8   i = 0;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x....             LDR.N    R1,??DataTable12
   \   00000006   0xE002             B.N      ??BSP_DispEvtProcess_0
    595              
    596              while(i < DISPLAY_FRAME_NUM)                          //FIFO显示
    597              {
    598                  //标示，可以赋值，有数据显示
    599                  if(LedDispCtrl[ dis_num_pos % DISPLAY_FRAME_NUM ].Flag != 0 ) {
    600                      LedDispCtrl[dis_num_pos % DISPLAY_FRAME_NUM ].Flag = 0;    //可以重新赋值
    601                      BSP_Disp(   dis_num_pos % DISPLAY_FRAME_NUM );
    602                                  
    603                      return 1;
    604                  }
    605                  
    606                  dis_num_pos++;
   \                     ??BSP_DispEvtProcess_1: (+1)
   \   00000008   0x1C52             ADDS     R2,R2,#+1
   \   0000000A   0x770A             STRB     R2,[R1, #+28]
    607                  i++;
   \   0000000C   0x1C40             ADDS     R0,R0,#+1
   \                     ??BSP_DispEvtProcess_0: (+1)
   \   0000000E   0xB2C0             UXTB     R0,R0
   \   00000010   0x2804             CMP      R0,#+4
   \   00000012   0xDA0F             BGE.N    ??BSP_DispEvtProcess_2
   \   00000014   0x7F0A             LDRB     R2,[R1, #+28]
   \   00000016   0xF002 0x0303      AND      R3,R2,#0x3
   \   0000001A   0xEBC3 0x03C3      RSB      R3,R3,R3, LSL #+3
   \   0000001E   0x5C5C             LDRB     R4,[R3, R1]
   \   00000020   0x2C00             CMP      R4,#+0
   \   00000022   0xD0F1             BEQ.N    ??BSP_DispEvtProcess_1
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x5458             STRB     R0,[R3, R1]
   \   00000028   0xF002 0x0003      AND      R0,R2,#0x3
   \   0000002C   0x.... 0x....      BL       BSP_Disp
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0xBD10             POP      {R4,PC}
    608              }
    609              return 0;
   \                     ??BSP_DispEvtProcess_2: (+1)
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0xBD10             POP      {R4,PC}          ;; return
    610          }
    611          
    612          /*******************************************************************************
    613          * 名    称： BSP_DispClr
    614          * 功    能： 清除显示缓冲区,包括显示标志位和显示内容
    615          * 入口参数： 第几个显示缓冲区
    616          * 出口参数： 
    617          * 作　 　者： wumingshen.
    618          * 创建日期： 2015-12-08
    619          * 修    改：
    620          * 修改日期：
    621          * 备    注：
    622          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    623          void BSP_DispClr(uint8_t order)
    624          {
    625              if( order < sizeof(LedDispCtrl) / sizeof(StrLedDisp) ) {
   \                     BSP_DispClr: (+1)
   \   00000000   0x2804             CMP      R0,#+4
   \   00000002   0xD204             BCS.N    ??BSP_DispClr_0
    626                  LedDispCtrl[order].Flag = 0;
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x....             LDR.N    R2,??DataTable12
   \   00000008   0xEBC0 0x00C0      RSB      R0,R0,R0, LSL #+3
   \   0000000C   0x5481             STRB     R1,[R0, R2]
    627              }
    628          }
   \                     ??BSP_DispClr_0: (+1)
   \   0000000E   0x4770             BX       LR               ;; return
    629          
    630          /*******************************************************************************
    631          * 名    称： BSP_DispClrAll
    632          * 功    能： 清除所有显示缓冲区内容
    633          * 入口参数： 
    634          * 出口参数： 
    635          * 作　 　者： wumingshen.
    636          * 创建日期： 2015-12-08
    637          * 修    改：
    638          * 修改日期：
    639          * 备    注：
    640          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    641          void BSP_DispClrAll(void)
    642          {
    643              uint8_t i;
    644              
    645              //显示位置清零
    646              dis_num_pos = 0;
   \                     BSP_DispClrAll: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable12
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x7701             STRB     R1,[R0, #+28]
    647              
    648              for(i=0;i<sizeof(LedDispCtrl)/sizeof(StrLedDisp);i++) {
   \   00000006   0x460A             MOV      R2,R1
   \   00000008   0xE003             B.N      ??BSP_DispClrAll_0
    649                  LedDispCtrl[i].Flag = 0;
   \                     ??BSP_DispClrAll_1: (+1)
   \   0000000A   0xEBC1 0x03C1      RSB      R3,R1,R1, LSL #+3
   \   0000000E   0x541A             STRB     R2,[R3, R0]
    650              }
   \   00000010   0x1C49             ADDS     R1,R1,#+1
   \                     ??BSP_DispClrAll_0: (+1)
   \   00000012   0x2904             CMP      R1,#+4
   \   00000014   0xD3F9             BCC.N    ??BSP_DispClrAll_1
    651          }
   \   00000016   0x4770             BX       LR               ;; return
    652          
    653          /*******************************************************************************
    654          * 名    称： BSP_DispSetBrightness
    655          * 功    能： 7219设置亮度
    656          * 入口参数： 
    657          * 出口参数： 
    658          * 作　 　者： wumingshen.
    659          * 创建日期： 2015-12-12
    660          * 修    改：
    661          * 修改日期：
    662          * 备    注：
    663          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    664          void BSP_DispSetBrightness ( uint8_t bl )
    665          {    
    666              static uint8_t   last;
    667              
    668              if ( bl > 15 )
   \                     BSP_DispSetBrightness: (+1)
   \   00000000   0x2810             CMP      R0,#+16
   \   00000002   0xDB00             BLT.N    ??BSP_DispSetBrightness_0
    669                  bl  = 15;
   \   00000004   0x200F             MOVS     R0,#+15
    670              if ( last != bl ) {
   \                     ??BSP_DispSetBrightness_0: (+1)
   \   00000006   0x....             LDR.N    R1,??DataTable12_2
   \   00000008   0x780A             LDRB     R2,[R1, #+0]
   \   0000000A   0x4282             CMP      R2,R0
   \   0000000C   0xD003             BEQ.N    ??BSP_DispSetBrightness_1
    671                  last    = bl;
   \   0000000E   0x7008             STRB     R0,[R1, #+0]
    672                  LED_SPI_SendData( MAX7279_BRIGHTNESS,bl );      // 设置亮度
   \   00000010   0x4601             MOV      R1,R0
   \   00000012   0x200A             MOVS     R0,#+10
   \   00000014   0x....             B.N      LED_SPI_SendData
    673              }
    674          }
   \                     ??BSP_DispSetBrightness_1: (+1)
   \   00000016   0x4770             BX       LR               ;; return

   \                                 In section .bss, align 1
   \                     ??last:
   \   00000000                      DS8 1
    675          
    676          /*******************************************************************************
    677          * 名    称： BSP_DispInit
    678          * 功    能： 7219初始化
    679          * 入口参数： 
    680          * 出口参数： 
    681          * 作　 　者： wumingshen.
    682          * 创建日期： 2015-12-08
    683          * 修    改：
    684          * 修改日期：
    685          * 备    注：
    686          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    687          void BSP_DispInit (void)
    688          {
   \                     BSP_DispInit: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    689              BSP_MAX7219Init();                                              // 初始化硬件
   \   00000002   0x.... 0x....      BL       BSP_MAX7219Init
    690              
    691              LED_SPI_SendData( MAX7279_DISP_TEST,0x00 );                         // 设置工作模式
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x200F             MOVS     R0,#+15
   \   0000000A   0x.... 0x....      BL       LED_SPI_SendData
    692              LED_SPI_SendData( MAX7279_SCAN,MAX7279_8_DIGIT_SCAN );              // 设置扫描界限
   \   0000000E   0x2107             MOVS     R1,#+7
   \   00000010   0x200B             MOVS     R0,#+11
   \   00000012   0x.... 0x....      BL       LED_SPI_SendData
    693              LED_SPI_SendData( MAX7279_DECODE_MODE,MAX7279_DECODE_SET );         // 设置译码模式
   \   00000016   0x2100             MOVS     R1,#+0
   \   00000018   0x2009             MOVS     R0,#+9
   \   0000001A   0x.... 0x....      BL       LED_SPI_SendData
    694              LED_SPI_SendData( MAX7279_BRIGHTNESS,MAX7279_BRIGHTNESS_LEVEL );    // 设置亮度
   \   0000001E   0x210A             MOVS     R1,#+10
   \   00000020   0x4608             MOV      R0,R1
   \   00000022   0x.... 0x....      BL       LED_SPI_SendData
    695              LED_SPI_SendData( MAX7279_LOW_PWR,MAX7279_NORMAL_MODE );            // 设置为正常工作模式
   \   00000026   0x2101             MOVS     R1,#+1
   \   00000028   0x200C             MOVS     R0,#+12
   \   0000002A   0x.... 0x....      BL       LED_SPI_SendData
    696              
    697              BSP_DispClrAll();                                               // 清屏
   \   0000002E   0xE8BD 0x4001      POP      {R0,LR}
   \   00000032   0x....             B.N      BSP_DispClrAll
    698          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   0x........         DC32     LedDispCtrl

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_1:
   \   00000000   0x........         DC32     LedDispBuf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_2:
   \   00000000   0x........         DC32     ??last

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x80 0x80          DC8 128, 128, 128, 128
   \              0x80 0x80    
    699          
    700          /*******************************************************************************
    701          * 				                end of file                                    *
    702          *******************************************************************************/
    703          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   BSP_Disp
        16   -> LED_SPI_SendData
       0   BSP_DispClr
       0   BSP_DispClrAll
       8   BSP_DispEvtProcess
         8   -> BSP_Disp
       8   BSP_DispInit
         0   -> BSP_DispClrAll
         8   -> BSP_MAX7219Init
         8   -> LED_SPI_SendData
       8   BSP_DispOff
         8   -> BSP_DispInit
         8   -> LED_SPI_SendData
       0   BSP_DispSetBrightness
         0   -> LED_SPI_SendData
      80   BSP_DispWrite
        80   -> abs
        80   -> strlen
       8   BSP_MAX7219Init
         0   -> Delay_Nus
         8   -> GPIO_SetOrClearValue
         8   -> SPI_GpioInit
      16   LED_SPI_SendData
         0   -> GPIO_SetOrClearValue
        16   -> GPIO_SetOrClearValue
        16   -> SPI_SendByte
       8   SPI_GpioInit
         8   -> GPIO_PinselConfig
         0   -> GPIO_SetOrClearValue
      16   SPI_SendByte
        16   -> Delay_Nus
        16   -> GPIO_SetOrClearValue
      24   WIN_DispMsg
        24   -> strlen


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable12
       4  ??DataTable12_1
       4  ??DataTable12_2
       8  ?_0
       8  ?_1
       8  ?_2
       4  ?_3
      40  BSP_Disp
      16  BSP_DispClr
      24  BSP_DispClrAll
      56  BSP_DispEvtProcess
      52  BSP_DispInit
      32  BSP_DispOff
      24  BSP_DispSetBrightness
     736  BSP_DispWrite
      32  BSP_MAX7219Init
     132  LED_SEG_CODE
      38  LED_SPI_SendData
       4  LedDispBuf
      30  LedDispCtrl
          dis_num_pos
          k
      38  SPI_GpioInit
      74  SPI_SendByte
     178  WIN_DispMsg
       1  last

 
    31 bytes in section .bss
     4 bytes in section .data
    24 bytes in section .rodata
 1 488 bytes in section .text
 
 1 488 bytes of CODE  memory
    24 bytes of CONST memory
    35 bytes of DATA  memory

Errors: none
Warnings: none

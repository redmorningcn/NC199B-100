###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.1.8447/W32 for ARM        13/Feb/2017  13:48:12
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Source\Micrium\uC-OS-III\Source\os_cfg_app.c
#    Command line =  
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Source\Micrium\uC-OS-III\Source\os_cfg_app.c" -D
#        USE_STDPERIPH_DRIVER -D STM32F10X_HD -D DEBUG -D STM32F103RB -D
#        STM32_FLASH_SIZE=128 -lCN "V:\我的项目\04
#        长沙南车\2015年后项目\NC16-011-A 智能电表\04 程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\Debug-RB\List\" -o "V:\我的项目\04
#        长沙南车\2015年后项目\NC16-011-A 智能电表\04 程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\Debug-RB\Obj\" --debug --endian=little
#        --cpu=ARM7TDMI -e --fpu=None --dlib_config "D:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01 智能电表\Library\Project\IAR\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\APP\" -I "V:\我的项目\04
#        长沙南车\2015年后项目\NC16-011-A 智能电表\04 程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\APP\User\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\APP\AES\" -I "V:\我的项目\04
#        长沙南车\2015年后项目\NC16-011-A 智能电表\04 程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\APP\Config\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\APP\OS\" -I "V:\我的项目\04
#        长沙南车\2015年后项目\NC16-011-A 智能电表\04 程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\APP\User\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\APP\SIM900A\Source\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\APP\SIM900A\Port\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\APP\SIM900A\OS\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\APP\SIM900A\Config\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\APP\Protocol\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\BSP\" -I "V:\我的项目\04
#        长沙南车\2015年后项目\NC16-011-A 智能电表\04 程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\BSP\Driver\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\BSP\IAR\" -I "V:\我的项目\04
#        长沙南车\2015年后项目\NC16-011-A 智能电表\04 程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\BSP\Os\" -I "V:\我的项目\04
#        长沙南车\2015年后项目\NC16-011-A 智能电表\04 程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\BSP\Os\uCOS-III\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\BSP\St\" -I "V:\我的项目\04
#        长沙南车\2015年后项目\NC16-011-A 智能电表\04 程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\BSP\St\FWLib\CMSIS\CM3\CoreSupport\"
#        -I "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\BSP\St\FWLib\CMSIS\CM3\DeviceSupport\ST\STM32F10x\"
#        -I "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\BSP\St\FWLib\STM32F10x_StdPeriph_Driver\inc\"
#        -I "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\Micrium\uC-CPU\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\Micrium\uC-CPU\ARM-Cortex-M3\IAR\"
#        -I "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\Micrium\uC-LIB\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\BSP\Os\OSAL\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\OSAL\OS\" -I "V:\我的项目\04
#        长沙南车\2015年后项目\NC16-011-A 智能电表\04 程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\Micrium\uC-MB\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\Micrium\uC-MB\Cfg\Template\"
#        -I "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\Micrium\uC-MB\OS\uCOS-III\"
#        -I "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\Micrium\uC-MB\Source\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\" -I
#        "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\Ports\ARM-Cortex-M3\Generic\IAR\"
#        -I "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\Source\"
#        -I "V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\FatFs\" -I "V:\我的项目\04
#        长沙南车\2015年后项目\NC16-011-A 智能电表\04 程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\..\..\Source\FatFs\option\" --cpu_mode
#        thumb -Oh --use_c++_inline
#    List file    =  
#        V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\Debug-RB\List\os_cfg_app.lst
#    Object file  =  
#        V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04
#        程序\NC014-001-000.CX_01
#        智能电表\Library\Project\IAR\Debug-RB\Obj\os_cfg_app.o
#
###############################################################################

V:\我的项目\04 长沙南车\2015年后项目\NC16-011-A 智能电表\04 程序\NC014-001-000.CX_01 智能电表\Library\Source\Micrium\uC-OS-III\Source\os_cfg_app.c
      1          /*
      2          ************************************************************************************************************************
      3          *                                                      uC/OS-III
      4          *                                                 The Real-Time Kernel
      5          *
      6          *                                  (c) Copyright 2009-2012; Micrium, Inc.; Weston, FL
      7          *                           All rights reserved.  Protected by international copyright laws.
      8          *
      9          *                                       OS CONFIGURATION (APPLICATION SPECIFICS)
     10          *
     11          * File    : OS_CFG_APP.C
     12          * By      : JJL
     13          * Version : V3.03.01
     14          *
     15          * LICENSING TERMS:
     16          * ---------------
     17          *           uC/OS-III is provided in source form for FREE short-term evaluation, for educational use or 
     18          *           for peaceful research.  If you plan or intend to use uC/OS-III in a commercial application/
     19          *           product then, you need to contact Micrium to properly license uC/OS-III for its use in your 
     20          *           application/product.   We provide ALL the source code for your convenience and to help you 
     21          *           experience uC/OS-III.  The fact that the source is provided does NOT mean that you can use 
     22          *           it commercially without paying a licensing fee.
     23          *
     24          *           Knowledge of the source code may NOT be used to develop a similar product.
     25          *
     26          *           Please help us continue to provide the embedded community with the finest software available.
     27          *           Your honesty is greatly appreciated.
     28          *
     29          *           You can contact us at www.micrium.com, or by phone at +1 (954) 217-2036.
     30          ************************************************************************************************************************
     31          * Note(s) : DO NOT CHANGE THIS FILE!
     32          ************************************************************************************************************************
     33          */
     34          
     35          #define  MICRIUM_SOURCE
     36          #include <os_cfg_app.h>
     37          #include <os.h>
     38          
     39          #ifdef VSC_INCLUDE_SOURCE_FILE_NAMES
     40          const  CPU_CHAR  *os_cfg_app__c = "$Id: $";
     41          #endif
     42          
     43          #define  OS_CFG_IDLE_TASK_STK_LIMIT      ((OS_CFG_IDLE_TASK_STK_SIZE  * OS_CFG_TASK_STK_LIMIT_PCT_EMPTY) / 100u)
     44          #define  OS_CFG_INT_Q_TASK_STK_LIMIT     ((OS_CFG_INT_Q_TASK_STK_SIZE * OS_CFG_TASK_STK_LIMIT_PCT_EMPTY) / 100u)
     45          #define  OS_CFG_STAT_TASK_STK_LIMIT      ((OS_CFG_STAT_TASK_STK_SIZE  * OS_CFG_TASK_STK_LIMIT_PCT_EMPTY) / 100u)
     46          #define  OS_CFG_TICK_TASK_STK_LIMIT      ((OS_CFG_TICK_TASK_STK_SIZE  * OS_CFG_TASK_STK_LIMIT_PCT_EMPTY) / 100u)
     47          #define  OS_CFG_TMR_TASK_STK_LIMIT       ((OS_CFG_TMR_TASK_STK_SIZE   * OS_CFG_TASK_STK_LIMIT_PCT_EMPTY) / 100u)
     48          
     49          /*
     50          ************************************************************************************************************************
     51          *                                                    DATA STORAGE
     52          ************************************************************************************************************************
     53          */
     54          

   \                                 In section .bss, align 4
     55          CPU_STK        OSCfg_IdleTaskStk   [OS_CFG_IDLE_TASK_STK_SIZE];
   \                     OSCfg_IdleTaskStk:
   \   00000000                      DS8 256
     56          
     57          #if (OS_CFG_ISR_POST_DEFERRED_EN > 0u)

   \                                 In section .bss, align 4
     58          OS_INT_Q       OSCfg_IntQ          [OS_CFG_INT_Q_SIZE];
   \                     OSCfg_IntQ:
   \   00000000                      DS8 3200

   \                                 In section .bss, align 4
     59          CPU_STK        OSCfg_IntQTaskStk   [OS_CFG_INT_Q_TASK_STK_SIZE];
   \                     OSCfg_IntQTaskStk:
   \   00000000                      DS8 512
     60          #endif
     61          
     62          #if (OS_CFG_ISR_STK_SIZE > 0u)

   \                                 In section .bss, align 4
     63          CPU_STK        OSCfg_ISRStk        [OS_CFG_ISR_STK_SIZE];
   \                     OSCfg_ISRStk:
   \   00000000                      DS8 512
     64          #endif
     65          
     66          #if (OS_MSG_EN > 0u)

   \                                 In section .bss, align 4
     67          OS_MSG         OSCfg_MsgPool       [OS_CFG_MSG_POOL_SIZE];
   \                     OSCfg_MsgPool:
   \   00000000                      DS8 2048
     68          #endif
     69          
     70          #if (OS_CFG_STAT_TASK_EN > 0u)
     71          CPU_STK        OSCfg_StatTaskStk   [OS_CFG_STAT_TASK_STK_SIZE];
     72          #endif
     73          

   \                                 In section .bss, align 4
     74          CPU_STK        OSCfg_TickTaskStk   [OS_CFG_TICK_TASK_STK_SIZE];
   \                     OSCfg_TickTaskStk:
   \   00000000                      DS8 512

   \                                 In section .bss, align 4
     75          OS_TICK_SPOKE  OSCfg_TickWheel     [OS_CFG_TICK_WHEEL_SIZE];
   \                     OSCfg_TickWheel:
   \   00000000                      DS8 136
     76          
     77          #if (OS_CFG_TMR_EN > 0u)

   \                                 In section .bss, align 4
     78          CPU_STK        OSCfg_TmrTaskStk    [OS_CFG_TMR_TASK_STK_SIZE];
   \                     OSCfg_TmrTaskStk:
   \   00000000                      DS8 512

   \                                 In section .bss, align 4
     79          OS_TMR_SPOKE   OSCfg_TmrWheel      [OS_CFG_TMR_WHEEL_SIZE];
   \                     OSCfg_TmrWheel:
   \   00000000                      DS8 136
     80          #endif
     81          
     82          /*$PAGE*/
     83          /*
     84          ************************************************************************************************************************
     85          *                                                      CONSTANTS
     86          ************************************************************************************************************************
     87          */
     88          

   \                                 In section .rodata, align 4, keep-with-next
     89          CPU_STK      * const  OSCfg_IdleTaskStkBasePtr   = (CPU_STK    *)&OSCfg_IdleTaskStk[0];
   \                     OSCfg_IdleTaskStkBasePtr:
   \   00000000   0x........         DC32 OSCfg_IdleTaskStk

   \                                 In section .rodata, align 4, keep-with-next
     90          CPU_STK_SIZE   const  OSCfg_IdleTaskStkLimit     = (CPU_STK_SIZE)OS_CFG_IDLE_TASK_STK_LIMIT;
   \                     OSCfg_IdleTaskStkLimit:
   \   00000000   0x00000006         DC32 6

   \                                 In section .rodata, align 4, keep-with-next
     91          CPU_STK_SIZE   const  OSCfg_IdleTaskStkSize      = (CPU_STK_SIZE)OS_CFG_IDLE_TASK_STK_SIZE;
   \                     OSCfg_IdleTaskStkSize:
   \   00000000   0x00000040         DC32 64

   \                                 In section .rodata, align 4, keep-with-next
     92          CPU_INT32U     const  OSCfg_IdleTaskStkSizeRAM   = (CPU_INT32U  )sizeof(OSCfg_IdleTaskStk);
   \                     OSCfg_IdleTaskStkSizeRAM:
   \   00000000   0x00000100         DC32 256
     93          
     94          
     95          #if (OS_CFG_ISR_POST_DEFERRED_EN > 0u)

   \                                 In section .rodata, align 4, keep-with-next
     96          OS_INT_Q     * const  OSCfg_IntQBasePtr          = (OS_INT_Q   *)&OSCfg_IntQ[0];
   \                     OSCfg_IntQBasePtr:
   \   00000000   0x........         DC32 OSCfg_IntQ

   \                                 In section .rodata, align 2, keep-with-next
     97          OS_OBJ_QTY     const  OSCfg_IntQSize             = (OS_OBJ_QTY  )OS_CFG_INT_Q_SIZE;
   \                     OSCfg_IntQSize:
   \   00000000   0x0064             DC16 100

   \                                 In section .rodata, align 4, keep-with-next
     98          CPU_INT32U     const  OSCfg_IntQSizeRAM          = (CPU_INT32U  )sizeof(OSCfg_IntQ);
   \                     OSCfg_IntQSizeRAM:
   \   00000000   0x00000C80         DC32 3200

   \                                 In section .rodata, align 4, keep-with-next
     99          CPU_STK      * const  OSCfg_IntQTaskStkBasePtr   = (CPU_STK    *)&OSCfg_IntQTaskStk[0];
   \                     OSCfg_IntQTaskStkBasePtr:
   \   00000000   0x........         DC32 OSCfg_IntQTaskStk

   \                                 In section .rodata, align 4, keep-with-next
    100          CPU_STK_SIZE   const  OSCfg_IntQTaskStkLimit     = (CPU_STK_SIZE)OS_CFG_INT_Q_TASK_STK_LIMIT;
   \                     OSCfg_IntQTaskStkLimit:
   \   00000000   0x0000000C         DC32 12

   \                                 In section .rodata, align 4, keep-with-next
    101          CPU_STK_SIZE   const  OSCfg_IntQTaskStkSize      = (CPU_STK_SIZE)OS_CFG_INT_Q_TASK_STK_SIZE;
   \                     OSCfg_IntQTaskStkSize:
   \   00000000   0x00000080         DC32 128

   \                                 In section .rodata, align 4, keep-with-next
    102          CPU_INT32U     const  OSCfg_IntQTaskStkSizeRAM   = (CPU_INT32U  )sizeof(OSCfg_IntQTaskStk);
   \                     OSCfg_IntQTaskStkSizeRAM:
   \   00000000   0x00000200         DC32 512
    103          #else
    104          OS_INT_Q     * const  OSCfg_IntQBasePtr          = (OS_INT_Q   *)0;
    105          OS_OBJ_QTY     const  OSCfg_IntQSize             = (OS_OBJ_QTY  )0;
    106          CPU_INT32U     const  OSCfg_IntQSizeRAM          = (CPU_INT32U  )0;
    107          CPU_STK      * const  OSCfg_IntQTaskStkBasePtr   = (CPU_STK    *)0;
    108          CPU_STK_SIZE   const  OSCfg_IntQTaskStkLimit     = (CPU_STK_SIZE)0;
    109          CPU_STK_SIZE   const  OSCfg_IntQTaskStkSize      = (CPU_STK_SIZE)0;
    110          CPU_INT32U     const  OSCfg_IntQTaskStkSizeRAM   = (CPU_INT32U  )0;
    111          #endif
    112          
    113          
    114          #if (OS_CFG_ISR_STK_SIZE > 0u)

   \                                 In section .rodata, align 4, keep-with-next
    115          CPU_STK      * const  OSCfg_ISRStkBasePtr        = (CPU_STK    *)&OSCfg_ISRStk[0];
   \                     OSCfg_ISRStkBasePtr:
   \   00000000   0x........         DC32 OSCfg_ISRStk

   \                                 In section .rodata, align 4, keep-with-next
    116          CPU_STK_SIZE   const  OSCfg_ISRStkSize           = (CPU_STK_SIZE)OS_CFG_ISR_STK_SIZE;
   \                     OSCfg_ISRStkSize:
   \   00000000   0x00000080         DC32 128

   \                                 In section .rodata, align 4, keep-with-next
    117          CPU_INT32U     const  OSCfg_ISRStkSizeRAM        = (CPU_INT32U  )sizeof(OSCfg_ISRStk);
   \                     OSCfg_ISRStkSizeRAM:
   \   00000000   0x00000200         DC32 512
    118          #else
    119          CPU_STK      * const  OSCfg_ISRStkBasePtr        = (CPU_STK    *)0;
    120          CPU_STK_SIZE   const  OSCfg_ISRStkSize           = (CPU_STK_SIZE)0;
    121          CPU_INT32U     const  OSCfg_ISRStkSizeRAM        = (CPU_INT32U  )0;
    122          #endif
    123          
    124          
    125          #if (OS_MSG_EN > 0u)

   \                                 In section .rodata, align 2, keep-with-next
    126          OS_MSG_SIZE    const  OSCfg_MsgPoolSize          = (OS_MSG_SIZE)OS_CFG_MSG_POOL_SIZE;
   \                     OSCfg_MsgPoolSize:
   \   00000000   0x0080             DC16 128

   \                                 In section .rodata, align 4, keep-with-next
    127          CPU_INT32U     const  OSCfg_MsgPoolSizeRAM       = (CPU_INT32U )sizeof(OSCfg_MsgPool);
   \                     OSCfg_MsgPoolSizeRAM:
   \   00000000   0x00000800         DC32 2048

   \                                 In section .rodata, align 4, keep-with-next
    128          OS_MSG       * const  OSCfg_MsgPoolBasePtr       = (OS_MSG    *)&OSCfg_MsgPool[0];
   \                     OSCfg_MsgPoolBasePtr:
   \   00000000   0x........         DC32 OSCfg_MsgPool
    129          #else
    130          OS_MSG_SIZE    const  OSCfg_MsgPoolSize          = (OS_MSG_SIZE)0;
    131          CPU_INT32U     const  OSCfg_MsgPoolSizeRAM       = (CPU_INT32U )0;
    132          OS_MSG       * const  OSCfg_MsgPoolBasePtr       = (OS_MSG    *)0;
    133          #endif
    134          
    135          
    136          #if (OS_CFG_STAT_TASK_EN > 0u)
    137          OS_PRIO        const  OSCfg_StatTaskPrio         = (OS_PRIO     )OS_CFG_STAT_TASK_PRIO;
    138          OS_RATE_HZ     const  OSCfg_StatTaskRate_Hz      = (OS_RATE_HZ  )OS_CFG_STAT_TASK_RATE_HZ;
    139          CPU_STK      * const  OSCfg_StatTaskStkBasePtr   = (CPU_STK    *)&OSCfg_StatTaskStk[0];
    140          CPU_STK_SIZE   const  OSCfg_StatTaskStkLimit     = (CPU_STK_SIZE)OS_CFG_STAT_TASK_STK_LIMIT;
    141          CPU_STK_SIZE   const  OSCfg_StatTaskStkSize      = (CPU_STK_SIZE)OS_CFG_STAT_TASK_STK_SIZE;
    142          CPU_INT32U     const  OSCfg_StatTaskStkSizeRAM   = (CPU_INT32U  )sizeof(OSCfg_StatTaskStk);
    143          #else

   \                                 In section .rodata, align 1, keep-with-next
    144          OS_PRIO        const  OSCfg_StatTaskPrio         = (OS_PRIO     )0;
   \                     OSCfg_StatTaskPrio:
   \   00000000   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
    145          OS_RATE_HZ     const  OSCfg_StatTaskRate_Hz      = (OS_RATE_HZ  )0;
   \                     OSCfg_StatTaskRate_Hz:
   \   00000000   0x00000000         DC32 0

   \                                 In section .rodata, align 4, keep-with-next
    146          CPU_STK      * const  OSCfg_StatTaskStkBasePtr   = (CPU_STK    *)0;
   \                     OSCfg_StatTaskStkBasePtr:
   \   00000000   0x00000000         DC32 0H

   \                                 In section .rodata, align 4, keep-with-next
    147          CPU_STK_SIZE   const  OSCfg_StatTaskStkLimit     = (CPU_STK_SIZE)0;
   \                     OSCfg_StatTaskStkLimit:
   \   00000000   0x00000000         DC32 0

   \                                 In section .rodata, align 4, keep-with-next
    148          CPU_STK_SIZE   const  OSCfg_StatTaskStkSize      = (CPU_STK_SIZE)0;
   \                     OSCfg_StatTaskStkSize:
   \   00000000   0x00000000         DC32 0

   \                                 In section .rodata, align 4, keep-with-next
    149          CPU_INT32U     const  OSCfg_StatTaskStkSizeRAM   = (CPU_INT32U  )0;
   \                     OSCfg_StatTaskStkSizeRAM:
   \   00000000   0x00000000         DC32 0
    150          #endif
    151          
    152          

   \                                 In section .rodata, align 4, keep-with-next
    153          CPU_STK_SIZE   const  OSCfg_StkSizeMin           = (CPU_STK_SIZE)OS_CFG_STK_SIZE_MIN;
   \                     OSCfg_StkSizeMin:
   \   00000000   0x00000040         DC32 64
    154          
    155          

   \                                 In section .rodata, align 4, keep-with-next
    156          OS_RATE_HZ     const  OSCfg_TickRate_Hz          = (OS_RATE_HZ  )OS_CFG_TICK_RATE_HZ;
   \                     OSCfg_TickRate_Hz:
   \   00000000   0x000003E8         DC32 1000

   \                                 In section .rodata, align 1, keep-with-next
    157          OS_PRIO        const  OSCfg_TickTaskPrio         = (OS_PRIO     )OS_CFG_TICK_TASK_PRIO;
   \                     OSCfg_TickTaskPrio:
   \   00000000   0x0A               DC8 10

   \                                 In section .rodata, align 4, keep-with-next
    158          CPU_STK      * const  OSCfg_TickTaskStkBasePtr   = (CPU_STK    *)&OSCfg_TickTaskStk[0];
   \                     OSCfg_TickTaskStkBasePtr:
   \   00000000   0x........         DC32 OSCfg_TickTaskStk

   \                                 In section .rodata, align 4, keep-with-next
    159          CPU_STK_SIZE   const  OSCfg_TickTaskStkLimit     = (CPU_STK_SIZE)OS_CFG_TICK_TASK_STK_LIMIT;
   \                     OSCfg_TickTaskStkLimit:
   \   00000000   0x0000000C         DC32 12

   \                                 In section .rodata, align 4, keep-with-next
    160          CPU_STK_SIZE   const  OSCfg_TickTaskStkSize      = (CPU_STK_SIZE)OS_CFG_TICK_TASK_STK_SIZE;
   \                     OSCfg_TickTaskStkSize:
   \   00000000   0x00000080         DC32 128

   \                                 In section .rodata, align 4, keep-with-next
    161          CPU_INT32U     const  OSCfg_TickTaskStkSizeRAM   = (CPU_INT32U  )sizeof(OSCfg_TickTaskStk);
   \                     OSCfg_TickTaskStkSizeRAM:
   \   00000000   0x00000200         DC32 512

   \                                 In section .rodata, align 2, keep-with-next
    162          OS_OBJ_QTY     const  OSCfg_TickWheelSize        = (OS_OBJ_QTY  )OS_CFG_TICK_WHEEL_SIZE;
   \                     OSCfg_TickWheelSize:
   \   00000000   0x0011             DC16 17

   \                                 In section .rodata, align 4, keep-with-next
    163          CPU_INT32U     const  OSCfg_TickWheelSizeRAM     = (CPU_INT32U  )sizeof(OSCfg_TickWheel);
   \                     OSCfg_TickWheelSizeRAM:
   \   00000000   0x00000088         DC32 136
    164          
    165          
    166          #if (OS_CFG_TMR_EN > 0u)

   \                                 In section .rodata, align 1, keep-with-next
    167          OS_PRIO        const  OSCfg_TmrTaskPrio          = (OS_PRIO     )OS_CFG_TMR_TASK_PRIO;
   \                     OSCfg_TmrTaskPrio:
   \   00000000   0x0B               DC8 11

   \                                 In section .rodata, align 4, keep-with-next
    168          OS_RATE_HZ     const  OSCfg_TmrTaskRate_Hz       = (OS_RATE_HZ  )OS_CFG_TMR_TASK_RATE_HZ;
   \                     OSCfg_TmrTaskRate_Hz:
   \   00000000   0x000003E8         DC32 1000

   \                                 In section .rodata, align 4, keep-with-next
    169          CPU_STK      * const  OSCfg_TmrTaskStkBasePtr    = (CPU_STK    *)&OSCfg_TmrTaskStk[0];
   \                     OSCfg_TmrTaskStkBasePtr:
   \   00000000   0x........         DC32 OSCfg_TmrTaskStk

   \                                 In section .rodata, align 4, keep-with-next
    170          CPU_STK_SIZE   const  OSCfg_TmrTaskStkLimit      = (CPU_STK_SIZE)OS_CFG_TMR_TASK_STK_LIMIT;
   \                     OSCfg_TmrTaskStkLimit:
   \   00000000   0x0000000C         DC32 12

   \                                 In section .rodata, align 4, keep-with-next
    171          CPU_STK_SIZE   const  OSCfg_TmrTaskStkSize       = (CPU_STK_SIZE)OS_CFG_TMR_TASK_STK_SIZE;
   \                     OSCfg_TmrTaskStkSize:
   \   00000000   0x00000080         DC32 128

   \                                 In section .rodata, align 4, keep-with-next
    172          CPU_INT32U     const  OSCfg_TmrTaskStkSizeRAM    = (CPU_INT32U  )sizeof(OSCfg_TmrTaskStk);
   \                     OSCfg_TmrTaskStkSizeRAM:
   \   00000000   0x00000200         DC32 512

   \                                 In section .rodata, align 2, keep-with-next
    173          OS_OBJ_QTY     const  OSCfg_TmrWheelSize         = (OS_OBJ_QTY  )OS_CFG_TMR_WHEEL_SIZE;
   \                     OSCfg_TmrWheelSize:
   \   00000000   0x0011             DC16 17

   \                                 In section .rodata, align 4, keep-with-next
    174          CPU_INT32U     const  OSCfg_TmrWheelSizeRAM      = (CPU_INT32U  )sizeof(OSCfg_TmrWheel);
   \                     OSCfg_TmrWheelSizeRAM:
   \   00000000   0x00000088         DC32 136
    175          #else
    176          OS_PRIO        const  OSCfg_TmrTaskPrio          = (OS_PRIO     )0;
    177          OS_RATE_HZ     const  OSCfg_TmrTaskRate_Hz       = (OS_RATE_HZ  )0;
    178          CPU_STK      * const  OSCfg_TmrTaskStkBasePtr    = (CPU_STK    *)0;
    179          CPU_STK_SIZE   const  OSCfg_TmrTaskStkLimit      = (CPU_STK_SIZE)0;
    180          CPU_STK_SIZE   const  OSCfg_TmrTaskStkSize       = (CPU_STK_SIZE)0;
    181          CPU_INT32U     const  OSCfg_TmrTaskStkSizeRAM    = (CPU_INT32U  )0;
    182          OS_OBJ_QTY     const  OSCfg_TmrWheelSize         = (OS_OBJ_QTY  )0;
    183          CPU_INT32U     const  OSCfg_TmrWheelSizeRAM      = (CPU_INT32U  )0;
    184          #endif
    185          
    186          
    187          /*$PAGE*/
    188          /*
    189          ************************************************************************************************************************
    190          *                                         TOTAL SIZE OF APPLICATION CONFIGURATION
    191          ************************************************************************************************************************
    192          */
    193          

   \                                 In section .rodata, align 4, keep-with-next
    194          CPU_INT32U     const  OSCfg_DataSizeRAM          = sizeof(OSCfg_IdleTaskStk)
   \                     OSCfg_DataSizeRAM:
   \   00000000   0x00001E90         DC32 7824
    195          
    196          #if (OS_CFG_ISR_POST_DEFERRED_EN > 0u)
    197                                                           + sizeof(OSCfg_IntQ)
    198                                                           + sizeof(OSCfg_IntQTaskStk)
    199          #endif
    200          
    201          #if (OS_MSG_EN > 0u)
    202                                                           + sizeof(OSCfg_MsgPool)
    203          #endif
    204          
    205          #if (OS_CFG_STAT_TASK_EN > 0u)
    206                                                           + sizeof(OSCfg_StatTaskStk)
    207          #endif
    208          
    209          #if (OS_CFG_TMR_EN > 0u)
    210                                                           + sizeof(OSCfg_TmrTaskStk)
    211                                                           + sizeof(OSCfg_TmrWheel)
    212          #endif
    213          
    214          #if (OS_CFG_ISR_STK_SIZE > 0u)
    215                                                           + sizeof(OSCfg_ISRStk)
    216          #endif
    217                                                           + sizeof(OSCfg_TickTaskStk)
    218                                                           + sizeof(OSCfg_TickWheel);
    219          
    220          /*$PAGE*/
    221          /*
    222          ************************************************************************************************************************
    223          *                                             OS CONFIGURATION INITIALIZATION
    224          *
    225          * Description: This function is used to make sure that debug variables that are unused in the application are not
    226          *              optimized away.  This function might not be necessary for all compilers.  In this case, you should simply
    227          *              DELETE the code in this function while still leaving the declaration of the function itself.
    228          *
    229          * Arguments  : none
    230          *
    231          * Returns    : none
    232          *
    233          * Note(s)    : (1) This code doesn't do anything, it simply prevents the compiler from optimizing out the 'const'
    234          *                  variables which are declared in this file.
    235          *              (2) You may decide to 'compile out' the code (by using #if 0/#endif) INSIDE the function if your compiler
    236          *                  DOES NOT optimize out the 'const' variables above.
    237          ************************************************************************************************************************
    238          */
    239          

   \                                 In section .text, align 2, keep-with-next
    240          void  OSCfg_Init (void)
    241          {
    242              (void)&OSCfg_DataSizeRAM;
    243          
    244              (void)&OSCfg_IdleTaskStkBasePtr;
    245              (void)&OSCfg_IdleTaskStkLimit;
    246              (void)&OSCfg_IdleTaskStkSize;
    247              (void)&OSCfg_IdleTaskStkSizeRAM;
    248          
    249          #if (OS_CFG_ISR_POST_DEFERRED_EN > 0u)
    250              (void)&OSCfg_IntQBasePtr;
    251              (void)&OSCfg_IntQSize;
    252              (void)&OSCfg_IntQSizeRAM;
    253              (void)&OSCfg_IntQTaskStkBasePtr;
    254              (void)&OSCfg_IntQTaskStkLimit;
    255              (void)&OSCfg_IntQTaskStkSize;
    256              (void)&OSCfg_IntQTaskStkSizeRAM;
    257          #endif
    258          
    259              (void)&OSCfg_ISRStkBasePtr;
    260              (void)&OSCfg_ISRStkSize;
    261              (void)&OSCfg_ISRStkSizeRAM;
    262          
    263          #if (OS_MSG_EN > 0u)
    264              (void)&OSCfg_MsgPoolSize;
    265              (void)&OSCfg_MsgPoolSizeRAM;
    266              (void)&OSCfg_MsgPoolBasePtr;
    267          #endif
    268          
    269          #if (OS_CFG_STAT_TASK_EN > 0u)
    270              (void)&OSCfg_StatTaskPrio;
    271              (void)&OSCfg_StatTaskRate_Hz;
    272              (void)&OSCfg_StatTaskStkBasePtr;
    273              (void)&OSCfg_StatTaskStkLimit;
    274              (void)&OSCfg_StatTaskStkSize;
    275              (void)&OSCfg_StatTaskStkSizeRAM;
    276          #endif
    277          
    278              (void)&OSCfg_StkSizeMin;
    279          
    280              (void)&OSCfg_TickRate_Hz;
    281              (void)&OSCfg_TickTaskPrio;
    282              (void)&OSCfg_TickTaskStkBasePtr;
    283              (void)&OSCfg_TickTaskStkLimit;
    284              (void)&OSCfg_TickTaskStkSize;
    285              (void)&OSCfg_TickTaskStkSizeRAM;
    286              (void)&OSCfg_TickWheelSize;
    287              (void)&OSCfg_TickWheelSizeRAM;
    288          
    289          #if (OS_CFG_TMR_EN > 0u)
    290              (void)&OSCfg_TmrTaskPrio;
    291              (void)&OSCfg_TmrTaskRate_Hz;
    292              (void)&OSCfg_TmrTaskStkBasePtr;
    293              (void)&OSCfg_TmrTaskStkLimit;
    294              (void)&OSCfg_TmrTaskStkSize;
    295              (void)&OSCfg_TmrTaskStkSizeRAM;
    296              (void)&OSCfg_TmrWheelSize;
    297              (void)&OSCfg_TmrWheelSizeRAM;
    298          #endif
    299          }
   \                     OSCfg_Init: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   OSCfg_Init


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  OSCfg_DataSizeRAM
     512  OSCfg_ISRStk
       4  OSCfg_ISRStkBasePtr
       4  OSCfg_ISRStkSize
       4  OSCfg_ISRStkSizeRAM
     256  OSCfg_IdleTaskStk
       4  OSCfg_IdleTaskStkBasePtr
       4  OSCfg_IdleTaskStkLimit
       4  OSCfg_IdleTaskStkSize
       4  OSCfg_IdleTaskStkSizeRAM
       2  OSCfg_Init
    3200  OSCfg_IntQ
       4  OSCfg_IntQBasePtr
       2  OSCfg_IntQSize
       4  OSCfg_IntQSizeRAM
     512  OSCfg_IntQTaskStk
       4  OSCfg_IntQTaskStkBasePtr
       4  OSCfg_IntQTaskStkLimit
       4  OSCfg_IntQTaskStkSize
       4  OSCfg_IntQTaskStkSizeRAM
    2048  OSCfg_MsgPool
       4  OSCfg_MsgPoolBasePtr
       2  OSCfg_MsgPoolSize
       4  OSCfg_MsgPoolSizeRAM
       1  OSCfg_StatTaskPrio
       4  OSCfg_StatTaskRate_Hz
       4  OSCfg_StatTaskStkBasePtr
       4  OSCfg_StatTaskStkLimit
       4  OSCfg_StatTaskStkSize
       4  OSCfg_StatTaskStkSizeRAM
       4  OSCfg_StkSizeMin
       4  OSCfg_TickRate_Hz
       1  OSCfg_TickTaskPrio
     512  OSCfg_TickTaskStk
       4  OSCfg_TickTaskStkBasePtr
       4  OSCfg_TickTaskStkLimit
       4  OSCfg_TickTaskStkSize
       4  OSCfg_TickTaskStkSizeRAM
     136  OSCfg_TickWheel
       2  OSCfg_TickWheelSize
       4  OSCfg_TickWheelSizeRAM
       1  OSCfg_TmrTaskPrio
       4  OSCfg_TmrTaskRate_Hz
     512  OSCfg_TmrTaskStk
       4  OSCfg_TmrTaskStkBasePtr
       4  OSCfg_TmrTaskStkLimit
       4  OSCfg_TmrTaskStkSize
       4  OSCfg_TmrTaskStkSizeRAM
     136  OSCfg_TmrWheel
       2  OSCfg_TmrWheelSize
       4  OSCfg_TmrWheelSizeRAM

 
 7 824 bytes in section .bss
   147 bytes in section .rodata
     2 bytes in section .text
 
     2 bytes of CODE  memory
   147 bytes of CONST memory
 7 824 bytes of DATA  memory

Errors: none
Warnings: none

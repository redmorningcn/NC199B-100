###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       23/Nov/2017  13:36:20
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  F:\iar\NC199B-100\Library\Source\BSP\Driver\bsp_IIC.c
#    Command line =  
#        F:\iar\NC199B-100\Library\Source\BSP\Driver\bsp_IIC.c -D
#        USE_STDPERIPH_DRIVER -D _STM32F10X_HD -D STM32F10X_CL -D DEBUG -D
#        STM32F103RC -D STM32_FLASH_SIZE=256 -D HSE_VALUE=25000000 -lCN
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\List\
#        -o
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        F:\iar\NC199B-100\Library\Project\IAR\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\User\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\AES\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Config\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\OS\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\User\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Source\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Port\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\OS\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Config\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Protocol\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Iap\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Driver\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\IAR\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\uCOS-III\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\CMSIS\CM3\CoreSupport\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\CMSIS\CM3\DeviceSupport\ST\STM32F10x\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\STM32F10x_StdPeriph_Driver\inc\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-CPU\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-CPU\ARM-Cortex-M3\IAR\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-LIB\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\OSAL\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\OSAL\OS\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\OS\uCOS-III\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\Source\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\Source\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\FatFs\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\FatFs\option\ -Om
#        --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\List\bsp_IIC.lst
#    Object file  =  
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\Obj\bsp_IIC.o
#
###############################################################################

F:\iar\NC199B-100\Library\Source\BSP\Driver\bsp_IIC.c
      1          /*******************************************************************************
      2           *   Filename:      bsp_IIC.c
      3           *   Revised:       $Date: 2017-05-15$
      4           *   Revision:      $
      5           *   Writer:	    redmorningcn.
      6           *
      7           *   Description:
      8           *   Notes:
      9           *     			E-mail:redmorningcn@qq.com
     10           *
     11           *   All copyrights reserved to redmorningcn.
     12           *
     13           *******************************************************************************/
     14          #include <includes.h>
     15          #include <bsp_IIC.h>
     16          
     17          
     18          #define     SCL     	407		//PE7
     19          #define     SDA         408		//PE8
     20          
     21          
     22          #define FALSE              1
     23          #define TRUE               0
     24          #define Delay_Factor       5                                        		//延时因子
     25          
     26          
     27          
     28          /*******************************************************************************
     29          * Function Name  : I2C_delay
     30          * Description    : 延时程序，i决定延时时间
     31          * Input          : None
     32          * Output         : None
     33          * Return         : None
     34          ****************************************************************************** */

   \                                 In section .text, align 2, keep-with-next
     35          void I2C_delay(void)
     36          {
     37          	uint8_t i = Delay_Factor; 
   \                     I2C_delay: (+1)
   \   00000000   0x2005             MOVS     R0,#+5
   \   00000002   0xE000             B.N      ??I2C_delay_0
     38          	while(i) 
     39          	{ 
     40          		i--; 
   \                     ??I2C_delay_1: (+1)
   \   00000004   0x1E40             SUBS     R0,R0,#+1
     41          	} 
   \                     ??I2C_delay_0: (+1)
   \   00000006   0xB2C0             UXTB     R0,R0
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD1FB             BNE.N    ??I2C_delay_1
     42          //    #if DEBUG_MODEL_DISENABLE > 0 
     43          //        WDT_Feed();                                               /* Determine CPU capacity                               */
     44          //    #endif
     45          }
   \   0000000C   0x4770             BX       LR               ;; return
     46          
     47          //------------------------------------------------------------------------
     48          //  名  称 ：		GPIO_Fram_Init
     49          //  功  能 :    		初始化铁电的 IO口，为通用IO 口
     50          // 入口参数：	无
     51          // 出口参数：	无
     52          //------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
     53          void	GPIO_Fram_Init(void)
     54          {
   \                     GPIO_Fram_Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
     55          	GPIO_PinselConfig(SCL,0);
   \   00000002   0xF240 0x1497      MOVW     R4,#+407
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x4620             MOV      R0,R4
   \   0000000A   0x.... 0x....      BL       GPIO_PinselConfig
     56          	GPIO_PinselConfig(SCL,0);
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0x4620             MOV      R0,R4
   \   00000012   0x.... 0x....      BL       GPIO_PinselConfig
     57          	GPIO_PinselConfig(SDA,0);
   \   00000016   0x2100             MOVS     R1,#+0
   \   00000018   0xF44F 0x70CC      MOV      R0,#+408
   \   0000001C   0x.... 0x....      BL       GPIO_PinselConfig
     58          	GPIO_PinselConfig(SDA,0);
   \   00000020   0x2100             MOVS     R1,#+0
   \   00000022   0xF44F 0x70CC      MOV      R0,#+408
   \   00000026   0xE8BD 0x4010      POP      {R4,LR}
   \   0000002A   0x.... 0x....      B.W      GPIO_PinselConfig
     59          }
     60          
     61          
     62          //------------------------------------------------------------------------
     63          //  名  称 ：void WriteSCL( uint8 temp )
     64          //  功  能 ：设置 SCL
     65          // 入口参数：无
     66          // 出口参数：无
     67          //------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
     68          void WriteSCL(uint8 temp)
     69          {	
   \                     WriteSCL: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     70          	if(temp)		
   \   00000002   0xF240 0x1297      MOVW     R2,#+407
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD004             BEQ.N    ??WriteSCL_0
     71          	{
     72          		GPIO_SetOrClearValue(SCL,1);
   \   0000000A   0x2101             MOVS     R1,#+1
   \   0000000C   0x4610             MOV      R0,R2
   \   0000000E   0x.... 0x....      BL       GPIO_SetOrClearValue
   \   00000012   0xE003             B.N      ??WriteSCL_1
     73          	}
     74          	else
     75          	{
     76          		GPIO_SetOrClearValue(SCL,0);		
   \                     ??WriteSCL_0: (+1)
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x4610             MOV      R0,R2
   \   00000018   0x.... 0x....      BL       GPIO_SetOrClearValue
     77          	}	
     78          
     79          	I2C_delay();
   \                     ??WriteSCL_1: (+1)
   \   0000001C   0xE8BD 0x4001      POP      {R0,LR}
   \   00000020   0x....             B.N      I2C_delay
     80          }
     81          
     82          //------------------------------------------------------------------------
     83          //  名  称 ：uint8 ReadSCL(void)
     84          //  功  能 ：读取 SCL 的值
     85          // 入口参数：无
     86          // 出口参数：无
     87          //------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
     88          uint8 ReadSCL(void)
     89          {
   \                     ReadSCL: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
     90             uint8    temp;
     91              temp = 	GPIO_ReadIoVal(SCL);
   \   00000002   0xF240 0x1097      MOVW     R0,#+407
   \   00000006   0x.... 0x....      BL       GPIO_ReadIoVal
   \   0000000A   0x4604             MOV      R4,R0
     92              I2C_delay();
   \   0000000C   0x.... 0x....      BL       I2C_delay
     93              return temp;
   \   00000010   0x4620             MOV      R0,R4
   \   00000012   0xBD10             POP      {R4,PC}          ;; return
     94          }
     95          
     96          //------------------------------------------------------------------------
     97          //  名  称 ：void WriteSDA( uint8 temp )
     98          //  功  能 ：设置 SDA
     99          // 入口参数：无
    100          // 出口参数：无
    101          //------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    102          void WriteSDA(uint8 temp)
    103          {
   \                     WriteSDA: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    104          	if(temp)		
   \   00000002   0x2800             CMP      R0,#+0
   \   00000004   0xD005             BEQ.N    ??WriteSDA_0
    105          	{
    106          		GPIO_SetOrClearValue(SDA,1);
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0xF44F 0x70CC      MOV      R0,#+408
   \   0000000C   0x.... 0x....      BL       GPIO_SetOrClearValue
   \   00000010   0xE004             B.N      ??WriteSDA_1
    107          	}
    108          	else
    109          	{
    110          		GPIO_SetOrClearValue(SDA,0);		
   \                     ??WriteSDA_0: (+1)
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0xF44F 0x70CC      MOV      R0,#+408
   \   00000018   0x.... 0x....      BL       GPIO_SetOrClearValue
    111          	}	
    112          	I2C_delay();
   \                     ??WriteSDA_1: (+1)
   \   0000001C   0xE8BD 0x4001      POP      {R0,LR}
   \   00000020   0x....             B.N      I2C_delay
    113          }
    114          
    115          //------------------------------------------------------------------------
    116          //  名  称 ：uint8 ReadSDA(void)
    117          //  功  能 ：读取 SDA 的值
    118          // 入口参数：无
    119          // 出口参数：无
    120          //------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    121          uint8 ReadSDA(void)
    122          {
   \                     ReadSDA: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    123              uint8 temp;
    124              
    125              temp = 	GPIO_ReadIoVal(SDA);
   \   00000002   0xF44F 0x70CC      MOV      R0,#+408
   \   00000006   0x.... 0x....      BL       GPIO_ReadIoVal
   \   0000000A   0x4604             MOV      R4,R0
    126              I2C_delay();
   \   0000000C   0x.... 0x....      BL       I2C_delay
    127          
    128              return temp;
   \   00000010   0x4620             MOV      R0,R4
   \   00000012   0xBD10             POP      {R4,PC}          ;; return
    129          }
    130          
    131          //------------------------------------------------------------
    132          //函数名称:         StartI2C()
    133          //功    能:         I2C总线开始条件
    134          //入口参数:         无
    135          //出口参数:         无
    136          //说明：            I2C总线的开始条件：
    137          //                  SCL高电平时SDA的下降沿
    138          //------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    139          void StartI2C(void)
    140          {
   \                     StartI2C: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    141              WriteSCL(0);                                // SCL=0;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x.... 0x....      BL       WriteSCL
    142              WriteSDA(1);                                //SDA=1;
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0x.... 0x....      BL       WriteSDA
    143              WriteSCL(1);                                //SCL=1;
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0x.... 0x....      BL       WriteSCL
    144              WriteSDA(0);                                //SDA=0;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x.... 0x....      BL       WriteSDA
    145              WriteSCL(0);                                // SCL=0;
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0xE8BD 0x4002      POP      {R1,LR}
   \   00000020   0x....             B.N      WriteSCL
    146          }
    147          
    148          //---------------------------------------------------------------
    149          //函数名称:         StopI2C()
    150          //功    能:         I2C总线结束条件
    151          //入口参数:         无
    152          //出口参数:         无
    153          //说明：            I2C总线结束条件：SCL为高电平时SDA的上升沿
    154          //--------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    155          void StopI2C(void)
    156          {
   \                     StopI2C: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    157              WriteSCL(0);                                // SCL=0;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x.... 0x....      BL       WriteSCL
    158              WriteSDA(0);                                //SDA=0;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x.... 0x....      BL       WriteSDA
    159              WriteSCL(1);                                //SCL=1;
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0x.... 0x....      BL       WriteSCL
    160              WriteSDA(1);                                //SDA=1;
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x.... 0x....      BL       WriteSDA
    161              WriteSCL(0);                                //SCL=0;
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0xE8BD 0x4002      POP      {R1,LR}
   \   00000020   0x....             B.N      WriteSCL
    162          }
    163          
    164          //-------------------------------------------------------------------------------
    165          //函数名称:         MasterAckI2C()
    166          //功    能:         主机接收应答，在接收到1字节数据后，返回应答，告诉从机接收完成
    167          //入口参数:         无
    168          //出口参数:         无
    169          //说明：            I2C总线应答：读完一个字节后将SDA线拉低，即应答0
    170          //---------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    171          void MasterAckI2C(void)
    172          {
   \                     MasterAckI2C: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    173              WriteSCL(0);                                // SCL=0;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x.... 0x....      BL       WriteSCL
    174              WriteSDA(0);                               //SDA=0;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x.... 0x....      BL       WriteSDA
    175              WriteSCL(1);                                //SCL=1;
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0x.... 0x....      BL       WriteSCL
    176              WriteSCL(0);                                 //SCL=0;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x.... 0x....      BL       WriteSCL
    177              WriteSDA(0);                                //SDA=0;
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0xE8BD 0x4002      POP      {R1,LR}
   \   00000020   0x....             B.N      WriteSDA
    178          }
    179          
    180          //-----------------------------------------------------------------------------------
    181          //函数名称:         MasterNoAckI2C()
    182          //功    能:         主机接收应答，告诉通信从机接收完成
    183          //入口参数:         无
    184          //出口参数:         无
    185          //说明：            I2C总线应答：
    186          //                  读完所要求的字节数据后将SDA线拉高，为结束IIC总线操作做准备
    187          //-------------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    188          void MasterNoAckI2C(void)
    189          {
   \                     MasterNoAckI2C: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    190              WriteSCL(0);                                    // SCL=0;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x.... 0x....      BL       WriteSCL
    191              WriteSDA(1);                                    //SDA=1;
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0x.... 0x....      BL       WriteSDA
    192              WriteSCL(1);                                    //SCL=1;
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0x.... 0x....      BL       WriteSCL
    193              WriteSCL(0);                                    //SCL=0;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x.... 0x....      BL       WriteSCL
    194              WriteSDA(0);                                    //SDA=0;
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0xE8BD 0x4002      POP      {R1,LR}
   \   00000020   0x....             B.N      WriteSDA
    195          }
    196          
    197          //------------------------------------------------------------------------------------
    198          //函数名称:         CheckSlaveAckI2C()
    199          //功    能:         读I2C从机应答
    200          //入口参数:         无
    201          //出口参数:         ackflag
    202          //                  如果从机产生应答，则返回0，
    203          //                  从机没有产生应答,否则返回1
    204          //说明：            检查I2C器件(从机)应答情况,应答返回1,否则为零
    205          //these waw a bug befor 2008/05/17.
    206          //------------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    207          uint8 CheckSlaveAckI2C(void)
    208          {
   \                     CheckSlaveAckI2C: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    209              uint8 ackflag;                                  //清除应答标志;
    210              
    211              ackflag = ReadSDA();
   \   00000002   0x.... 0x....      BL       ReadSDA
   \   00000006   0x4604             MOV      R4,R0
    212              WriteSCL(1);                                    //SCL=1;
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0x.... 0x....      BL       WriteSCL
    213              WriteSCL(0);                                    //SCL=0;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x.... 0x....      BL       WriteSCL
    214              
    215              return ackflag;
   \   00000014   0x4620             MOV      R0,R4
   \   00000016   0xBD10             POP      {R4,PC}          ;; return
    216          }
    217          
    218          //------------------------------------------------------------------------------------
    219          //函数名称:         WriteByteWithI2C()
    220          //功    能:         	主机对I2C总线写1操作
    221          //入口参数:         Data:要写出的数据
    222          //出口参数:         无
    223          //说明：            	写一字节数据Data
    224          //------------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    225          void WriteByteWithI2C(uint8 Data)  
    226          {
   \                     WriteByteWithI2C: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    227              uint8 i;
    228              for(i=0;i<8;i++)
   \   00000004   0x2500             MOVS     R5,#+0
   \   00000006   0xE00D             B.N      ??WriteByteWithI2C_0
    229              {
    230                  if(Data & 0x80)                             //传输位从高位到低位,先传最高位 
    231                  {
    232                      WriteSDA(1);                            //SDA=1;
    233                      WriteSCL(1);                            //SCL=1;
    234                  }
    235                  else
    236                  {  
    237                      WriteSDA(0);                            //SDA=0;
   \                     ??WriteByteWithI2C_1: (+1)
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x.... 0x....      BL       WriteSDA
    238                      WriteSCL(1);                            //SCL=1;
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0x.... 0x....      BL       WriteSCL
    239                  }   
    240                  WriteSCL(0);                                //SCL=0;
   \                     ??WriteByteWithI2C_2: (+1)
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x.... 0x....      BL       WriteSCL
    241                  WriteSDA(0);                                //SDA=0;
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x.... 0x....      BL       WriteSDA
    242                  Data <<= 1;                                 //数据左移             
   \   00000020   0x0064             LSLS     R4,R4,#+1
   \   00000022   0x1C6D             ADDS     R5,R5,#+1
   \                     ??WriteByteWithI2C_0: (+1)
   \   00000024   0x2D08             CMP      R5,#+8
   \   00000026   0xDA08             BGE.N    ??WriteByteWithI2C_3
   \   00000028   0x0620             LSLS     R0,R4,#+24
   \   0000002A   0xD5ED             BPL.N    ??WriteByteWithI2C_1
   \   0000002C   0x2001             MOVS     R0,#+1
   \   0000002E   0x.... 0x....      BL       WriteSDA
   \   00000032   0x2001             MOVS     R0,#+1
   \   00000034   0x.... 0x....      BL       WriteSCL
   \   00000038   0xE7EC             B.N      ??WriteByteWithI2C_2
    243              }
    244          }
   \                     ??WriteByteWithI2C_3: (+1)
   \   0000003A   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    245          
    246          //-------------------------------------------------------------------------------------------------------
    247          //函数名称:         ReadByteWithI2C()
    248          //功    能:         主机对I2C总线写1操作
    249          //入口参数:         无
    250          //出口参数:         无
    251          //说明：            读一字节数据：返回值即读的数据
    252          //--------------------------------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    253          uint8 ReadByteWithI2C(void)            
    254          {
   \                     ReadByteWithI2C: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    255              uint8 readdata=0;                           // Read_Data为读入的数据，0
   \   00000002   0x2400             MOVS     R4,#+0
    256              uint8 j;
    257              
    258              for (j=0;j<8;j++)
   \   00000004   0x4625             MOV      R5,R4
   \   00000006   0xE00D             B.N      ??ReadByteWithI2C_0
    259              {
    260                  readdata <<=1;
   \                     ??ReadByteWithI2C_1: (+1)
   \   00000008   0x0064             LSLS     R4,R4,#+1
    261          								  //数据读出，若是0则移位；若是1则与0x01或
    262                  if(ReadSDA())
   \   0000000A   0x.... 0x....      BL       ReadSDA
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD001             BEQ.N    ??ReadByteWithI2C_2
    263                  {
    264                      readdata =(readdata | 0x01);               
   \   00000012   0xF044 0x0401      ORR      R4,R4,#0x1
    265                  }
    266                  WriteSCL(1);                              //SCL=1;
   \                     ??ReadByteWithI2C_2: (+1)
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0x.... 0x....      BL       WriteSCL
    267                  WriteSCL(0);                              //SCL=0;
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x.... 0x....      BL       WriteSCL
    268              }
   \   00000022   0x1C6D             ADDS     R5,R5,#+1
   \                     ??ReadByteWithI2C_0: (+1)
   \   00000024   0x2D08             CMP      R5,#+8
   \   00000026   0xDBEF             BLT.N    ??ReadByteWithI2C_1
    269              
    270              return   readdata ;                         //返回读出的字节
   \   00000028   0x4620             MOV      R0,R4
   \   0000002A   0xB2C0             UXTB     R0,R0
   \   0000002C   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    271          }
    272          
    273          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   CheckSlaveAckI2C
         8   -> ReadSDA
         8   -> WriteSCL
       8   GPIO_Fram_Init
         0   -> GPIO_PinselConfig
         8   -> GPIO_PinselConfig
       0   I2C_delay
       8   MasterAckI2C
         8   -> WriteSCL
         0   -> WriteSDA
         8   -> WriteSDA
       8   MasterNoAckI2C
         8   -> WriteSCL
         0   -> WriteSDA
         8   -> WriteSDA
      16   ReadByteWithI2C
        16   -> ReadSDA
        16   -> WriteSCL
       8   ReadSCL
         8   -> GPIO_ReadIoVal
         8   -> I2C_delay
       8   ReadSDA
         8   -> GPIO_ReadIoVal
         8   -> I2C_delay
       8   StartI2C
         0   -> WriteSCL
         8   -> WriteSCL
         8   -> WriteSDA
       8   StopI2C
         0   -> WriteSCL
         8   -> WriteSCL
         8   -> WriteSDA
      16   WriteByteWithI2C
        16   -> WriteSCL
        16   -> WriteSDA
       8   WriteSCL
         8   -> GPIO_SetOrClearValue
         0   -> I2C_delay
       8   WriteSDA
         8   -> GPIO_SetOrClearValue
         0   -> I2C_delay


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      24  CheckSlaveAckI2C
      46  GPIO_Fram_Init
      14  I2C_delay
      34  MasterAckI2C
      34  MasterNoAckI2C
      46  ReadByteWithI2C
      20  ReadSCL
      20  ReadSDA
      34  StartI2C
      34  StopI2C
      60  WriteByteWithI2C
      34  WriteSCL
      34  WriteSDA

 
 434 bytes in section .text
 
 434 bytes of CODE memory

Errors: none
Warnings: 2

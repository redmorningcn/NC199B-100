###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       30/Nov/2017  10:06:07
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\iar\NC199B-100\Library\Source\APP\Tasks\app_task_osal_tmr.c
#    Command line =  
#        F:\iar\NC199B-100\Library\Source\APP\Tasks\app_task_osal_tmr.c -D
#        USE_STDPERIPH_DRIVER -D _STM32F10X_HD -D STM32F10X_CL -D DEBUG -D
#        STM32F103RC -D STM32_FLASH_SIZE=256 -D HSE_VALUE=25000000 -lCN
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\List\
#        -o
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        F:\iar\NC199B-100\Library\Project\IAR\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\User\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\AES\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Config\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\OS\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\User\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Source\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Port\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\OS\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Config\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Protocol\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Iap\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Driver\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\IAR\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\uCOS-III\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\CMSIS\CM3\CoreSupport\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\CMSIS\CM3\DeviceSupport\ST\STM32F10x\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\STM32F10x_StdPeriph_Driver\inc\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-CPU\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-CPU\ARM-Cortex-M3\IAR\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-LIB\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\OSAL\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\OSAL\OS\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\OS\uCOS-III\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\Source\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\Source\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\FatFs\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\FatFs\option\ -Om
#        --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\List\app_task_osal_tmr.lst
#    Object file  =  
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\Obj\app_task_osal_tmr.o
#
###############################################################################

F:\iar\NC199B-100\Library\Source\APP\Tasks\app_task_osal_tmr.c
      1          /*******************************************************************************
      2           *   Filename:       app_task_tmr.c
      3           *   Revised:        All copyrights reserved to wumingshen.
      4           *   Revision:       v1.0
      5           *   Writer:	     wumingshen.
      6           *
      7           *   Description:    双击选中 tmr 按 Ctrl + H, 钩选 Match the case, Replace with
      8           *                   输入您要的名字，点击 Replace All
      9           *                   双击选中 Tmr 按 Ctrl + H, 钩选 Match the case, Replace with
     10           *                   输入您要的名字，点击 Replace All
     11           *                   双击选中 TMR 按 Ctrl + H, 钩选 Match the case, Replace with
     12           *                   输入您要的名字，点击 Replace All
     13           *                   在 app_cfg.h 中指定本任务的 优先级  （ APP_TASK_TMR_PRIO ）
     14           *                                            和 任务堆栈（ APP_TASK_TMR_STK_SIZE ）大小
     15           *                   在 app.h 中声明本任务的     创建函数（ void  App_TaskTmrCreate(void) ）
     16           *                                            和 看门狗标志位 （ WDTFLAG_Tmr ）
     17           *
     18           *   Notes:
     19           *     				E-mail: shenchangwei945@163.com
     20           *
     21           *******************************************************************************/
     22          
     23          /*******************************************************************************
     24           * INCLUDES
     25           */
     26          #define  SNL_APP_SOURCE
     27          #include <includes.h>
     28          //#include "DS3231.h"
     29          #include "app.h"
     30          #include "bsp_timer.h"
     31          #include "os_cfg_app.h"
     32          #include <osal_timer.h>
     33          
     34          
     35          #ifdef VSC_INCLUDE_SOURCE_FILE_NAMES
     36          const  CPU_CHAR  *app_task_tmr__c = "$Id: $";
     37          #endif
     38          
     39          #define APP_TASK_TMR_EN     DEF_ENABLED
     40          #if APP_TASK_TMR_EN == DEF_ENABLED
     41          /*******************************************************************************
     42           * CONSTANTS
     43           */
     44          //#define CYCLE_TIME_TICKS            (OS_CFG_TICK_RATE_HZ * 1u)
     45          #define CYCLE_SAMPLE_MSEC_TICKS     (OS_CFG_TICK_RATE_HZ / 5)
     46          #define CYCLE_SAMPLE_SEC_TICKS      (OS_CFG_TICK_RATE_HZ * 5u)
     47          #define CYCLE_SAMPLE_MIN_TICKS      (OS_CFG_TICK_RATE_HZ * 60u)
     48          #define CYCLE_SAMPLE_TICKS          (OS_CFG_TICK_RATE_HZ * 2u)
     49               
     50          /*******************************************************************************
     51           * MACROS
     52           */
     53          
     54          /*******************************************************************************
     55           * TYPEDEFS
     56           */
     57          
     58          /*******************************************************************************
     59           * LOCAL VARIABLES
     60           */
     61          
     62          #if ( OSAL_EN == DEF_ENABLED )
     63          #else
     64          /***********************************************
     65          * 描述： 任务控制块（TCB）
     66          */
     67          static  OS_TCB   AppTaskTmrTCB;
     68          
     69          /***********************************************
     70          * 描述： 任务堆栈（STACKS）
     71          */
     72          static  CPU_STK  AppTaskTmrStk[ APP_TASK_TMR_STK_SIZE ];
     73          
     74          #endif
     75          /*******************************************************************************
     76           * GLOBAL VARIABLES
     77           */
     78          
     79          /*******************************************************************************
     80           * LOCAL FUNCTIONS
     81           */
     82          
     83          /*******************************************************************************
     84           * GLOBAL FUNCTIONS
     85           */
     86          
     87          /*******************************************************************************
     88           * EXTERN VARIABLES
     89           */
     90          
     91          /*******************************************************************************/
     92          
     93          /*******************************************************************************
     94           * 名    称： AppTaskTmr
     95           * 功    能： 控制任务
     96           * 入口参数： p_arg - 由任务创建函数传入
     97           * 出口参数： 无
     98           * 作　 　者： wumingshen.
     99           * 创建日期： 2015-02-05
    100           * 修    改：
    101           * 修改日期：
    102           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    103          osalEvt  TaskTmrEvtProcess(osalTid task_id, osalEvt task_event)
    104          {
   \                     TaskTmrEvtProcess: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x460C             MOV      R4,R1
    105              OS_ERR      err;
    106          //    static BOOL     chang_flag = FALSE;
    107              
    108              /***********************************************
    109              * 描述： 本任务看门狗标志置位
    110              */
    111              OS_FlagPost ((OS_FLAG_GRP *)&WdtFlagGRP,
    112                           (OS_FLAGS     ) WDT_FLAG_TMR,
    113                           (OS_OPT       ) OS_OPT_POST_FLAG_SET,
    114                           (CPU_TS       ) 0,
    115                           (OS_ERR      *) &err);    
   \   00000004   0xA801             ADD      R0,SP,#+4
   \   00000006   0x9000             STR      R0,[SP, #+0]
   \   00000008   0x2300             MOVS     R3,#+0
   \   0000000A   0x461A             MOV      R2,R3
   \   0000000C   0x2104             MOVS     R1,#+4
   \   0000000E   0x....             LDR.N    R0,??DataTable1
   \   00000010   0x.... 0x....      BL       OS_FlagPost
    116            
    117              /***************************************************************************
    118              * 描述： 统计模块和测量某块通讯定时器，统计装置定时发送数据查询指令，超时发送
    119              COMM_EVT_FLAG_MTR_TIMEOUT 标示。定时500ms通讯一次。
    120              */
    121              if( task_event & OS_EVT_TMR_MTR ) {     
   \   00000014   0x07E0             LSLS     R0,R4,#+31
   \   00000016   0xD510             BPL.N    ??TaskTmrEvtProcess_0
    122                  OS_FlagPost(( OS_FLAG_GRP *)&Ctrl.Os.CommEvtFlagGrp,
    123                              ( OS_FLAGS     ) COMM_EVT_FLAG_MTR_TIMEOUT,
    124                              ( OS_OPT       ) OS_OPT_POST_FLAG_SET,
    125                              ( CPU_TS       ) 0,
    126                              ( OS_ERR      *) &err);        
   \   00000018   0xA801             ADD      R0,SP,#+4
   \   0000001A   0x9000             STR      R0,[SP, #+0]
   \   0000001C   0x2300             MOVS     R3,#+0
   \   0000001E   0x461A             MOV      R2,R3
   \   00000020   0x2108             MOVS     R1,#+8
   \   00000022   0x....             LDR.N    R0,??DataTable1_1
   \   00000024   0x.... 0x....      BL       OS_FlagPost
    127          
    128          
    129                     osal_start_timerEx(  OS_TASK_ID_TMR,     //计数器重新开始
    130                                  OS_EVT_TMR_MTR,
    131                                  OS_TICKS_PER_SEC);        
   \   00000028   0xF44F 0x727A      MOV      R2,#+1000
   \   0000002C   0x2101             MOVS     R1,#+1
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x.... 0x....      BL       osal_start_timerEx
    132                      
    133                  return ( task_event ^ OS_EVT_TMR_MTR );
   \   00000034   0xF084 0x0001      EOR      R0,R4,#0x1
   \   00000038   0xBD16             POP      {R1,R2,R4,PC}
    134              }
    135              
    136              /***************************************************************************
    137              * 描述： 统计模块和无线发送模块通讯定时器，
    138              COMM_EVT_FLAG_DTU_TIMEOUT 标示。
    139              */
    140              if( task_event & OS_EVT_TMR_DTU ) { 
   \                     ??TaskTmrEvtProcess_0: (+1)
   \   0000003A   0x07A0             LSLS     R0,R4,#+30
   \   0000003C   0xD510             BPL.N    ??TaskTmrEvtProcess_1
    141                  OS_FlagPost(( OS_FLAG_GRP *)&Ctrl.Os.CommEvtFlagGrp,
    142                              ( OS_FLAGS     ) COMM_EVT_FLAG_DTU_TIMEOUT,
    143                              ( OS_OPT       ) OS_OPT_POST_FLAG_SET,
    144                              ( CPU_TS       ) 0,
    145                              ( OS_ERR      *) &err);  
   \   0000003E   0xA801             ADD      R0,SP,#+4
   \   00000040   0x9000             STR      R0,[SP, #+0]
   \   00000042   0x2300             MOVS     R3,#+0
   \   00000044   0x461A             MOV      R2,R3
   \   00000046   0x2110             MOVS     R1,#+16
   \   00000048   0x....             LDR.N    R0,??DataTable1_1
   \   0000004A   0x.... 0x....      BL       OS_FlagPost
    146              
    147                   osal_start_timerEx(  OS_TASK_ID_TMR,     //计数器重新开始
    148                                        OS_EVT_TMR_DTU,
    149                                        OS_TICKS_PER_SEC*15); 
   \   0000004E   0xF643 0x2298      MOVW     R2,#+15000
   \   00000052   0x2102             MOVS     R1,#+2
   \   00000054   0x2000             MOVS     R0,#+0
   \   00000056   0x.... 0x....      BL       osal_start_timerEx
    150                  
    151                 return ( task_event ^ OS_EVT_TMR_DTU );
   \   0000005A   0xF084 0x0002      EOR      R0,R4,#0x2
   \   0000005E   0xBD16             POP      {R1,R2,R4,PC}
    152              }
    153              
    154              /***************************************************************************
    155              * 描述： 统计模块和无线发送模块通讯定时器，
    156              COMM_EVT_FLAG_DTU_TIMEOUT 标示。
    157              */
    158              if( task_event & OS_EVT_TMR_OTR ) {        
   \                     ??TaskTmrEvtProcess_1: (+1)
   \   00000060   0x0720             LSLS     R0,R4,#+28
   \   00000062   0xD510             BPL.N    ??TaskTmrEvtProcess_2
    159                  OS_FlagPost(( OS_FLAG_GRP *)&Ctrl.Os.CommEvtFlagGrp,
    160                              ( OS_FLAGS     ) COMM_EVT_FLAG_OTR_TIMEOUT,
    161                              ( OS_OPT       ) OS_OPT_POST_FLAG_SET,
    162                              ( CPU_TS       ) 0,
    163                              ( OS_ERR      *) &err);        
   \   00000064   0xA801             ADD      R0,SP,#+4
   \   00000066   0x9000             STR      R0,[SP, #+0]
   \   00000068   0x2300             MOVS     R3,#+0
   \   0000006A   0x461A             MOV      R2,R3
   \   0000006C   0x2120             MOVS     R1,#+32
   \   0000006E   0x....             LDR.N    R0,??DataTable1_1
   \   00000070   0x.... 0x....      BL       OS_FlagPost
    164          
    165                   osal_start_timerEx(  OS_TASK_ID_TMR,     //计数器重新开始
    166                                OS_EVT_TMR_OTR,
    167                                OS_TICKS_PER_SEC*3);                             
   \   00000074   0xF640 0x32B8      MOVW     R2,#+3000
   \   00000078   0x2108             MOVS     R1,#+8
   \   0000007A   0x2000             MOVS     R0,#+0
   \   0000007C   0x.... 0x....      BL       osal_start_timerEx
    168          
    169                  return ( task_event ^ OS_EVT_TMR_OTR );
   \   00000080   0xF084 0x0008      EOR      R0,R4,#0x8
   \   00000084   0xBD16             POP      {R1,R2,R4,PC}
    170              }
    171              
    172          //    /***************************************************************************
    173          //    * 描述： 超时操作 TAX 
    174          //    COMM_EVT_FLAG_DTU_TIMEOUT 标示。
    175          //    */
    176          //    if( task_event & OS_EVT_TMR_TAX ) {            
    177          //
    178          //        OS_FlagPost(( OS_FLAG_GRP *)&Ctrl.Os.CommEvtFlagGrp,
    179          //                    ( OS_FLAGS     ) COMM_EVT_FLAG_TAX_TIMEOUT,
    180          //                    ( OS_OPT       ) OS_OPT_POST_FLAG_SET,
    181          //                    ( CPU_TS       ) 0,
    182          //                    ( OS_ERR      *) &err);        
    183          //        
    184          //        osal_start_timerEx(  OS_TASK_ID_TMR,     //计数器重新开始
    185          //                  OS_EVT_TMR_TAX,
    186          //                  OS_TICKS_PER_SEC*10);                             
    187          //
    188          //        return ( task_event ^ OS_EVT_TMR_TAX );
    189          //    }
    190          
    191              /***************************************************************************
    192              * 描述： 统计模块和无线发送模块通讯定时器，
    193              COMM_EVT_FLAG_DTU_TIMEOUT 标示。
    194              */
    195              if( task_event & OS_EVT_TMR_SEC ) {        
   \                     ??TaskTmrEvtProcess_2: (+1)
   \   00000086   0x0760             LSLS     R0,R4,#+29
   \   00000088   0xD529             BPL.N    ??TaskTmrEvtProcess_3
    196                      Ctrl.Dtu.ConnectTimeOut++;
   \   0000008A   0x....             LDR.N    R0,??DataTable1_2
   \   0000008C   0xF890 0x1441      LDRB     R1,[R0, #+1089]
   \   00000090   0xF001 0x0280      AND      R2,R1,#0x80
   \   00000094   0x1C49             ADDS     R1,R1,#+1
   \   00000096   0xF001 0x017F      AND      R1,R1,#0x7F
   \   0000009A   0x4311             ORRS     R1,R1,R2
   \   0000009C   0xF880 0x1441      STRB     R1,[R0, #+1089]
    197                      Ctrl.Mtr.ConnectTimeOut++;
   \   000000A0   0xF890 0x22E0      LDRB     R2,[R0, #+736]
   \   000000A4   0xF002 0x0380      AND      R3,R2,#0x80
   \   000000A8   0x1C52             ADDS     R2,R2,#+1
   \   000000AA   0xF002 0x027F      AND      R2,R2,#0x7F
   \   000000AE   0x431A             ORRS     R2,R2,R3
   \   000000B0   0xF880 0x22E0      STRB     R2,[R0, #+736]
    198          //            Ctrl.Otr.ConnectTimeOut++;
    199                      
    200                      if( Ctrl.Dtu.ConnectTimeOut > 1)
   \   000000B4   0xF001 0x017F      AND      R1,R1,#0x7F
   \   000000B8   0x2902             CMP      R1,#+2
   \   000000BA   0xDB01             BLT.N    ??TaskTmrEvtProcess_4
    201                          Ctrl.Dtu.ConnectFlag = 0;
   \   000000BC   0xF880 0x1441      STRB     R1,[R0, #+1089]
    202                      
    203                      if( Ctrl.Mtr.ConnectTimeOut > 1)
   \                     ??TaskTmrEvtProcess_4: (+1)
   \   000000C0   0xF002 0x017F      AND      R1,R2,#0x7F
   \   000000C4   0x2902             CMP      R1,#+2
   \   000000C6   0xDB01             BLT.N    ??TaskTmrEvtProcess_5
    204                          Ctrl.Mtr.ConnectFlag = 0;
   \   000000C8   0xF880 0x12E0      STRB     R1,[R0, #+736]
    205                      
    206          //            if( Ctrl.Otr.ConnectTimeOut > 1)
    207          //                Ctrl.Otr.ConnectFlag = 0;
    208          
    209                      osal_start_timerEx(  OS_TASK_ID_TMR,     //计数器重新开始
    210                              OS_EVT_TMR_SEC,
    211                              OS_TICKS_PER_SEC);        
   \                     ??TaskTmrEvtProcess_5: (+1)
   \   000000CC   0xF44F 0x727A      MOV      R2,#+1000
   \   000000D0   0x2104             MOVS     R1,#+4
   \   000000D2   0x2000             MOVS     R0,#+0
   \   000000D4   0x.... 0x....      BL       osal_start_timerEx
    212                      
    213                  return ( task_event ^ OS_EVT_TMR_SEC );
   \   000000D8   0xF084 0x0004      EOR      R0,R4,#0x4
   \   000000DC   0xBD16             POP      {R1,R2,R4,PC}
    214              }
    215              return 0;
   \                     ??TaskTmrEvtProcess_3: (+1)
   \   000000DE   0x2000             MOVS     R0,#+0
   \   000000E0   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    216          }
    217          
    218          /*******************************************************************************
    219           * 名    称： APP_TmrInit
    220           * 功    能： 任务初始化
    221           * 入口参数： 无
    222           * 出口参数： 无
    223           * 作　　者： wumingshen.
    224           * 创建日期： 2015-03-28
    225           * 修    改：
    226           * 修改日期：
    227           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    228          void TaskInitTmr(void)
    229          {
   \                     TaskInitTmr: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    230              /***********************************************
    231              * 描述： 初始化
    232              */    
    233              /***********************************************
    234              * 描述： 在看门狗标志组注册本任务的看门狗标志
    235              */
    236              WdtFlags |= WDT_FLAG_TMR;
   \   00000002   0x....             LDR.N    R0,??DataTable1_3
   \   00000004   0x6801             LDR      R1,[R0, #+0]
   \   00000006   0xF041 0x0104      ORR      R1,R1,#0x4
   \   0000000A   0x6001             STR      R1,[R0, #+0]
    237              /*************************************************
    238              * 描述：启动事件查询
    239              */
    240              osal_start_timerEx( OS_TASK_ID_TMR, OS_EVT_TMR_SEC,OS_TICKS_PER_SEC);   
   \   0000000C   0xF44F 0x727A      MOV      R2,#+1000
   \   00000010   0x2104             MOVS     R1,#+4
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x.... 0x....      BL       osal_start_timerEx
    241              osal_start_timerEx( OS_TASK_ID_TMR, OS_EVT_TMR_MTR,OS_TICKS_PER_SEC*1 ); 
   \   00000018   0xF44F 0x727A      MOV      R2,#+1000
   \   0000001C   0x2101             MOVS     R1,#+1
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x.... 0x....      BL       osal_start_timerEx
    242              osal_start_timerEx( OS_TASK_ID_TMR, OS_EVT_TMR_DTU,OS_TICKS_PER_SEC*2 ); 
   \   00000024   0xF44F 0x62FA      MOV      R2,#+2000
   \   00000028   0x2102             MOVS     R1,#+2
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x.... 0x....      BL       osal_start_timerEx
    243              osal_start_timerEx( OS_TASK_ID_TMR, OS_EVT_TMR_OTR,OS_TICKS_PER_SEC*10);
   \   00000030   0xF242 0x7210      MOVW     R2,#+10000
   \   00000034   0x2108             MOVS     R1,#+8
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0xE8BD 0x4008      POP      {R3,LR}
   \   0000003C   0x.... 0x....      B.W      osal_start_timerEx
    244          
    245          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     WdtFlagGRP

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x........         DC32     Ctrl+0x462

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x........         DC32     Ctrl

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x........         DC32     WdtFlags
    246          
    247          /*******************************************************************************
    248           * 				                    end of file                                *
    249           *******************************************************************************/
    250          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   TaskInitTmr
         0   -> osal_start_timerEx
         8   -> osal_start_timerEx
      16   TaskTmrEvtProcess
        16   -> OS_FlagPost
        16   -> osal_start_timerEx


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
      64  TaskInitTmr
     226  TaskTmrEvtProcess

 
 306 bytes in section .text
 
 306 bytes of CODE memory

Errors: none
Warnings: none

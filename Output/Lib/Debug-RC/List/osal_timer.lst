###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       26/Dec/2017  15:40:25
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  F:\iar\NC199B-100\Library\Source\OSAL\OS\osal_timer.c
#    Command line =  
#        F:\iar\NC199B-100\Library\Source\OSAL\OS\osal_timer.c -D
#        USE_STDPERIPH_DRIVER -D _STM32F10X_HD -D STM32F10X_CL -D DEBUG -D
#        STM32F103RC -D STM32_FLASH_SIZE=256 -D HSE_VALUE=25000000 -lCN
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\List\
#        -o
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        F:\iar\NC199B-100\Library\Project\IAR\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\User\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\AES\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Config\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\OS\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\User\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Source\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Port\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\OS\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Config\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Protocol\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Iap\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Driver\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\IAR\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\uCOS-III\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\CMSIS\CM3\CoreSupport\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\CMSIS\CM3\DeviceSupport\ST\STM32F10x\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\STM32F10x_StdPeriph_Driver\inc\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-CPU\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-CPU\ARM-Cortex-M3\IAR\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-LIB\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\OSAL\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\OSAL\OS\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\OS\uCOS-III\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\Source\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\Source\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\FatFs\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\FatFs\option\ -Om
#        --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\List\osal_timer.lst
#    Object file  =  
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-RC\Obj\osal_timer.o
#
###############################################################################

F:\iar\NC199B-100\Library\Source\OSAL\OS\osal_timer.c
      1          
      2          
      3          /*******************************************************************************
      4           *   Filename:       osal.h
      5           *   Revised:        $Date: 2013-04-17 $
      6           *   Revision:       $
      7           *   Writer:         Wuming Shen.
      8           *
      9           *   Description:
     10           *
     11           *   Notes:
     12           *
     13           *
     14           *   All copyrights reserved to Wuming Shen.
     15           *
     16           *******************************************************************************/
     17          /*******************************************************************************
     18           * INCLUDES
     19           */
     20          #include <osal.h>
     21          #include <osal_timer.h>
     22          #include <osal_event.h>
     23          #include <osal_memory.h>
     24          
     25          #include <bsp_timer.h>
     26          
     27          #if (UCOS_EN == DEF_ENABLED ) && ( OS_VERSION > 30000U )
     28          #include <os.h>
     29          #endif
     30          
     31          #if OSAL_TIMER_EN > 0
     32          
     33          /*******************************************************************************
     34           * CONSTANTS
     35           */
     36          
     37          /*******************************************************************************
     38           * TYPEDEFS
     39           */
     40          
     41          /*******************************************************************************
     42           * MACROS
     43           */
     44          
     45          /*******************************************************************************
     46           * LOCAL VARIABLES
     47           */

   \                                 In section .bss, align 4
     48          osalTimerRec_t *timerHead;
     49          byte            timerActive;                            // Flag if hw timer active
   \                     timerActive:
   \   00000000                      DS8 1
   \   00000001                      DS8 3
   \                     timerHead:
   \   00000004                      DS8 4
     50          #if OSAL_MEM_EN == 0
     51              osalTimerRec_t osalTimer[OSAL_MAX_TIMERS];
     52          #endif
     53          /*******************************************************************************
     54           * GLOBAL VARIABLES
     55           */
     56               
     57          /*******************************************************************************
     58           * LOCAL FUNCTIONS
     59           */
     60          void            osal_timer_activate         ( byte turn_on );
     61          osalTimerRec_t *osalFindTimer               ( osalTid task_id, osalEvt event_flag );
     62          void            osal_timer_hw_setup         ( byte turn_on );
     63          
     64          /*******************************************************************************
     65           * GLOBAL FUNCTIONS
     66           */
     67          INT32U          osal_system_clock;
   \                     osal_system_clock:
   \   00000008                      DS8 4

   \                                 In section .bss, align 4
   \                     osalTimer:
   \   00000000                      DS8 400
     68          
     69          /*******************************************************************************
     70           * EXTERN VARIABLES
     71           */
     72          
     73          /******************************************************************************/
     74          
     75          /*******************************************************************************
     76           * @fn      osalTimerInit
     77           *
     78           * @brief   Initialization for the OSAL Timer System.
     79           *
     80           * @param   none
     81           *
     82           * @return
     83           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     84          void osalTimerInit( void )
     85          {
   \                     osalTimerInit: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
     86          #if OSAL_MEM_EN == 0
     87              byte   idx;
     88              for ( idx = 0; idx < OSAL_MAX_TIMERS; idx++ ) {
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0xE00B             B.N      ??osalTimerInit_0
     89                  osalTimer[idx].next         = (void *)NULL;
   \                     ??osalTimerInit_1: (+1)
   \   00000006   0x....             LDR.N    R1,??DataTable7
   \   00000008   0xEB00 0x0280      ADD      R2,R0,R0, LSL #+2
   \   0000000C   0xEB01 0x0182      ADD      R1,R1,R2, LSL #+2
   \   00000010   0x2200             MOVS     R2,#+0
   \   00000012   0x600A             STR      R2,[R1, #+0]
     90                  osalTimer[idx].task_id      = 0;
   \   00000014   0x60CA             STR      R2,[R1, #+12]
     91                  osalTimer[idx].event_flag   = 0;
   \   00000016   0x604A             STR      R2,[R1, #+4]
     92                  osalTimer[idx].timeout      = 0;
   \   00000018   0x608A             STR      R2,[R1, #+8]
     93                  osalTimer[idx].reload       = 0;
   \   0000001A   0x610A             STR      R2,[R1, #+16]
     94              }
   \   0000001C   0x1C40             ADDS     R0,R0,#+1
   \                     ??osalTimerInit_0: (+1)
   \   0000001E   0x2814             CMP      R0,#+20
   \   00000020   0xDBF1             BLT.N    ??osalTimerInit_1
     95          #endif
     96              timerHead   = (void *)NULL;
   \   00000022   0x....             LDR.N    R4,??DataTable7_1
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x6060             STR      R0,[R4, #+4]
     97              // Initialize the system timer
     98              osal_timer_activate( FALSE );
   \   00000028   0x.... 0x....      BL       osal_timer_activate
     99              timerActive = FALSE;
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x7020             STRB     R0,[R4, #+0]
    100          
    101              osal_system_clock  = 0;
   \   00000030   0x60A0             STR      R0,[R4, #+8]
    102          }
   \   00000032   0xBD10             POP      {R4,PC}          ;; return
    103          
    104          /*******************************************************************************
    105           * @fn      osalAddTimer
    106           *
    107           * @brief   Add a timer to the timer list.
    108           *          Ints must be disabled.
    109           *
    110           * @param   task_id
    111           * @param   event_flag
    112           * @param   timeout
    113           *
    114           * @return  osalTimerRec_t * - pointer to newly created timer
    115           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    116          osalTimerRec_t *osalAddTimer( osalTid task_id, osalFlg event_flag, osalTime timeout )
    117          {
   \                     osalAddTimer: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0x4616             MOV      R6,R2
    118              osalTimerRec_t  *newTimer;
    119              osalTimerRec_t  *srchTimer;
    120              // Look for an existing timer first
    121              newTimer = osalFindTimer( task_id, event_flag );
   \   00000008   0x.... 0x....      BL       osalFindTimer
    122              if ( newTimer ) {
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD001             BEQ.N    ??osalAddTimer_0
    123                  // Timer is found - update it.
    124                  newTimer->timeout = timeout;
   \   00000010   0x6086             STR      R6,[R0, #+8]
    125          
    126                  return ( newTimer );
   \   00000012   0xBDF2             POP      {R1,R4-R7,PC}
    127              } else {
    128                  // New Timer
    129          #if OSAL_MEM_EN > 0
    130                  newTimer = osal_mem_alloc( sizeof( osalTimerRec_t ) );
    131          #else
    132                  byte           idx;
    133                  for ( idx = 0; idx < OSAL_MAX_TIMERS; idx++ ) {
   \                     ??osalAddTimer_0: (+1)
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0xE000             B.N      ??osalAddTimer_1
   \                     ??osalAddTimer_2: (+1)
   \   00000018   0x1C49             ADDS     R1,R1,#+1
   \                     ??osalAddTimer_1: (+1)
   \   0000001A   0xB2C9             UXTB     R1,R1
   \   0000001C   0x460A             MOV      R2,R1
   \   0000001E   0x2A14             CMP      R2,#+20
   \   00000020   0xDA08             BGE.N    ??osalAddTimer_3
    134                      if ( !osalTimer[idx].event_flag ) {
   \   00000022   0x....             LDR.N    R3,??DataTable7
   \   00000024   0xEB02 0x0782      ADD      R7,R2,R2, LSL #+2
   \   00000028   0xEB03 0x0287      ADD      R2,R3,R7, LSL #+2
   \   0000002C   0x6853             LDR      R3,[R2, #+4]
   \   0000002E   0x2B00             CMP      R3,#+0
   \   00000030   0xD1F2             BNE.N    ??osalAddTimer_2
    135                          newTimer    = &osalTimer[idx];
   \   00000032   0x4610             MOV      R0,R2
    136                          break;
    137                      }
    138                  }
    139          #endif
    140                  if ( newTimer ) {
   \                     ??osalAddTimer_3: (+1)
   \   00000034   0x2800             CMP      R0,#+0
   \   00000036   0xD010             BEQ.N    ??osalAddTimer_4
    141                      // Fill in new timer
    142                      newTimer->task_id       = task_id;
   \   00000038   0x60C4             STR      R4,[R0, #+12]
    143                      newTimer->event_flag    = event_flag;
   \   0000003A   0x6045             STR      R5,[R0, #+4]
    144                      newTimer->timeout       = timeout;
   \   0000003C   0x6086             STR      R6,[R0, #+8]
    145                      newTimer->next          = (void *)NULL;
   \   0000003E   0x2100             MOVS     R1,#+0
   \   00000040   0x6001             STR      R1,[R0, #+0]
    146          
    147                      // Does the timer list already exist
    148                      if ( timerHead == NULL ) {
   \   00000042   0x....             LDR.N    R1,??DataTable7_1
   \   00000044   0x684A             LDR      R2,[R1, #+4]
   \   00000046   0x2A00             CMP      R2,#+0
   \   00000048   0xD102             BNE.N    ??osalAddTimer_5
    149                          // Start task list
    150                          timerHead = newTimer;
   \   0000004A   0x6048             STR      R0,[R1, #+4]
   \   0000004C   0xBDF2             POP      {R1,R4-R7,PC}
    151                      } else {
    152                          // Add it to the end of the timer list
    153                          srchTimer = timerHead;
    154          
    155                          // Stop at the last record
    156                          while ( srchTimer->next )
    157                              srchTimer = srchTimer->next;
   \                     ??osalAddTimer_6: (+1)
   \   0000004E   0x460A             MOV      R2,R1
   \                     ??osalAddTimer_5: (+1)
   \   00000050   0x6811             LDR      R1,[R2, #+0]
   \   00000052   0x2900             CMP      R1,#+0
   \   00000054   0xD1FB             BNE.N    ??osalAddTimer_6
    158          
    159                          // Add to the list
    160                          srchTimer->next = newTimer;
   \   00000056   0x6010             STR      R0,[R2, #+0]
    161                      }
    162          
    163                      return ( newTimer );
   \   00000058   0xBDF2             POP      {R1,R4-R7,PC}
    164                  } else
    165                      return ( (osalTimerRec_t *)NULL );
   \                     ??osalAddTimer_4: (+1)
   \   0000005A   0x2000             MOVS     R0,#+0
   \   0000005C   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    166              }
    167          }
    168          
    169          /*******************************************************************************
    170           * @fn      osalFindTimer
    171           *
    172           * @brief   Find a timer in a timer list.
    173           *          Ints must be disabled.
    174           *
    175           * @param   task_id
    176           * @param   event_flag
    177           *
    178           * @return  osalTimerRec_t *
    179           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    180          osalTimerRec_t *osalFindTimer( osalTid task_id, osalFlg event_flag )
    181          {
    182              osalTimerRec_t  *srchTimer;
    183          
    184              // Head of the timer list
    185              srchTimer = timerHead;
   \                     osalFindTimer: (+1)
   \   00000000   0x....             LDR.N    R2,??DataTable7_1
   \   00000002   0x6852             LDR      R2,[R2, #+4]
   \   00000004   0xE000             B.N      ??osalFindTimer_0
    186          
    187              // Stop when found or at the end
    188              while ( srchTimer ) {
    189                  if ( srchTimer->event_flag == event_flag &&
    190                      srchTimer->task_id == task_id )
    191                      break;
    192                  // Not this one, check another
    193                  srchTimer = srchTimer->next;
   \                     ??osalFindTimer_1: (+1)
   \   00000006   0x6812             LDR      R2,[R2, #+0]
   \                     ??osalFindTimer_0: (+1)
   \   00000008   0x2A00             CMP      R2,#+0
   \   0000000A   0xD005             BEQ.N    ??osalFindTimer_2
   \   0000000C   0x6853             LDR      R3,[R2, #+4]
   \   0000000E   0x428B             CMP      R3,R1
   \   00000010   0xD1F9             BNE.N    ??osalFindTimer_1
   \   00000012   0x68D3             LDR      R3,[R2, #+12]
   \   00000014   0x4283             CMP      R3,R0
   \   00000016   0xD1F6             BNE.N    ??osalFindTimer_1
    194              }
    195              return ( srchTimer );
   \                     ??osalFindTimer_2: (+1)
   \   00000018   0x4610             MOV      R0,R2
   \   0000001A   0x4770             BX       LR               ;; return
    196          }
    197          
    198          /*******************************************************************************
    199           * @fn      osalDeleteTimer
    200           *
    201           * @brief   Delete a timer from a timer list.
    202           *          Ints must be disabled.
    203           *
    204           * @param   table
    205           * @param   rmTimer
    206           *
    207           * @return  none
    208           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    209          void osalDeleteTimer( osalTimerRec_t *rmTimer )
    210          {
    211              osalTimerRec_t  *srchTimer;
    212          
    213              // Does the timer list really exist
    214              if ( (timerHead != NULL) && rmTimer ) {
   \                     osalDeleteTimer: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable7_1
   \   00000002   0x684A             LDR      R2,[R1, #+4]
   \   00000004   0x2A00             CMP      R2,#+0
   \   00000006   0xD019             BEQ.N    ??osalDeleteTimer_0
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD017             BEQ.N    ??osalDeleteTimer_0
    215                  // Add it to the end of the timer list
    216                  srchTimer = timerHead;
    217          
    218                  // First element?
    219                  if ( srchTimer == rmTimer )  {
   \   0000000C   0x4282             CMP      R2,R0
   \   0000000E   0xD107             BNE.N    ??osalDeleteTimer_1
    220                      timerHead = rmTimer->next;
   \   00000010   0x6802             LDR      R2,[R0, #+0]
   \   00000012   0x604A             STR      R2,[R1, #+4]
    221          
    222          #if OSAL_MEM_EN > 0
    223                          osal_mem_free( rmTimer );
    224          #else
    225                          rmTimer->event_flag   = 0;
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x6041             STR      R1,[R0, #+4]
    226                          rmTimer->next         = (void *)NULL;
   \   00000018   0x6001             STR      R1,[R0, #+0]
    227                          rmTimer->task_id      = 0;
   \   0000001A   0x60C1             STR      R1,[R0, #+12]
   \   0000001C   0x4770             BX       LR
    228          #endif
    229                  } else {
    230                      // Stop when found or at the end
    231                      while ( srchTimer->next && srchTimer->next != rmTimer ) {
    232                          srchTimer = srchTimer->next;
   \                     ??osalDeleteTimer_2: (+1)
   \   0000001E   0x460A             MOV      R2,R1
    233                      }
   \                     ??osalDeleteTimer_1: (+1)
   \   00000020   0x6811             LDR      R1,[R2, #+0]
   \   00000022   0x2900             CMP      R1,#+0
   \   00000024   0xD001             BEQ.N    ??osalDeleteTimer_3
   \   00000026   0x4281             CMP      R1,R0
   \   00000028   0xD1F9             BNE.N    ??osalDeleteTimer_2
    234                      // Found?
    235                      if ( srchTimer->next == rmTimer ) {
   \                     ??osalDeleteTimer_3: (+1)
   \   0000002A   0x4281             CMP      R1,R0
   \   0000002C   0xD106             BNE.N    ??osalDeleteTimer_0
    236                          // Fix pointers
    237                          srchTimer->next = rmTimer->next;
   \   0000002E   0x6801             LDR      R1,[R0, #+0]
   \   00000030   0x6011             STR      R1,[R2, #+0]
    238                          // Deallocate the timer struct memory
    239          #if OSAL_MEM_EN > 0
    240                          osal_mem_free( rmTimer );
    241          #else
    242                          rmTimer->event_flag   = 0;
   \   00000032   0x2100             MOVS     R1,#+0
   \   00000034   0x6041             STR      R1,[R0, #+4]
    243                          rmTimer->next         = (void *)NULL;
   \   00000036   0x6001             STR      R1,[R0, #+0]
    244                          rmTimer->task_id      = 0;
   \   00000038   0x60C1             STR      R1,[R0, #+12]
    245                          rmTimer->reload       = 0;
   \   0000003A   0x6101             STR      R1,[R0, #+16]
    246          #endif
    247                      }
    248                  }
    249              }
    250          }
   \                     ??osalDeleteTimer_0: (+1)
   \   0000003C   0x4770             BX       LR               ;; return
    251          
    252          /*******************************************************************************
    253           * @fn      osal_timer_activate
    254           *
    255           * @brief
    256           *
    257           *   Turns the hardware timer on or off
    258           *
    259           * @param  byte turn_on - false - turn off, true - turn on
    260           *
    261           * @return  none
    262           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    263          void osal_timer_activate( byte turn_on )
    264          {
   \                     osal_timer_activate: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    265              osal_timer_hw_setup( turn_on );
   \   00000004   0x.... 0x....      BL       osal_timer_hw_setup
    266              timerActive = turn_on;
   \   00000008   0x....             LDR.N    R0,??DataTable7_1
   \   0000000A   0x7004             STRB     R4,[R0, #+0]
    267          }
   \   0000000C   0xBD10             POP      {R4,PC}          ;; return
    268          
    269          /*******************************************************************************
    270           * @fn      osal_timer_hw_setup
    271           *
    272           * @brief
    273           *
    274           *   Setup the timer hardware.
    275           *
    276           * @param  byte turn_on
    277           *
    278           * @return  void
    279           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    280          void osal_timer_hw_setup( byte turn_on )
    281          {
    282              if (turn_on) {
    283                  //OSAL_TIMER_TICKSTART( ) ;
    284              } else {
    285                  //OSAL_TIMER_TICKSTOP( );
    286              }
    287          }
   \                     osal_timer_hw_setup: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    288          
    289          /*******************************************************************************
    290           * @fn      osal_start_timerEx
    291           *
    292           * @brief
    293           *
    294           *   This function is called to start a timer to expire in n mSecs.
    295           *   When the timer expires, the calling task will get the specified event.
    296           *
    297           * @param   byte taskID - task id to set timer for
    298           * @param   INT16U event_id - event to be notified with
    299           * @param   UNINT16 timeout_value - in milliseconds.
    300           *
    301           * @return  ZSUCCESS, or NO_TIMER_AVAIL.
    302           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    303          byte osal_start_timerEx( osalTid taskID, osalEvt event_id, osalTime timeout_value )
    304          {
   \                     osal_start_timerEx: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0x4616             MOV      R6,R2
    305              halIntState_t     cpu_sr;
    306              osalTimerRec_t   *newTimer;
    307              OS_CRITICAL_ENTER();  // Hold off interrupts.
   \   00000008   0x.... 0x....      BL       CPU_SR_Save
   \   0000000C   0x4607             MOV      R7,R0
   \   0000000E   0x.... 0x....      BL       CPU_IntDisMeasStart
    308          
    309              // Add timer
    310              newTimer = osalAddTimer( taskID, event_id, timeout_value );
   \   00000012   0x4632             MOV      R2,R6
   \   00000014   0x4629             MOV      R1,R5
   \   00000016   0x4620             MOV      R0,R4
   \   00000018   0x.... 0x....      BL       osalAddTimer
   \   0000001C   0x0004             MOVS     R4,R0
    311              if ( newTimer ) {
   \   0000001E   0xD006             BEQ.N    ??osal_start_timerEx_0
    312                  // Does the timer need to be started?
    313                  if ( timerActive == FALSE ) {
   \   00000020   0x....             LDR.N    R0,??DataTable7_1
   \   00000022   0x7800             LDRB     R0,[R0, #+0]
   \   00000024   0x2800             CMP      R0,#+0
   \   00000026   0xD102             BNE.N    ??osal_start_timerEx_0
    314                      osal_timer_activate( TRUE );
   \   00000028   0x2001             MOVS     R0,#+1
   \   0000002A   0x.... 0x....      BL       osal_timer_activate
    315                  }
    316              }
    317          
    318              OS_CRITICAL_EXIT();   // Re-enable interrupts.
   \                     ??osal_start_timerEx_0: (+1)
   \   0000002E   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   00000032   0xB2FF             UXTB     R7,R7
   \   00000034   0x4638             MOV      R0,R7
   \   00000036   0x.... 0x....      BL       CPU_SR_Restore
    319          
    320              return ( (newTimer != NULL) ? ZSUCCESS : NO_TIMER_AVAIL );
   \   0000003A   0x2C00             CMP      R4,#+0
   \   0000003C   0xD001             BEQ.N    ??osal_start_timerEx_1
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0xBDF2             POP      {R1,R4-R7,PC}
   \                     ??osal_start_timerEx_1: (+1)
   \   00000042   0x200C             MOVS     R0,#+12
   \   00000044   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    321          }
    322          /*******************************************************************************
    323           * @fn      osal_start_timerRl
    324           *
    325           * @brief
    326           *
    327           *   This function is called to start a timer to expire in n mSecs.
    328           *   When the timer expires, the calling task will get the specified event.
    329           *
    330           * @param   byte taskID - task id to set timer for
    331           * @param   INT16U event_id - event to be notified with
    332           * @param   UNINT16 timeout_value - in milliseconds.
    333           *
    334           * @return  ZSUCCESS, or NO_TIMER_AVAIL.
    335           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    336          byte osal_start_timerRl( osalTid taskID, osalEvt event_id, osalTime timeout_value )
    337          {
   \                     osal_start_timerRl: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0x4616             MOV      R6,R2
    338              halIntState_t     cpu_sr;
    339              osalTimerRec_t   *newTimer;
    340              // Hold off interrupts.
    341              OS_CRITICAL_ENTER();
   \   00000008   0x.... 0x....      BL       CPU_SR_Save
   \   0000000C   0x4607             MOV      R7,R0
   \   0000000E   0x.... 0x....      BL       CPU_IntDisMeasStart
    342          
    343              // Add timer
    344              newTimer = osalAddTimer( taskID, event_id, timeout_value );
   \   00000012   0x4632             MOV      R2,R6
   \   00000014   0x4629             MOV      R1,R5
   \   00000016   0x4620             MOV      R0,R4
   \   00000018   0x.... 0x....      BL       osalAddTimer
   \   0000001C   0x0004             MOVS     R4,R0
    345              if ( newTimer ) {
   \   0000001E   0xD008             BEQ.N    ??osal_start_timerRl_0
    346                  newTimer->reload    = newTimer->timeout;
   \   00000020   0x68A0             LDR      R0,[R4, #+8]
   \   00000022   0x6120             STR      R0,[R4, #+16]
    347                  // Does the timer need to be started?
    348                  if ( timerActive == FALSE ) {
   \   00000024   0x....             LDR.N    R0,??DataTable7_1
   \   00000026   0x7800             LDRB     R0,[R0, #+0]
   \   00000028   0x2800             CMP      R0,#+0
   \   0000002A   0xD102             BNE.N    ??osal_start_timerRl_0
    349                      osal_timer_activate( TRUE );
   \   0000002C   0x2001             MOVS     R0,#+1
   \   0000002E   0x.... 0x....      BL       osal_timer_activate
    350                  }
    351              }
    352          
    353              OS_CRITICAL_EXIT();   // Re-enable interrupts.
   \                     ??osal_start_timerRl_0: (+1)
   \   00000032   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   00000036   0xB2FF             UXTB     R7,R7
   \   00000038   0x4638             MOV      R0,R7
   \   0000003A   0x.... 0x....      BL       CPU_SR_Restore
    354          
    355              return ( (newTimer != NULL) ? ZSUCCESS : NO_TIMER_AVAIL );
   \   0000003E   0x2C00             CMP      R4,#+0
   \   00000040   0xD001             BEQ.N    ??osal_start_timerRl_1
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0xBDF2             POP      {R1,R4-R7,PC}
   \                     ??osal_start_timerRl_1: (+1)
   \   00000046   0x200C             MOVS     R0,#+12
   \   00000048   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    356          }
    357          /*******************************************************************************
    358           * @fn      osal_stop_timerEx
    359           *
    360           * @brief
    361           *
    362           *   This function is called to stop a timer that has already been started.
    363           *   If ZSUCCESS, the function will cancel the timer and prevent the event
    364           *   associated with the timer from being set for the calling task.
    365           *
    366           * @param   byte task_id - task id of timer to stop
    367           * @param   INT16U event_id - identifier of the timer that is to be stopped
    368           *
    369           * @return  ZSUCCESS or INVALID_EVENT_ID
    370           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    371          byte osal_stop_timerEx( osalTid task_id, osalEvt event_id )
    372          {
   \                     osal_stop_timerEx: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    373              halIntState_t     cpu_sr;
    374              osalTimerRec_t   *foundTimer;
    375          
    376              CPU_CRITICAL_ENTER();  // Hold off interrupts.
   \   00000006   0x.... 0x....      BL       CPU_SR_Save
   \   0000000A   0x4606             MOV      R6,R0
   \   0000000C   0x.... 0x....      BL       CPU_IntDisMeasStart
    377          
    378              // Find the timer to stop
    379              foundTimer = osalFindTimer( task_id, event_id );
   \   00000010   0x4629             MOV      R1,R5
   \   00000012   0x4620             MOV      R0,R4
   \   00000014   0x.... 0x....      BL       osalFindTimer
   \   00000018   0x0004             MOVS     R4,R0
    380              if ( foundTimer ) {
   \   0000001A   0xD001             BEQ.N    ??osal_stop_timerEx_0
    381                  osalDeleteTimer( foundTimer );
   \   0000001C   0x.... 0x....      BL       osalDeleteTimer
    382              }
    383          
    384              CPU_CRITICAL_EXIT();   // Re-enable interrupts.
   \                     ??osal_stop_timerEx_0: (+1)
   \   00000020   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   00000024   0xB2F6             UXTB     R6,R6
   \   00000026   0x4630             MOV      R0,R6
   \   00000028   0x.... 0x....      BL       CPU_SR_Restore
    385          
    386              return ( (foundTimer != NULL) ? ZSUCCESS : INVALID_EVENT_ID );
   \   0000002C   0x2C00             CMP      R4,#+0
   \   0000002E   0xD001             BEQ.N    ??osal_stop_timerEx_1
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0xBD70             POP      {R4-R6,PC}
   \                     ??osal_stop_timerEx_1: (+1)
   \   00000034   0x2007             MOVS     R0,#+7
   \   00000036   0xBD70             POP      {R4-R6,PC}       ;; return
    387          }
    388          
    389          /*******************************************************************************
    390           * @fn      osalTimerUpdate
    391           *
    392           * @brief   Update the timer structures for a timer tick.
    393           *
    394           * @param   none
    395           *
    396           * @return  none
    397           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    398          void osalTimerUpdate( void )
    399          {
   \                     osalTimerUpdate: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    400              osalTimerRec_t  *srchTimer;
    401              osalTimerRec_t  *prevTimer;
    402              osalTimerRec_t  *saveTimer;
    403          
    404              // Update the system time
    405              osal_system_clock += OSAL_TICK_TIME_MS;
   \   00000002   0x....             LDR.N    R4,??DataTable7_1
   \   00000004   0x68A0             LDR      R0,[R4, #+8]
   \   00000006   0x1C40             ADDS     R0,R0,#+1
   \   00000008   0x60A0             STR      R0,[R4, #+8]
    406          
    407              // Look for open timer slot
    408              if ( timerHead != NULL ) {
   \   0000000A   0x6866             LDR      R6,[R4, #+4]
   \   0000000C   0x2E00             CMP      R6,#+0
   \   0000000E   0xD029             BEQ.N    ??osalTimerUpdate_0
    409                  // Add it to the end of the timer list
    410                  srchTimer = timerHead;
    411                  prevTimer = (void *)NULL;
   \   00000010   0x2500             MOVS     R5,#+0
   \   00000012   0xE002             B.N      ??osalTimerUpdate_1
    412          
    413                  // Look for open timer slot
    414                  while ( srchTimer ) {
    415                      // Decrease the correct amount of time
    416                      if (srchTimer->timeout <= OSAL_TICK_TIME_MS)
    417                          srchTimer->timeout = 0;
    418                      else
    419                          srchTimer->timeout = srchTimer->timeout - OSAL_TICK_TIME_MS;
    420          
    421                      // When timeout, execute the task
    422                      if ( srchTimer->timeout == 0 ) {
    423                          osal_set_event( srchTimer->task_id, srchTimer->event_flag );
    424                          if ( srchTimer->reload ) {
    425                            // Restart srchTimer
    426                            srchTimer->timeout    = srchTimer->reload;
   \                     ??osalTimerUpdate_2: (+1)
   \   00000014   0x60B0             STR      R0,[R6, #+8]
    427                            prevTimer = srchTimer;
   \   00000016   0x4635             MOV      R5,R6
    428                            // Get next
    429                            srchTimer = srchTimer->next;
   \   00000018   0x6836             LDR      R6,[R6, #+0]
    430                            continue;
    431                          }
   \                     ??osalTimerUpdate_1: (+1)
   \   0000001A   0x2E00             CMP      R6,#+0
   \   0000001C   0xD022             BEQ.N    ??osalTimerUpdate_0
   \   0000001E   0x68B0             LDR      R0,[R6, #+8]
   \   00000020   0x2802             CMP      R0,#+2
   \   00000022   0xD202             BCS.N    ??osalTimerUpdate_3
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x60B0             STR      R0,[R6, #+8]
   \   00000028   0xE001             B.N      ??osalTimerUpdate_4
   \                     ??osalTimerUpdate_3: (+1)
   \   0000002A   0x1E40             SUBS     R0,R0,#+1
   \   0000002C   0x60B0             STR      R0,[R6, #+8]
   \                     ??osalTimerUpdate_4: (+1)
   \   0000002E   0x68B0             LDR      R0,[R6, #+8]
   \   00000030   0x2800             CMP      R0,#+0
   \   00000032   0xD114             BNE.N    ??osalTimerUpdate_5
   \   00000034   0x6871             LDR      R1,[R6, #+4]
   \   00000036   0x68F0             LDR      R0,[R6, #+12]
   \   00000038   0x.... 0x....      BL       osal_set_event
   \   0000003C   0x6930             LDR      R0,[R6, #+16]
   \   0000003E   0x2800             CMP      R0,#+0
   \   00000040   0xD1E8             BNE.N    ??osalTimerUpdate_2
    432                          // Take out of list
    433                          if ( prevTimer == NULL )
   \   00000042   0x6830             LDR      R0,[R6, #+0]
   \   00000044   0x2D00             CMP      R5,#+0
   \   00000046   0xD101             BNE.N    ??osalTimerUpdate_6
    434                              timerHead = srchTimer->next;
   \   00000048   0x6060             STR      R0,[R4, #+4]
   \   0000004A   0xE000             B.N      ??osalTimerUpdate_7
    435                          else
    436                              prevTimer->next = srchTimer->next;
   \                     ??osalTimerUpdate_6: (+1)
   \   0000004C   0x6028             STR      R0,[R5, #+0]
    437                          // Next
    438                          saveTimer = srchTimer->next;
   \                     ??osalTimerUpdate_7: (+1)
   \   0000004E   0x6830             LDR      R0,[R6, #+0]
    439                          // Free memory
    440          #if OSAL_MEM_EN > 0
    441                          osal_mem_free( srchTimer );
    442          #else
    443                          srchTimer->event_flag   = 0;
   \   00000050   0x2100             MOVS     R1,#+0
   \   00000052   0x6071             STR      R1,[R6, #+4]
    444                          srchTimer->next         = (void *)NULL;
   \   00000054   0x6031             STR      R1,[R6, #+0]
    445                          srchTimer->task_id      = 0;
   \   00000056   0x60F1             STR      R1,[R6, #+12]
    446                          srchTimer->reload       = 0;
   \   00000058   0x6131             STR      R1,[R6, #+16]
    447          #endif
    448                          srchTimer = saveTimer;
   \   0000005A   0x4606             MOV      R6,R0
   \   0000005C   0xE7DD             B.N      ??osalTimerUpdate_1
    449                      } else {
    450                          // Get next
    451                          prevTimer = srchTimer;
   \                     ??osalTimerUpdate_5: (+1)
   \   0000005E   0x4635             MOV      R5,R6
    452                          srchTimer = srchTimer->next;
   \   00000060   0x6836             LDR      R6,[R6, #+0]
   \   00000062   0xE7DA             B.N      ??osalTimerUpdate_1
    453                      }
    454                  }
    455              }
    456          }
   \                     ??osalTimerUpdate_0: (+1)
   \   00000064   0xBD70             POP      {R4-R6,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x........         DC32     osalTimer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x........         DC32     timerActive
    457          
    458          /*******************************************************************************
    459           * 				     end of file                               *
    460           *******************************************************************************/
    461          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   osalAddTimer
        24   -> osalFindTimer
       0   osalDeleteTimer
       0   osalFindTimer
       8   osalTimerInit
         8   -> osal_timer_activate
      16   osalTimerUpdate
        16   -> osal_set_event
      24   osal_start_timerEx
        24   -> CPU_IntDisMeasStart
        24   -> CPU_IntDisMeasStop
        24   -> CPU_SR_Restore
        24   -> CPU_SR_Save
        24   -> osalAddTimer
        24   -> osal_timer_activate
      24   osal_start_timerRl
        24   -> CPU_IntDisMeasStart
        24   -> CPU_IntDisMeasStop
        24   -> CPU_SR_Restore
        24   -> CPU_SR_Save
        24   -> osalAddTimer
        24   -> osal_timer_activate
      16   osal_stop_timerEx
        16   -> CPU_IntDisMeasStart
        16   -> CPU_IntDisMeasStop
        16   -> CPU_SR_Restore
        16   -> CPU_SR_Save
        16   -> osalDeleteTimer
        16   -> osalFindTimer
       8   osal_timer_activate
         8   -> osal_timer_hw_setup
       0   osal_timer_hw_setup


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
      94  osalAddTimer
      62  osalDeleteTimer
      28  osalFindTimer
     400  osalTimer
      52  osalTimerInit
     102  osalTimerUpdate
      70  osal_start_timerEx
      74  osal_start_timerRl
      56  osal_stop_timerEx
      14  osal_timer_activate
       2  osal_timer_hw_setup
      12  timerActive
          timerHead
          osal_system_clock

 
 412 bytes in section .bss
 562 bytes in section .text
 
 562 bytes of CODE memory
 412 bytes of DATA memory

Errors: none
Warnings: none

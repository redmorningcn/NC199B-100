###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       26/Dec/2017  20:53:55
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  F:\iar\NC199B-100\Library\Source\OSAL\OS\osal.c
#    Command line =  
#        F:\iar\NC199B-100\Library\Source\OSAL\OS\osal.c -D
#        USE_STDPERIPH_DRIVER -D STM32F10X_CL -D RELEASE -D IMAGE_A -D
#        STM32F103RC -D STM32_FLASH_SIZE=256 -D HSE_VALUE=25000000 -lCN
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Relase-107C-APP\List\
#        -o
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Relase-107C-APP\Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        F:\iar\NC199B-100\Library\Project\IAR\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\User\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\AES\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Config\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\OS\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\User\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Source\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Port\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\OS\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Config\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Protocol\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Iap\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Driver\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\IAR\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\uCOS-III\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\CMSIS\CM3\CoreSupport\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\CMSIS\CM3\DeviceSupport\ST\STM32F10x\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\STM32F10x_StdPeriph_Driver\inc\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-CPU\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-CPU\ARM-Cortex-M3\IAR\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-LIB\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\OSAL\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\OSAL\OS\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\OS\uCOS-III\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\Source\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\Source\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\FatFs\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\FatFs\option\ -Om
#        --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Relase-107C-APP\List\osal.lst
#    Object file  =  
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Relase-107C-APP\Obj\osal.o
#
###############################################################################

F:\iar\NC199B-100\Library\Source\OSAL\OS\osal.c
      1          /*******************************************************************************
      2           *   Filename:      @osal.c
      3           *   Revised:
      4           *   Revision:
      5           *   Writer:        @Wuming Shen.
      6           *
      7           *   Description:
      8           *
      9           *   Notes:
     10           *
     11           *
     12           *   All copyrights reserved to Wuming Shen.
     13           *
     14           *******************************************************************************/
     15          
     16          /*******************************************************************************
     17           * INCLUDES
     18           */
     19          #include <global.h>
     20          #include <includes.h>
     21          #include <bsp_hal.h>
     22          
     23          #if OSAL_EN > 0
     24          /*******************************************************************************
     25           * CONSTANTS
     26           */
     27          
     28          /*******************************************************************************
     29           * TYPEDEFS
     30           */
     31          /*******************************************************************************
     32           * MACROS
     33           */
     34          
     35          
     36          /*******************************************************************************
     37           * LOCAL VARIABLES
     38           */
     39          
     40          /*******************************************************************************
     41           * GLOBAL VARIABLES
     42           */
     43          //osal_msg_q_t    osal_qHead;
     44          
     45          /*******************************************************************************
     46           * LOCAL FUNCTIONS
     47           */
     48          
     49          /*******************************************************************************
     50           * GLOBAL FUNCTIONS
     51           */
     52          
     53          /*******************************************************************************
     54           * EXTERN VARIABLES
     55           */
     56          
     57           /*******************************************************************************
     58           * EXTERN FUNCTIONS
     59           */
     60          
     61           /*******************************************************************************
     62           * @fn      osal_set_event
     63           *
     64           * @brief
     65           *
     66           *    This function is called to set the event flags for a task.  The
     67           *    event passed in is OR'd into the task's event variable.
     68           *
     69           * @param   byte task_id - receiving tasks ID
     70           * @param   byte event_flag - what event to set
     71           *
     72           * @return  ZSUCCESS, INVALID_TASK
     73           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     74          byte osal_set_event( osalTid task_id, osalFlg event_flag )
     75          {
   \                     osal_set_event: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x460C             MOV      R4,R1
     76              OsalTadkREC_t  *srchTask;
     77              halIntState_t   cpu_sr;
     78          
     79              srchTask = osalFindTask( task_id );
   \   00000004   0x.... 0x....      BL       osalFindTask
   \   00000008   0x0005             MOVS     R5,R0
     80              if ( srchTask ) {
   \   0000000A   0xD012             BEQ.N    ??osal_set_event_0
     81                  // Hold off interrupts
     82                  CPU_CRITICAL_ENTER();
   \   0000000C   0x.... 0x....      BL       CPU_SR_Save
   \   00000010   0x4606             MOV      R6,R0
   \   00000012   0x.... 0x....      BL       CPU_IntDisMeasStart
     83                  // Stuff the event bit(s)
     84                  srchTask->events |= event_flag;
   \   00000016   0x6968             LDR      R0,[R5, #+20]
   \   00000018   0x4320             ORRS     R0,R4,R0
   \   0000001A   0x6168             STR      R0,[R5, #+20]
     85                  // Release interrupts
     86                  CPU_CRITICAL_EXIT();
   \   0000001C   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   00000020   0xB2F6             UXTB     R6,R6
   \   00000022   0x4630             MOV      R0,R6
   \   00000024   0x.... 0x....      BL       CPU_SR_Restore
     87          #if (UCOS_EN == DEF_ENABLED ) && ( OS_VERSION > 30000U )
     88                  BSP_OS_SemPost(&Osal_EvtSem);                     // ∑¢ÀÕ–≈∫≈¡ø
   \   00000028   0x....             LDR.N    R0,??DataTable1
   \   0000002A   0x.... 0x....      BL       BSP_OS_SemPost
     89          #endif
     90              } else
     91                  return ( INVALID_TASK );
     92              return ( ZSUCCESS );
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0xBD70             POP      {R4-R6,PC}
   \                     ??osal_set_event_0: (+1)
   \   00000032   0x2001             MOVS     R0,#+1
   \   00000034   0xBD70             POP      {R4-R6,PC}       ;; return
     93          }
     94          
     95          /*******************************************************************************
     96           * @fn      osal_init_system
     97           *
     98           * @brief
     99           *
    100           *   This function initializes the "task" system by creating the
    101           *   tasks defined in the task table (OSAL_Tasks.h).
    102           *
    103           * @param   void
    104           *
    105           * @return  ZSUCCESS
    106           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    107          byte osal_init_system( void )
    108          {
   \                     osal_init_system: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    109              // Initialize the Memory Allocation System
    110          #if OSAL_MEM_EN > 0
    111              osal_mem_init();
    112          #endif
    113              // Initialize the message queue
    114              // osal_qHead = NULL;
    115          
    116          #if defined( OSAL_TOTAL_MEM )
    117            osal_msg_cnt = 0;
    118          #endif
    119          
    120              // Initialize the timers
    121              osalTimerInit();
   \   00000002   0x.... 0x....      BL       osalTimerInit
    122          
    123              // Initialize the tasking system
    124              osal_init_TaskHead();
   \   00000006   0x.... 0x....      BL       osal_init_TaskHead
    125          
    126              return ( ZSUCCESS );
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0xBD02             POP      {R1,PC}          ;; return
    127          }
    128          
    129          /*******************************************************************************
    130           * @fn      osal_start_system
    131           *
    132           * @brief
    133           *
    134           *   This function is the main loop function of the task system.  It
    135           *   will look through all task events and call the task_event_processor()
    136           *   function for the task with the event.  If there are no events (for
    137           *   all tasks), this function puts the processor into Sleep.
    138           *   This Function doesn't return.
    139           *
    140           * @param   void
    141           *
    142           * @return  none
    143           *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    144          void osal_start_system( void )
    145          {
   \                     osal_start_system: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x....             LDR.N    R5,??DataTable1_1
    146              osalEvt       events;
    147              halIntState_t cpu_sr;
    148          
    149              /***********************************************
    150              * √Ë ˆ£∫OSAL»ŒŒÒ≤È—Ø∫Õ÷¥––
    151              */
    152              while(1) {
    153                  /***********************************************
    154                  * √Ë ˆ£∫”√”⁄–Ë“™œµÕ≥◊‹ «≤È—Øµƒµƒ ¬º˛£¨»Á£∫
    155                  *       ¥Æø⁄Ω” ’ ¬º˛£¨∞¥≈•…®√Ë ¬º˛µ»
    156                  */
    157                  HAL_ProcessPoll();
   \                     ??osal_start_system_0: (+1)
   \   00000004   0x.... 0x....      BL       HAL_ProcessPoll
    158                  /***********************************************
    159                  * √Ë ˆ£∫≤È’“ «∑Ò”–»ŒŒÒ≤˙…˙ ¬º˛
    160                  */
    161                  TaskActive = osalNextActiveTask();
   \   00000008   0x.... 0x....      BL       osalNextActiveTask
   \   0000000C   0x6028             STR      R0,[R5, #+0]
    162          
    163                  /***********************************************
    164                  * √Ë ˆ£∫»Áπ˚µ±«∞»ŒŒÒ”– ¬º˛∑¢…˙
    165                  */
    166                  if ( TaskActive ) {
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD0F8             BEQ.N    ??osal_start_system_0
    167                      CPU_CRITICAL_ENTER();
   \   00000012   0x.... 0x....      BL       CPU_SR_Save
   \   00000016   0x4606             MOV      R6,R0
   \   00000018   0x.... 0x....      BL       CPU_IntDisMeasStart
    168                      events = TaskActive->events;
   \   0000001C   0x6828             LDR      R0,[R5, #+0]
   \   0000001E   0x6944             LDR      R4,[R0, #+20]
    169                      /***********************************************
    170                      * √Ë ˆ£∫«Â≥˝µ±«∞»ŒŒÒ ¬º˛
    171                      */
    172                      TaskActive->events = 0;
   \   00000020   0x2100             MOVS     R1,#+0
   \   00000022   0x6141             STR      R1,[R0, #+20]
    173                      CPU_CRITICAL_EXIT();
   \   00000024   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   00000028   0xB2F6             UXTB     R6,R6
   \   0000002A   0x4630             MOV      R0,R6
   \   0000002C   0x.... 0x....      BL       CPU_SR_Restore
    174          
    175                      /***********************************************
    176                      * √Ë ˆ£∫‘Ÿ¥ŒºÏ≤È ¬º˛ «∑Ò¥Ê‘⁄
    177                      */
    178                      if ( events != 0 ) {
   \   00000030   0x2C00             CMP      R4,#+0
   \   00000032   0xD0E7             BEQ.N    ??osal_start_system_0
    179                          /***********************************************
    180                          * √Ë ˆ£∫≈–∂œ»ŒŒÒ∫Ø ˝ «∑Ò¥Ê‘⁄
    181                          */
    182                          if ( TaskActive->pfnEventProcessor ) {
   \   00000034   0x6828             LDR      R0,[R5, #+0]
   \   00000036   0x6882             LDR      R2,[R0, #+8]
   \   00000038   0x0011             MOVS     R1,R2
   \   0000003A   0xD0E3             BEQ.N    ??osal_start_system_0
    183                              /***********************************************
    184                              * √Ë ˆ£∫÷¥––»ŒŒÒ¥¶¿Ì∏ﬂ”≈œ»º∂ ¬º˛≤¢∑µªÿŒ¥¥¶¿ÌÕÍµƒ ¬º˛
    185                              *        ¬º˛÷µ‘Ω–°£¨”≈œ»º∂‘Ω∏ﬂ
    186                              */
    187                              events = (TaskActive->pfnEventProcessor)( TaskActive->taskID, events );
   \   0000003C   0x4621             MOV      R1,R4
   \   0000003E   0x68C0             LDR      R0,[R0, #+12]
   \   00000040   0x4790             BLX      R2
   \   00000042   0x4604             MOV      R4,R0
    188                              /***********************************************
    189                              * √Ë ˆ£∫ÃÌº”∑µªÿŒ¥¥¶¿ÌÕÍµƒ ¬º˛µΩµ±«∞»ŒŒÒ£¨µ»¥˝œ¬¥Œ÷¥––
    190                              */
    191                              CPU_CRITICAL_ENTER();
   \   00000044   0x.... 0x....      BL       CPU_SR_Save
   \   00000048   0x4606             MOV      R6,R0
   \   0000004A   0x.... 0x....      BL       CPU_IntDisMeasStart
    192                              TaskActive->events |= events;
   \   0000004E   0x6828             LDR      R0,[R5, #+0]
   \   00000050   0x6941             LDR      R1,[R0, #+20]
   \   00000052   0x4321             ORRS     R1,R4,R1
   \   00000054   0x6141             STR      R1,[R0, #+20]
    193                              CPU_CRITICAL_EXIT();
   \   00000056   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   0000005A   0xB2F6             UXTB     R6,R6
   \   0000005C   0x4630             MOV      R0,R6
   \   0000005E   0x.... 0x....      BL       CPU_SR_Restore
   \   00000062   0xE7CF             B.N      ??osal_start_system_0
    194                          }
    195                      }
    196                  }
    197              }
    198          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     Osal_EvtSem

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x........         DC32     TaskActive
    199          /*******************************************************************************
    200           * 				end of file                                    *
    201           *******************************************************************************/
    202          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   osal_init_system
         8   -> osalTimerInit
         8   -> osal_init_TaskHead
      16   osal_set_event
        16   -> BSP_OS_SemPost
        16   -> CPU_IntDisMeasStart
        16   -> CPU_IntDisMeasStop
        16   -> CPU_SR_Restore
        16   -> CPU_SR_Save
        16   -> osalFindTask
      16   osal_start_system
        16   -- Indirect call
        16   -> CPU_IntDisMeasStart
        16   -> CPU_IntDisMeasStop
        16   -> CPU_SR_Restore
        16   -> CPU_SR_Save
        16   -> HAL_ProcessPoll
        16   -> osalNextActiveTask


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
      14  osal_init_system
      54  osal_set_event
     100  osal_start_system

 
 176 bytes in section .text
 
 176 bytes of CODE memory

Errors: none
Warnings: none

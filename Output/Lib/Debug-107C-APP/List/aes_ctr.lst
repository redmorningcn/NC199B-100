###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       26/Dec/2017  20:52:58
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  F:\iar\NC199B-100\Library\Source\APP\AES\aes_ctr.c
#    Command line =  
#        F:\iar\NC199B-100\Library\Source\APP\AES\aes_ctr.c -D
#        USE_STDPERIPH_DRIVER -D STM32F10X_CL -D DEBUG -D IMAGE_A -D
#        STM32F103RC -D STM32_FLASH_SIZE=256 -D HSE_VALUE=25000000 -lCN
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-107C-APP\List\
#        -o
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-107C-APP\Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        F:\iar\NC199B-100\Library\Project\IAR\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\User\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\AES\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Config\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\OS\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\User\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Source\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Port\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\OS\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\SIM900A\Config\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Protocol\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\APP\Iap\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Driver\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\IAR\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\uCOS-III\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\CMSIS\CM3\CoreSupport\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\CMSIS\CM3\DeviceSupport\ST\STM32F10x\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\St\FWLib\STM32F10x_StdPeriph_Driver\inc\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-CPU\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-CPU\ARM-Cortex-M3\IAR\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-LIB\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\BSP\Os\OSAL\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\OSAL\OS\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\Cfg\Template\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\OS\uCOS-III\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-MB\Source\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\Ports\ARM-Cortex-M3\Generic\IAR\
#        -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\Micrium\uC-OS-III\Source\
#        -I F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\FatFs\ -I
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\Source\FatFs\option\ -Om
#        --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.3\arm\CMSIS\Include\"
#    List file    =  
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-107C-APP\List\aes_ctr.lst
#    Object file  =  
#        F:\iar\NC199B-100\Library\Project\IAR\..\..\..\Output\Lib\Debug-107C-APP\Obj\aes_ctr.o
#
###############################################################################

F:\iar\NC199B-100\Library\Source\APP\AES\aes_ctr.c
      1          /** crypto/aes/aes_ctr.c -*- mode:C; c-file-style: "eay" -*- */
      2          /** ====================================================================
      3           * Copyright (c) 1998-2002 The OpenSSL Project.  All rights reserved.
      4           *
      5           * Redistribution and use in source and binary forms, with or without
      6           * modification, are permitted provided that the following conditions
      7           * are met:
      8           *
      9           * 1. Redistributions of source code must retain the above copyright
     10           *    notice, this list of conditions and the following disclaimer. 
     11           *
     12           * 2. Redistributions in binary form must reproduce the above copyright
     13           *    notice, this list of conditions and the following disclaimer in
     14           *    the documentation and/or other materials provided with the
     15           *    distribution.
     16           *
     17           * 3. All advertising materials mentioning features or use of this
     18           *    software must display the following acknowledgment:
     19           *    "This product includes software developed by the OpenSSL Project
     20           *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
     21           *
     22           * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
     23           *    endorse or promote products derived from this software without
     24           *    prior written permission. For written permission, please contact
     25           *    openssl-core@openssl.org.
     26           *
     27           * 5. Products derived from this software may not be called "OpenSSL"
     28           *    nor may "OpenSSL" appear in their names without prior written
     29           *    permission of the OpenSSL Project.
     30           *
     31           * 6. Redistributions of any form whatsoever must retain the following
     32           *    acknowledgment:
     33           *    "This product includes software developed by the OpenSSL Project
     34           *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
     35           *
     36           * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
     37           * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     38           * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
     39           * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
     40           * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
     41           * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
     42           * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
     43           * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
     44           * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
     45           * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
     46           * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
     47           * OF THE POSSIBILITY OF SUCH DAMAGE.
     48           * ====================================================================
     49           *
     50           */
     51          
     52          #ifndef AES_DEBUG
     53          # ifndef NDEBUG
     54          #  define NDEBUG
     55          # endif
     56          #endif
     57          #include <assert.h>
     58          
     59          #include <aes.h>
     60          #include "aes_locl.h"
     61          
     62          /** NOTE: the IV/counter CTR mode is big-endian.  The rest of the AES code
     63           * is endian-neutral. */
     64          
     65          /** increment counter (128-bit int) by 1 */

   \                                 In section .text, align 2, keep-with-next
     66          static void AES_ctr128_inc(unsigned char *counter) {
     67          	unsigned long c;
     68          
     69          	/** Grab bottom dword of counter and increment */
     70          	c = GETU32(counter + 12);
     71          	c++;	c &= 0xFFFFFFFF;
   \                     AES_ctr128_inc: (+1)
   \   00000000   0x7B01             LDRB     R1,[R0, #+12]
   \   00000002   0x7B42             LDRB     R2,[R0, #+13]
   \   00000004   0x0412             LSLS     R2,R2,#+16
   \   00000006   0xEA82 0x6101      EOR      R1,R2,R1, LSL #+24
   \   0000000A   0x7B82             LDRB     R2,[R0, #+14]
   \   0000000C   0xEA81 0x2102      EOR      R1,R1,R2, LSL #+8
   \   00000010   0x7BC2             LDRB     R2,[R0, #+15]
   \   00000012   0x4051             EORS     R1,R2,R1
   \   00000014   0x1C49             ADDS     R1,R1,#+1
     72          	PUTU32(counter + 12, c);
   \   00000016   0x0E0A             LSRS     R2,R1,#+24
   \   00000018   0x7302             STRB     R2,[R0, #+12]
   \   0000001A   0x0C0A             LSRS     R2,R1,#+16
   \   0000001C   0x7342             STRB     R2,[R0, #+13]
   \   0000001E   0x0A0A             LSRS     R2,R1,#+8
   \   00000020   0x7382             STRB     R2,[R0, #+14]
   \   00000022   0x73C1             STRB     R1,[R0, #+15]
     73          
     74          	/** if no overflow, we're done */
     75          	if (c)
   \   00000024   0x2900             CMP      R1,#+0
   \   00000026   0xD139             BNE.N    ??AES_ctr128_inc_0
     76          		return;
     77          
     78          	/** Grab 1st dword of counter and increment */
     79          	c = GETU32(counter +  8);
     80          	c++;	c &= 0xFFFFFFFF;
   \   00000028   0x7A01             LDRB     R1,[R0, #+8]
   \   0000002A   0x7A42             LDRB     R2,[R0, #+9]
   \   0000002C   0x0412             LSLS     R2,R2,#+16
   \   0000002E   0xEA82 0x6101      EOR      R1,R2,R1, LSL #+24
   \   00000032   0x7A82             LDRB     R2,[R0, #+10]
   \   00000034   0xEA81 0x2102      EOR      R1,R1,R2, LSL #+8
   \   00000038   0x7AC2             LDRB     R2,[R0, #+11]
   \   0000003A   0x4051             EORS     R1,R2,R1
   \   0000003C   0x1C49             ADDS     R1,R1,#+1
     81          	PUTU32(counter +  8, c);
   \   0000003E   0x0E0A             LSRS     R2,R1,#+24
   \   00000040   0x7202             STRB     R2,[R0, #+8]
   \   00000042   0x0C0A             LSRS     R2,R1,#+16
   \   00000044   0x7242             STRB     R2,[R0, #+9]
   \   00000046   0x0A0A             LSRS     R2,R1,#+8
   \   00000048   0x7282             STRB     R2,[R0, #+10]
   \   0000004A   0x72C1             STRB     R1,[R0, #+11]
     82          
     83          	/** if no overflow, we're done */
     84          	if (c)
   \   0000004C   0x2900             CMP      R1,#+0
   \   0000004E   0xD125             BNE.N    ??AES_ctr128_inc_0
     85          		return;
     86          
     87          	/** Grab 2nd dword of counter and increment */
     88          	c = GETU32(counter +  4);
     89          	c++;	c &= 0xFFFFFFFF;
   \   00000050   0x7901             LDRB     R1,[R0, #+4]
   \   00000052   0x7942             LDRB     R2,[R0, #+5]
   \   00000054   0x0412             LSLS     R2,R2,#+16
   \   00000056   0xEA82 0x6101      EOR      R1,R2,R1, LSL #+24
   \   0000005A   0x7982             LDRB     R2,[R0, #+6]
   \   0000005C   0xEA81 0x2102      EOR      R1,R1,R2, LSL #+8
   \   00000060   0x79C2             LDRB     R2,[R0, #+7]
   \   00000062   0x4051             EORS     R1,R2,R1
   \   00000064   0x1C49             ADDS     R1,R1,#+1
     90          	PUTU32(counter +  4, c);
   \   00000066   0x0E0A             LSRS     R2,R1,#+24
   \   00000068   0x7102             STRB     R2,[R0, #+4]
   \   0000006A   0x0C0A             LSRS     R2,R1,#+16
   \   0000006C   0x7142             STRB     R2,[R0, #+5]
   \   0000006E   0x0A0A             LSRS     R2,R1,#+8
   \   00000070   0x7182             STRB     R2,[R0, #+6]
   \   00000072   0x71C1             STRB     R1,[R0, #+7]
     91          
     92          	/** if no overflow, we're done */
     93          	if (c)
   \   00000074   0x2900             CMP      R1,#+0
   \   00000076   0xD111             BNE.N    ??AES_ctr128_inc_0
     94          		return;
     95          
     96          	/** Grab top dword of counter and increment */
     97          	c = GETU32(counter +  0);
     98          	c++;	c &= 0xFFFFFFFF;
   \   00000078   0x7801             LDRB     R1,[R0, #+0]
   \   0000007A   0x7842             LDRB     R2,[R0, #+1]
   \   0000007C   0x0412             LSLS     R2,R2,#+16
   \   0000007E   0xEA82 0x6101      EOR      R1,R2,R1, LSL #+24
   \   00000082   0x7882             LDRB     R2,[R0, #+2]
   \   00000084   0xEA81 0x2102      EOR      R1,R1,R2, LSL #+8
   \   00000088   0x78C2             LDRB     R2,[R0, #+3]
   \   0000008A   0x4051             EORS     R1,R2,R1
   \   0000008C   0x1C49             ADDS     R1,R1,#+1
     99          	PUTU32(counter +  0, c);
   \   0000008E   0x0E0A             LSRS     R2,R1,#+24
   \   00000090   0x7002             STRB     R2,[R0, #+0]
   \   00000092   0x0C0A             LSRS     R2,R1,#+16
   \   00000094   0x7042             STRB     R2,[R0, #+1]
   \   00000096   0x0A0A             LSRS     R2,R1,#+8
   \   00000098   0x7082             STRB     R2,[R0, #+2]
   \   0000009A   0x70C1             STRB     R1,[R0, #+3]
    100          }
   \                     ??AES_ctr128_inc_0: (+1)
   \   0000009C   0x4770             BX       LR               ;; return
    101          
    102          /** The input encrypted as though 128bit counter mode is being
    103           * used.  The extra state information to record how much of the
    104           * 128bit block we have used is contained in *num, and the
    105           * encrypted counter is kept in ecount_buf.  Both *num and
    106           * ecount_buf must be initialised with zeros before the first
    107           * call to AES_ctr128_encrypt().
    108           *
    109           * This algorithm assumes that the counter is in the x lower bits
    110           * of the IV (ivec), and that the application has full control over
    111           * overflow and the rest of the IV.  This implementation takes NO
    112           * responsability for checking that the counter doesn't overflow
    113           * into the rest of the IV when incremented.
    114           */

   \                                 In section .text, align 2, keep-with-next
    115          void AES_ctr128_encrypt(const unsigned char *in, unsigned char *out,
    116          	const unsigned long length, const AES_KEY *key,
    117          	unsigned char ivec[AES_BLOCK_SIZE],
    118          	unsigned char ecount_buf[AES_BLOCK_SIZE],
    119          	unsigned int *num) {
   \                     AES_ctr128_encrypt: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
   \   00000008   0x4693             MOV      R11,R2
   \   0000000A   0x461E             MOV      R6,R3
    120          
    121          	unsigned int n;
    122          	unsigned long l=length;
   \   0000000C   0x9F0C             LDR      R7,[SP, #+48]
    123          
    124          	assert(in && out && key && counter && num);
    125          	assert(*num < AES_BLOCK_SIZE);
    126          
    127          	n = *num;
   \   0000000E   0xF8D7 0xA000      LDR      R10,[R7, #+0]
   \   00000012   0xF8DD 0x8028      LDR      R8,[SP, #+40]
   \   00000016   0xF8DD 0x902C      LDR      R9,[SP, #+44]
   \   0000001A   0xE015             B.N      ??AES_ctr128_encrypt_0
    128          
    129          	while (l--) {
    130          		if (n == 0) {
   \                     ??AES_ctr128_encrypt_1: (+1)
   \   0000001C   0xF1BA 0x0F00      CMP      R10,#+0
   \   00000020   0xD107             BNE.N    ??AES_ctr128_encrypt_2
    131          			AES_encrypt(ivec, ecount_buf, key);
   \   00000022   0x4632             MOV      R2,R6
   \   00000024   0x4649             MOV      R1,R9
   \   00000026   0x4640             MOV      R0,R8
   \   00000028   0x.... 0x....      BL       AES_encrypt
    132           			AES_ctr128_inc(ivec);
   \   0000002C   0x4640             MOV      R0,R8
   \   0000002E   0x.... 0x....      BL       AES_ctr128_inc
    133          		}
    134          		*(out++) = *(in++) ^ ecount_buf[n];
   \                     ??AES_ctr128_encrypt_2: (+1)
   \   00000032   0xF814 0x0B01      LDRB     R0,[R4], #+1
   \   00000036   0xF81A 0x1009      LDRB     R1,[R10, R9]
   \   0000003A   0x4048             EORS     R0,R1,R0
   \   0000003C   0xF805 0x0B01      STRB     R0,[R5], #+1
    135          		n = (n+1) % AES_BLOCK_SIZE;
   \   00000040   0xF10A 0x0001      ADD      R0,R10,#+1
   \   00000044   0xF000 0x0A0F      AND      R10,R0,#0xF
    136          	}
   \                     ??AES_ctr128_encrypt_0: (+1)
   \   00000048   0x4658             MOV      R0,R11
   \   0000004A   0xF1A0 0x0B01      SUB      R11,R0,#+1
   \   0000004E   0x2800             CMP      R0,#+0
   \   00000050   0xD1E4             BNE.N    ??AES_ctr128_encrypt_1
    137          
    138          	*num=n;
   \   00000052   0xF8C7 0xA000      STR      R10,[R7, #+0]
    139          }
   \   00000056   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}   ;; return
    140          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      40   AES_ctr128_encrypt
        40   -> AES_ctr128_inc
        40   -> AES_encrypt
       0   AES_ctr128_inc


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      90  AES_ctr128_encrypt
     158  AES_ctr128_inc

 
 248 bytes in section .text
 
 248 bytes of CODE memory

Errors: none
Warnings: none
